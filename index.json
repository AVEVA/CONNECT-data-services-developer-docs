{
    "Content_Portal/Concepts/Account_Management_Concepts.html":  {
                                                                     "href":  "Content_Portal/Concepts/Account_Management_Concepts.html",
                                                                     "title":  "Introduction to tenant management",
                                                                     "keywords":  "Introduction to tenant management A tenant represents the set of services, applications, data, and configuration states available in OSIsoft Cloud Services (OCS). The important components of tenants that enable you to manage your OCS implementation are explained here. Introduction to tenants A tenant represents the set of services, applications, data, and configuration states available in OSIsoft Cloud Services (OCS). Users are associated with a tenant via at least one configured identity provider, a database of user records that allows for authentication, and access to resources can be managed for those users via the assignment of roles. Before a customer can use OCS, a tenant must be provisioned for them. A customer will have at least one tenant and could have more than one tenant. Tenants also span regions within OCS. For example, OCS currently has services hosted in two regions, West US, and West Europe. If the tenant is authorized to use multiple regions, they can create resources (for example, namespaces) in each region. Introduction to namespaces A namespace is a logical unit of organization for data within a tenant. Each tenant may contain more than one namespace. Before you can put data into OCS for a particular tenant, your site must create a namespace. A namespace is a logical unit for data within the tenant. When you create a namespace, you must specify the region where that namespace resides (for example, West US). After the namespace is created and the necessary resources have been allocated to support it, any data you put into the namespace will reside in the selected region. When a namespace is created, a set of OSIsoft Cloud Services (OCS) data processing resources (for example, SDS and Asset service), along with the associated storage resources, are allocated to support that namespace. Each namespace is distinct and separate from other namespaces and, therefore, they isolate the resources contained within it. The resources are scoped to the namespace. Therefore, you can create an SdsType or an SdsStream object with the same name in two different namespaces. Any data stored within a namespace is tied to that namespace along with the region where the namespace was allocated. OCS does not currently provide a mechanism to directly transfer data from one namespace (or region) to any other namespace (or region). To migrate data between namespaces, and thus between namespaces in different regions, the data must be exported from the source namespace in OCS, then imported into the destination namespace. How users are authenticated Authentication of individuals using OCS is performed by the identity provider associated with the tenant. When a user logs in to OCS, they authenticate themselves with an identity provider such as Google or Azure Active Directory. The identity provider authenticates the user against the credentials in its database. Upon successful authentication, it passes a token back to OCS granting the user access. A user???s access to an OCS object is determined by the roles they are assigned and the corresponding access control lists. See Roles for more information. Application and adapter access as clients Clients are applications and adapters, acting on behalf of users, that allow for programmatic access to the OCS APIs. The following client types are supported in OCS: Client credential clients ?? Used for server-to-server communications without the presence or intervention of a user. Examples include OSIAdapter or Edge Data Store sending data to OCS. The client credentials client is issued a client ID and secret. Once authenticated, it is granted an access token with a defined lifetime. The tokens may either be short-lived access tokens or longer-lived refresh tokens that allow the client to request new access tokens. Authorization code clients ?? Used by web-based applications, native mobile applications, and desktop applications that access OCS, this client type requires user interaction. Users authenticate with the identity provider. This client supports silent refresh, which allows the user to automatically receive a new access token, providing for uninterrupted access to the application. Hybrid clients ?? Used by thick client applications, this client requires user interaction. The user authenticates with the identity provider. Once the user is authenticated, then the server-side client steps in and server-to-server communication commences. Refresh tokens and access tokens are granted to the server-side client, requiring no further user interaction. Clients are assigned roles that define their access to OCS objects. See Roles for more information. Roles and ACLs control access to OCS objects Roles, in combination with access control lists (ACL), determine the level of access to OCS objects. The Tenant Administrator creates roles for the users and clients that will access OCS and assigns the appropriate roles to them. Additionally, the administrator creates an ACL for each OCS object (namespaces, streams, and so on) that defines access permissions for each type of role. Users and clients are granted access permissions to OCS objects based on their assigned roles and the corresponding ACLs. OCS provides two built-in roles: Tenant Member ?? Assigned to every user and client credentials client. Users and clients assigned this role can access objects or information of which they are the owner. Tenant Administrator ?? Role with the highest privileges, the tenant Administrator can create and delete users, clients, and secrets."
                                                                 },
    "Content_Portal/Concepts/Concepts_Overview.html":  {
                                                           "href":  "Content_Portal/Concepts/Concepts_Overview.html",
                                                           "title":  "OSIsoft Cloud Services",
                                                           "keywords":  "OSIsoft Cloud Services OSIsoft Cloud Services (OCS) is a database platform as a service (dbPaaS) designed for real-time operations data. Users inside and outside organizations have a flexible, secure, and easy way to access operations data that may be located within a primary control network or at the edge of the industrial network. From data collection to data access to data delivery, OCS provides users with an easy way to prepare and share access to data through a REST API. Contextual information can be added to time-based operations data, enabling process engineers and systems operators to make decisions and take corrective or preemptive actions."
                                                       },
    "Content_Portal/Concepts/Consent.html":  {
                                                 "href":  "Content_Portal/Concepts/Consent.html",
                                                 "title":  "Consent to Add AAD or AAD with Advanced Integration as an Identity Provider to your OCS Tenant",
                                                 "keywords":  "Consent to Add AAD or AAD with Advanced Integration as an Identity Provider to your OCS Tenant There are three possible consent paths when integrating your OCS tenant with your AAD tenant. The different paths depend on if you wish to use Advanced Integration and whether you are provisioning a new OCS tenant or modifying an existing OCS tenant. The consent paths are as follows: Path 1: Adding AAD as an identity provider to an OCS tenant without Advanced Integration. Advanced Integration can be added later. Path 2: Adding AAD as an identity provider to an OCS tenant with Advanced Integration at the same time. Path 3: Adding Advanced Integration to an OCS tenant which is already configured with AAD as an identity provider. Consent Path 1: Adding an AAD Identity Provider to your OCS Tenant with Basic-Level Integration Only In order to add your AAD tenant as an identity provider for your OCS tenant, your AAD administrator must agree to only one consent. This consent grants permission for your AAD tenant to be an identity provider for your OCS tenant (basic-level integration). For a new tenant, an email will be sent to your AAD administrator who has the privileges with a link to grant OCS access to your AAD. Your AAD administrator will click on the link provided in the email which will bring them to a login page. Your administrator will need to log in as a user with the Global Administrator role on your AAD. Upon successful login, your administrator will be prompted to grant consent for a single application: OCS Identity. Your administrator should click Accept in the Permissions requested prompt window to grant consent. OSIsoft will get a confirmation that the consent process has been completed. A final email will be sent to the initial user who either signed up for the account (if this is a new account being provisioned), or who requested that AAD be added as an identity provider (if AAD is being added to an existing account), informing them that the consent has been granted. At that point, this initial user will be able to use the link provided to activate his profile and sign in to your OCS account (if this is a new account being provisioned), and other users can now be added using credentials from AAD. Consent Path 2: Adding an AAD Identity Provider to your OCS Tenant with Advanced Integration at the Same Time In order to integrate your AAD tenant with OCS using Advanced Integration, your AAD administrator must agree to two separate consents. These two consents are to grant the following: Consent 1: Granting permission for your AAD tenant to be an identity provider for your OCS tenant (basic-level integration) Consent 2: Granting permission for OCS Identity to sign in and read all users\u0027 full profiles and all group memberships. (Advanced Integration). Note that this is a two-step consent process. You must first grant consent for basic-level integration. If you do not wish to use Advanced Integration, you can skip the second consent. However, in order to use Advanced Integration, the second consent must be granted. An email will be sent to your AAD administrator who has the privileges with a link to grant OCS access to your AAD. This email contains two links: the first link to consent to AAD as an identity provider for OCS, and the second link to consent to Advanced Integration. For a new tenant being provisioned with both AAD and Advanced Integration, no users will be able to sign in to the account until both consents are given. Your AAD administrator will click on the first link provided in the email which will bring them to a login page. Your administrator will need to log in as a user with the Global Administrator role on your AAD. Upon successful login, your administrator will be prompted to grant consent for a single application: OCS Identity. Your administrator should click Accept in the Permissions requested prompt window to grant consent. OSIsoft will get a confirmation that the consent process has been completed. Your AAD administrator will then click on the second link in the original email to grant permission for OCS Identity to sign in and read all users\u0027 full profiles and all group memberships. Your administrator should agree to the advanced integration by clicking the consent button. A final email will be sent to the initial user who signed up for the account, informing them that they can sign in with their AAD account. At that point, this initial user will be able to use the link provided to activate his profile and sign in to your OCS account. Consent Path 3: Adding Advanced Integration to an existing OCS Tenant configured with AAD as an identity provider In order to enable Advanced Integration on an OCS tenant that is already provisioned with AAD, your AAD administrator must agree to a single consent granting permission for OCS Identity to sign in and read all users\u0027 full profiles and all group memberships. Your AAD administrator will then click on the second link in the original email to grant permission for OCS Identity to sign in and read all users\u0027 full profiles and all group memberships. Your administrator should agree to the advanced integration by clicking the consent button. A final email will be sent to the initial user who signed up for the account, informing them that they can sign in with their AAD account. At that point, this initial user will be able to use the link provided to activate his profile and sign in to your OCS account. Note that until this consent for Advanced Integration has been granted, the AAD identity provider will be in a partially-consented state. In this partially-consented state, pre-existing users can still access the account, and new users can also still be added for the AAD identity provider, but without the features of Advanced Integration (by search). An email will be sent to your AAD administrator who has the privileges to grant OCS access to your AAD. This email contains two links: the first link to consent to AAD as an identity provider for OCS, and the second link to consent to Advanced Integration. For a new tenant being provisioned with both AAD and Advanced Integration, no users will be able to sign in to the account until both consents are given. Your AAD administrator will click on the first link provided in the email which will bring them to a login page. Your administrator will need to log in as a user with the Global Administrator role on your AAD. Upon successful login, your administrator will be prompted to grant consent for a single application: OCS Identity. Your administrator should click Accept in the Permissions requested prompt window to grant consent. OSIsoft will get a confirmation that the consent process has been completed. Your AAD administrator will then click on the second link in the original email to grant permission for OCS Identity to sign in and read all users\u0027 full profiles and all group memberships. Your administrator should agree to the advanced integration by clicking the consent button. A final email will be sent to the initial user who either signed up for the account (if this is a new account being provisioned), or who requested that AAD be added as an identity provider (if AAD is being added to an existing account), informing them that the consent has been granted. At that point, this initial user will be able to use the link provided to activate his profile and sign in to your OCS account (if this is a new account being provisioned), and other users can now be added using credentials from AAD."
                                             },
    "Content_Portal/Concepts/credential-management.html":  {
                                                               "href":  "Content_Portal/Concepts/credential-management.html",
                                                               "title":  "Introduction to credential management",
                                                               "keywords":  "Introduction to credential management User credentials and authentication User authentication and credential management is delegated to the external identity providers. Recommended use of client secrets Client secrets, which are unique keys generated for each client credential client to connect to OSIsoft assets, resources, and services for a limited period of time, are generated by OCS. Each client can have a maximum of 10 Secrets at any given time. OSIsoft suggests following a secret rotation pattern. Secrets have a description and expiration date. OSIsoft strongly advises against creating secrets that do not expire. A secret???s description should contain information about the purpose and where the secret is being used. The secret value is created using a cryptographically secure, random number generator and is available only upon creation. OCS does not maintain the actual value of the secret. If a secret were ever lost by the client, it would have to be deleted and a new one created. OSIsoft suggests persisting and accessing the Client Secret to/from to from secure storage for the environment the client application is running in. Some examples are: Azure Key Vault, Windows Credential Manager, Amazon Key Management Service, Google Cloud Key Management, etc. Microsoft provides instructions on how to handle secrets and passwords in applications. You can read more about it here . We suggest referencing security documentation from the programing language or framework you develop your applications on to determine what secret management security features they provide. Another option is to use the hardware security module on the device your application runs on, or one of the cloud key management services that are available. OSIsoft strongly advises against storing Client Secrets in text or transferring them through an insecure channel. Client Ids are valid GUIDs that are randomly generated, or provided by the caller upon creation. A Client Id and Client Secret pair is required to perform an authentication, for clients that have been issued a secret. The Client Id does not need to be protected the same way as a Client Secret. Recommended use of secret rotation OSIsoft advises against extending and re-using Client Secrets that are close to their expiration date. A new secret should be generated before the current secret expiration date and provided to the client. The client should have logic to start using the new secret. The expiring secret should be deleted once it has been replaced with a new secret."
                                                           },
    "Content_Portal/Concepts/Data_Storage_Concepts.html":  {
                                                               "href":  "Content_Portal/Concepts/Data_Storage_Concepts.html",
                                                               "title":  "Introduction to data storage",
                                                               "keywords":  "Introduction to data storage Introduction to Sequential Data Store Sequential Data Store (SDS) is a streaming database optimized for storing sequential data, typically time-series data. It can store any data that is indexed by an ordered sequence. For each namespace that is created, an SDS instance or SDS resources, is created. The services and storage are scoped to a particular region. Data is written into the SDS using REST APIs. Types define your data Types define the data stored by OCS, comparable to types (classes) in programming languages or a table definition in a database. Types contain a list of named properties which specifies their type and optional unit of measure. Each property may be of a primitive type, another type, or an array of types. A property may be designated as an index to the sequential data. The term \"stream type\" is used when additional context is needed. Within the API itself, this type is frequently referred to as SdsType . Streams contain your sequential data Streams are containers for sequential data of some type . Streams are either a collection of ordered events stored in SDS or a series of events (instances of the defined type) indexed by one or more properties. Streams are defined to organize incoming data from a device into OSIsoft Cloud Services (OCS). Metadata is a key-value pair that allows you to add context to your data. Tags are string values that can be used to group streams by category. Streams are scoped within a namespace. Introduction to stream views Different persona in the customer\u0027s organization may be interested in different data contained in the stream. A process engineer and maintenance person rely on different data in the stream to do their job. Types are immutable, that is, once created, you cannot alter the data captured by them. However, stream views provide greater flexibility and allow different persona to view only the subset of the stream they are interested in. Stream views are a custom view or logical overlay over your stream data. They allow you to scope down the data that is viewed, to change non-intuitive labels to more user-friendly names, and create arbitrary mappings of data within a stream. Stream views can be used to expose stream data as a different type."
                                                           },
    "Content_Portal/Concepts/least-privilege.html":  {
                                                         "href":  "Content_Portal/Concepts/least-privilege.html",
                                                         "title":  "Introduction to least privilege",
                                                         "keywords":  "Introduction to least privilege When creating new users or client credential clients, configure them using the principle of Least Privilege . A user or client should be assigned the lowest privileged role necessary to access resources in OSIsoft resources. Ensure that clients which are not being used are either deleted or disabled by setting the Enabled property to false. To limit the potential consequences of client credential theft, OSIsoft advise against assigning client credentials clients the Administrator role. Any actions that require Administrator privileges should be done through the OCS portal, when possible. One client per application OSIsoft suggests that a client is created in OCS for each instance of a running application. This makes identification easier and decreases the attack surface from a leaked secret. In such an event, only one application needs to be updated."
                                                     },
    "Content_Portal/Concepts/Roles.html":  {
                                               "href":  "Content_Portal/Concepts/Roles.html",
                                               "title":  "Preconfigured roles",
                                               "keywords":  "Preconfigured roles OSIsoft provides two preconfigured roles: Tenant Member Tenant Administrator Tenant Member Tenant Member is assigned to every user and Client Credential Client. Users and Clients issued with this role can generally access information pertaining to themselves. Tenant Administrator This is the highest privilege role, with the ability to create new and remove existing users, clients and secrets. OSIsoft advises against assigning this role to Client Credential Clients."
                                           },
    "Content_Portal/Concepts/Tenant_Management_Concepts.html":  {
                                                                    "href":  "Content_Portal/Concepts/Tenant_Management_Concepts.html",
                                                                    "title":  "Tenant Management Concepts",
                                                                    "keywords":  "Tenant Management Concepts Tenant A tenant is how OSIsoft Cloud Services (OCS) refers to a customer, client, or organization. Before a customer can use OCS, a tenant must be provisioned for them. A customer will have at least one tenant and could have more than one tenant. Each tenant has at least one identity provider associated with it. Tenants also span regions within OCS. For example, OCS currently has services hosted in two regions, West US, and West Europe. If the tenant is authorized to use multiple regions, they can create resources (for example, namespaces) in each region. Namespace A namespace is a logical unit of organization for data within a tenant. Each tenant may contain more than one namespace. Before any data can be put into OCS for a given tenant, a namespace must be created within the scope of that tenant. When a namespace is created, the region where that namespace will reside (for example, West US) needs to be specified. Once the namespace is created and the necessary resources allocated to support it, any data put into the namespace will reside in the selected region. When a namespace is created, a set of OSIsoft Cloud Services (OCS) data processing resources (for example, SDS and Asset service), along with the associated storage resources, are allocated to support that namespace. Each namespace is distinct and separate from other namespaces and, therefore, they isolate the resources contained within it. The resources are scoped to the namespace. Therefore, you can create an SdsType or an SdsStream object with the same name in two different namespaces. Any data stored within a namespace is tied to that namespace, along with the region where the namespace was allocated. OCS does not currently provide a mechanism to directly transfer data from one namespace (or region) to any other namespace (or region). To migrate data between namespaces, and thus between namespaces in different regions, the data must be exported from the source namespace in OCS, then imported into the destination namespace. User Authentication of individuals is performed by the identity provider associated with the tenant. When a user logs in to OCS, they authenticate themselves with an identity provider such as Google or Azure Active Directory. The identity provider authenticates the user against the credentials in its database. Upon successful authentication, it passes a token back to OCS granting the user access. A user???s access to an OCS object is determined by the roles they are assigned and the corresponding Access Control Lists. See Roles for more information. Client Clients are applications and adapters, acting on behalf of users, that allow for programmatic access to the OCS APIs. The following client types are supported in OCS: Client credential clients ?? Used for server-to-server communications without the presence or intervention of a user. Examples include OSIAdapter or Edge Data Store sending data to OCS. The client credentials client is issued a client ID and secret. Once authenticated, it is granted an access token with a defined lifetime. The tokens may either be short-lived access tokens or longer-lived refresh tokens that allow the client to request new access tokens. Authorization code clients ?? Used by web-based applications, native mobile applications, and desktop applications that access OCS, this client type requires user interaction. Users authenticate with the Identity Provider. This client supports silent refresh, which allows the user to automatically receive a new access token, providing for uninterrupted access to the application. Hybrid clients ?? Used by thick client applications, this client requires user interaction. The user authenticates with the Identity Provider. Once the user is authenticated, then the server-side client steps in and server-to-server communication commences. Refresh tokens and access tokens are granted to the server-side client, requiring no further user interaction. Clients are assigned roles that define their access to OCS objects. See Roles for more information. Roles Roles, in combination with Access Control Lists (ACL), determine the level of access to OCS objects. The Tenant Administrator creates roles for the users and clients that will access OCS and assigns the appropriate roles to them. Additionally, the administrator creates an ACL for each OCS object (namespaces, streams, and so on) that defines access permissions for each type of role. Users and clients are granted access permissions to OCS objects based on their assigned roles and the corresponding ACLs. OCS provides two built-in roles: Tenant Member ?? Assigned to every user and client credentials client. Users and clients assigned this role can access objects or information of which they are the owner. Tenant Administrator ?? Role with the highest privileges, the Tenant Administrator can create and delete users, clients, and secrets."
                                                                },
    "Content_Portal/Concepts/token-management.html":  {
                                                          "href":  "Content_Portal/Concepts/token-management.html",
                                                          "title":  "Introduction to token management",
                                                          "keywords":  "Introduction to token management The token that results from a successful authentication process and contains some predefined fields. This is sent as part of the Authorization header with all requests to OSIsoft resources and services. Clients can be configured to generate access tokens with varying expiration between 60 seconds and one hour. The default access token lifespan is one hour. There is no limit on the number of access tokens a client can be issued at any given time. Token management with client credential clients The application must be running in a device/virtual device virtual machine that you either own or have provisioned and must be a secure environment (for example, only authorized persons can access the application and its associated Secrets). A valid access token grants its possessor access to protected resources. As such, they are as critical as passwords and secrets and should be treated the same way. Token management with authorization code clients The application will be running in a browser. The OWASP foundation suggests storing the access token in the browser session Storage container."
                                                      },
    "Content_Portal/Developer_Guides/Developer_Guides.html":  {
                                                                  "href":  "Content_Portal/Developer_Guides/Developer_Guides.html",
                                                                  "title":  "",
                                                                  "keywords":  ""
                                                              },
    "Content_Portal/Documentation/Access_Control.html":  {
                                                             "href":  "Content_Portal/Documentation/Access_Control.html",
                                                             "title":  "Role-based access control",
                                                             "keywords":  "Role-based access control Within OCS, role-based access control to entities such as Namespaces and Streams, is managed using an Access Control List (ACL) and an Owner identity assigned to each entity. ACLs control access to entities based on their OCS Roles. Owners are granted access for all operations regardless of the contents of the ACL. Not all entities in the OCS system support role-based access control at this time, but the list will quickly grow and currently includes Namespaces and several unreleased entities. Access Control Lists Access Control Lists (ACLs) contain sets of Access Control Entries (ACEs), each with a trustee (reference to an identity, such as a role, user, or application), AccessType, and AccessRights. A user or application that attempts to read, write, delete, or manage access control of an entity assigned an ACL must be assigned a trustee that has AccessType set to Allowed for the AccessRight corresponding to that operation. AccessRights are the bitwise union of all of the access rights they encompass. For example, AccessRights 3 indicates that Read and Write access is permitted. Notes If an operation requires more than one access right then an identity can obtain those rights from multiple ACL entries. AccessType.Denied takes precedence over AccessType.Allowed . For example, a role that is assigned AccessType.Denied for AccessRights.All will receive a forbidden for all requests unless they are the owner of the entity. Roles are the only TrusteeType supported for AccessControlList ACEs. At least one role must be given Manage Permission access. TrusteeType TypeId User 1 Application 2 Role 3 AccessType TypeId Allowed 0 Denied 1 CommonAccessRightsEnum AccessRights int bitwise None 0 0000 Read 1 0001 Write 2 0010 Delete 4 0100 ManageAccessControl 8 1000 All 15 1111 AccessControlList The following code sample shows the structure and format for an ACL that gives Role 1 Read Access, Role 2 All access but denies Role 3 ManageAccessControl Access: Body Sample body: HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": 3, \"RoleId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 1 }, { \"Trustee\": { \"Type\": 3, \"RoleId\": \"22222222-2222-2222-2222-222222222222\" }, \"AccessType\": 0, \"AccessRights\": 15 }, { \"Trustee\": { \"Type\": 3, \"RoleId\": \"33333333-3333-3333-3333-333333333333\" }, \"AccessType\": 1, \"AccessRights\": 8 } ], } Owner Owner objects on OCS entities are used to grant access for all operations on the entity regardless of the entity\u0027s AccessControlList\u0027s AccessControlEntries. Note Currently, only Users and Applications are valid owners for entities. Trustee The following code samples shows the format and structure of an owner object: User Owner Body \"Owner\": { \"Type\": 1, \"TenantId\": \"55555555-5555-5555-5555-555555555555\", \"ObjectId\": \"44444444-4444-4444-4444-444444444444\" }, Application Owner Body \"Owner\": { \"Type\": 2, \"TenantId\": \"55555555-5555-5555-5555-555555555555\", \"ApplicationId\": \"66666666-6666-6666-6666-666666666666\" },"
                                                         },
    "Content_Portal/Documentation/Asset Rules/asset-rules.html":  {
                                                                      "href":  "Content_Portal/Documentation/Asset Rules/asset-rules.html",
                                                                      "title":  "Asset Rules",
                                                                      "keywords":  "Asset Rules Asset rules create assets based on stream properties (such as ID, Name, Description, and stream metadata). Asset rules are executed on streams in the following ways: On-demand execution ??? an asset rule is defined and created and it is applied to all existing applicable streams Unattended execution ??? all asset rules are run whenever a stream is created, updated, or deleted. The asset rules API allows you to programmatically create, read, update, and delete asset rules. Example Asset Rule { \"Id\":\"sampleID\", \"Name\":\"sampleName\", \"Description\":\"sampleDescription\", \"AutomationId\":\"sampleAutomationID\", \"Expressions\":[ { \"Field\":\"Id\", \"Specifications\":[ { \"Type\":\"Group\", \"Name\":\"streamId\" } ] }, { \"Field\":\"Name\", \"Specifications\":[ { \"Type\":\"Group\", \"Name\":\"location\", \"ValueMappings\":{ \"SL\":\"San leandro\", \"AUS\":\"Austin\" } }, { \"Type\":\"Delimiter\", \"Value\":\".\" }, { \"Type\":\"Literal\", \"Value\":\"test\" } ] } ], \"Outputs\":[ { \"Field\":\"Asset\", \"Value\":{ \"Id\":\"assetId\", \"Name\":\"assetName\", \"Description\":\"this is an asset generated by an asset rule\", \"Metadata\":[ { \"Id\":\"streamId\", \"Name\":\"streamName\", \"Description\":\"this is an asset attribute\", \"SdsTypeCode\":\"18\", \"Value\":\"{location}\" } ], \"References\":[ { \"Id\":\"streamRefName\", \"Description\":\"this is a stream reference\", \"StreamId\":\"{streamId}\" } ] } } ] } Properties Property Name Type Required? Description ID String Required An identifier for the asset rule. Name String Optional Name of the rule. If left empty, the name defaults to the ID. Description String Optional Description of the asset rule. Automation Id String Required Reference to the automation ID object whose permissions are used during rule execution. Expressions Rule Expression List Optional List of expressions that captures values from stream properties. Outputs Rule Output List Required List of potential outputs of rules. For asset rules, this is a list of assets. Rule Expressions Rule expressions are objects used to define how stream properties are parsed to create assets. Rule expressions have the following properties: Fields ??? strings that determine which stream property to look at for specifications Specifications ??? objects that define specifications of a segment in a pattern. Refer to [Specification Types][xref:AssetRules#specification-types] and [Specification Objects][xref:AssetRules#specification-objects] for a description. Specification Types Specification Description Wildcard Any remaining characters or strings in a stream property. There can be only one wildcard type in a specification. Group Collection of characters that include only specified delimiters. Literal A hard-coded string. Only stream properties with a specified literal are captured by a rule. Delimiter A specific string that interacts with groups. A group must specify a delimiter to use. Specification Objects Property Name Type Required? Description Type String Required A specification type. Value String Optional Required only for the iteral and delimiter specification types. Specifies the text and delimiter values. Name String Optional Required only for the group and wildcard specification types. Specifies the name of the extracted group used in the asset output. CharacterType String Optional Required only for the group specification type. Specified whether the specification allows Any, letters, and digits. If not specified, the default is Any. \u003c!-- Are \"Any\", \"letters\", and \"digits\" the actual values they use? Paul: Yes, that is correct. Only the casing is inconsistent with the code since all are capitalized. The enum is at:L https://dev.azure.com/osieng/engineering/_git/ocs-metadata-rules?path=%2Fsrc%2FOSIsoft.Rules.Models%2FCharacterTypeEnum.cs--\u003e https:  dev.azure.com osieng engineering _git ocs-metadata-rules?path=%2Fsrc%2FOSIsoft.Rules.Models%2FCharacterTypeEnum.cs--\u003e CharacterLength Integer Optional Required only for the group specification type. Specifies the length of characters expected to be extracted by the group. If not specified, it defaults to the longest string length of the group. RequiredDelimiters Array Optional Required only for the group specification type. Sequence of required delimiters within a group. If specified, each delimiter within the array must appear in the exact order and number within the group. If not specified, the default value is an empty array. ValueMappings Dictionary Optional Required only for the group and wildcard specification types. A collection of mapped values for each group. If not specified, the default is null. Asset Output Objects Property Name Type Required? Description Field String Required The only supported value is Asset . Value Asset Object Required The definition of the asset that is generated or updated with additional fields when a stream matches the rule criteria. Asset Id is required. All other properties supported in an asset (Name, Description, Metadata, References) are optional. All fields can be specified as a combination of literal values and captured values (for example, Pump{pumpNumber} where {pumpNumber} is defined in a specification). Multiple rules or streams can modify a single asset, with each contributing one or more properties to the rule. During execution, assets are created if they do not exist, and, otherwise, properties are appended to existing assets. JSON Paths JSON paths can be used to retrieve stream metadata and stream type properties. The following are examples of JSON paths. Note: RegEx in JSON path is not supported in the Field specification. Retrieve stream metadata values { \"Field\": \"Metadata[\u0027key\u0027]\", \"Specifications\": [ { \"Type\": \"Group\", \"Name\": \"value\" } ] } Retrieve UoM of the stream property type { \"Field\": \"Type.Properties[?(@.Id == \u0027Value\u0027)].Uom\", \"Specifications\": [ { \"Type\": \"Group\", \"Name\": \"valueUom\" } ] }"
                                                                  },
    "Content_Portal/Documentation/Asset Rules/asset-rules-api/asset-rules-api.html":  {
                                                                                          "href":  "Content_Portal/Documentation/Asset Rules/asset-rules-api/asset-rules-api.html",
                                                                                          "title":  "Asset Rules API",
                                                                                          "keywords":  "Asset Rules API Get Rule Gets the specified rule Request GET api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId} api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Response The response includes a status code and a response body. Response body The requested asset rule. Status Code Body Type Description 200 OK Asset Rule The asset rule with the requested identifier 403 Forbidden Error You are not authorized to retrieve the asset rule. 404 Not Found Error The asset rule with the requested identifier was not found. 500 Internal Server Error Error Internal server error. Example response body { \"Id\": \"id\", \"Name\": \"name\", \"Description\": \"description\", \"AutomationId\": \"automationId\", \"Expressions\": [ { \"Field\": \"Id\", \"Specifications\": [ { \"Type\": \"Group\", \"Name\": \"streamId\" } ] }, ], \"Outputs\": [ { \"Field\": \"Asset\", \"Value\": { \"Id\": \"assetId\", \"Name\": \"assetName\", \"Description\": \"this is an asset generated by an asset rule\", \"Metadata\": [], \"StreamReferences\": [], \"MeasurementMappings\": [] } } ], \"ValueMappings\": {}, \"CreationTime\": \"2020-11-02T04:42:14.2727061\", \"ModifiedTime\": \"2020-11-02T04:42:14.2727061\" } Create Rule Gets or creates a rule with the specified ID. POST api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId} api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Request body A serialized request body Response The response includes a status code and response body. Status Code Body Type Description 200 OK Asset Rule The existing asset rule with the specified identifier. 201 Created Asset Rule The created asset rule with the specified identifier. 400 Bad Request Error Request is not valid. 403 Forbidden Error You are not authorized to retrieve the asset rule. 409 Conflict Error Another asset rule with the specified ID. 500 Internal Server Error Error Internal server error. Create or Update Rule Creates the specified rule. If a rule with the specified rule ID already exists, the rule definition is updated. Request PUT api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId} api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Request body The serialized version of the created or updated asset rule. Response The response includes a status code and a response body. Status Code Body Type Description 200 OK Asset Rule The updated asset rule with the specified identifier. 201 Created Asset Rule The created asset rule with the specified identifier. 400 Bad Request Error Request is not valid. 403 Forbidden Error You are not authorized to retrieve the asset rule. 500 Internal Server Error Error Internal server error. Delete Rule Deletes the specified rule Request DELETE api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId} api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Response The response includes a status code. Status Code Body Type Description 204 No Content null The specified rule was deleted 404 Not Found Error The specified rule was not found. 403 Forbidden Error You are not authorized to delete the asset rule. 500 Internal Server Error Error Internal server error. Execute Rule Executes the specified rule Request POST api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId}/execute api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} execute Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Response The response includes a status code. Status Code Body Type Description 204 No Content null The specified rule was executed 404 Not Found Error The specified rule was not found. 403 Forbidden Error You are not authorized to delete the asset rule. 409 Conflict Error The automation id associated with the rule was invalid. 500 Internal Server Error Error Internal server error. Search Rules Gets all asset rules that the requesting identity has access to Request GET api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules api tenants {tenantId} namespaces {namespaceId} assetrules Parameters tenantID The tenant identifier namespaceId The namespace identifier Response The response includes a status code and response body. Status Code Body Type Description 200 OK Rule List List of rules that the requesting identity has access to. 400 Bad Request Error Invalid query parameters. 403 Forbidden Error You are not authorized to retrieve rules. 500 Internal Server Error Error Internal server error. Get Rule ACL Gets the Access Control List (ACL) of the specified rule. Request GET api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId}/accesscontrol api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} accesscontrol Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Response The response includes a status code and a response body. Status Code Body Type Description 200 OK AccessControlList The Access Control List of the specified rule. 403 Forbidden Error You are not authorized to retrieve the ACL. 404 Not Found Error The specified rule ID was not found. 500 Internal Server Error Error Internal server error. Set Rule ACL Sets the Access Control List (ACL) of the specified rule Request PUT api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId}/accesscontrol api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} accesscontrol Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Request Body { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"sampleObjectId\" }, \"AccessType: 0, \"AccessRights\": 15 } ]} Response The response includes a status code and a response body. Status Code Body Type Description 200 OK AccessControlList The Access Control List of the specified rule. 400 Bad Request Error Specified ACL is invalid. 403 Forbidden Error You are not authorized to set the ACL. 404 Not Found Error The specified rule ID was not found. 500 Internal Server Error Error Internal server error. Get Access Rights Gets a list of the common access rights that the identity, who is making the request, has on the specified rule Request GET api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId}/accessrights api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} accessrights Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Response The response includes a status code and a response body. Status Code Body Type Description 200 OK String List Access rights on the specified rule for the requesting identity. 403 Forbidden Error You are not authorized to get the access rights. 404 Not Found Error The specified rule ID was not found. 500 Internal Server Error Error Internal server error. Get Rule Owner Gets the owner of the specified rule Request GET api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId}/owner api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} owner Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Response The response includes a status code and a response body. Response body Status Code Body Type Description 200 OK Trustee The owner of the specified rule. 403 Forbidden Error You are not authorized to get the rule owner. 404 Not Found Error The specified rule ID was not found. 500 Internal Server Error Error Internal server error. Set Rule Owner Changes the owner of the specified rule Request PUT api/tenants/{tenantId}/namespaces/{namespaceId}/assetrules/{ruleId}/owner api tenants {tenantId} namespaces {namespaceId} assetrules {ruleId} owner Parameters tenantID The tenant identifier namespaceId The namespace identifier ruleId The rule identifier Request body The serialized Access Control List. { \"Type\": 2, \"TenantId\": \"tenantIdGuid\", \"ObjectId\": \"objectIdGuid\" } Response The response includes a status code and a response body. Status Code Body Type Description 200 OK Trustee The new owner of the specified rule. 400 Bad Request Error Specified owner is invalid. 403 Forbidden Error You are not authorized to set the owner of the rule. 404 Not Found Error The specified rule ID was not found. 500 Internal Server Error Error Internal server error."
                                                                                      },
    "Content_Portal/Documentation/Assets/access-control-api.html":  {
                                                                        "href":  "Content_Portal/Documentation/Assets/access-control-api.html",
                                                                        "title":  "Asset and AssetType Access Control API",
                                                                        "keywords":  "Asset and AssetType Access Control API The access control API is used to secure assets by setting their ownership and permissions. For more information about OCS access control, see [Role-based access control][xref:accessControl]. Get Asset or AssetType Access Control List Get the default AccessControlList for the assets collection and asset type collection. Request Assets collections GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Assets api v1-preview Tenants {tenantId} Namespaces {namespaceId} AccessControl Assets Asset types collections GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/AssetTypes api v1-preview Tenants {tenantId} Namespaces {namespaceId} AccessControl AssetTypes Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a body. Status Code Body Type Description 200 OK AccessControlList The default access control list of the assets collection or asset type collection. 403 Forbidden error You are not authorized to view the requested asset or asset type collection\u0027s access control list. Example response body HTTP 200 OK { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessRights\": 3 }, { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"22222222-2222-2222-1111-111111111111\" }, \"AccessRights\": 1 }, { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"33333333-3333-3333-1111-111111111111\" }, \"AccessRights\": 15 } ] } Update Assets or AssetType Access Control List Update the default AccessControlList for the assets or asset type collections Request Assets collections PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Assets api v1-preview Tenants {tenantId} Namespaces {namespaceId} AccessControl Assets Asset types collections PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/AssetTypes api v1-preview Tenants {tenantId} Namespaces {namespaceId} AccessControl AssetTypes Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An AccessControlList Response The response includes a status code and, in some instances, a body. Status Code Body Type Description 204 No Content (empty) Successfully updated the default access control list of the assets collection or asset type collection. 400 Bad Request error The request is not valid. See the response body for details. 403 Forbidden error You are not authorized to update the asset or asset type collection\u0027s default access control list. Get Asset or AssetType Access Control List Get the AssetControlList of the specified asset or asset type. Request Assets GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/AccessControl api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} AccessControl Asset type GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetTypeId}/AccessControl api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetTypeId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string assetTypeId The asset type identifier Response The response includes a status code and a body. Status Code Body Type Description 200 OK AccessControlList The access control list of the requested asset or asset type. 403 Forbidden error You are not authorized to view the access control list of the requested asset or asset type. 404 Not Found error The requested asset or asset type with the specified Id was not found. 500 Internal Server Error error An error occurred while processing the request. See the response body for details. Example request body HTTP 200 OK { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessRights\": 3 }, { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"22222222-2222-2222-1111-111111111111\" } } ] } Update Asset or AssetType Access Control List Update the AccessControlList of the specified asset or asset type. Request Asset PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/AccessControl api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} AccessControl Asset type PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetTypeId}/AccessControl api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetTypeId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string assetTypeId The asset type identifier Request body An AccessControlList Response The response includes a status code and, in some instances, a body. Status Code Body Type Description 204 No Content (empty) Successfully updated the access control list of the specified asset or asset type. 400 Bad Request error The request is not valid. See the response body for details. 403 Forbidden error You are not authorized to update the access control list of the requested asset or asset type. 404 Not Found error The requested asset or asset type with the specified Id was not found. Get Asset or AssetType Access Rights Get the calling user or client\u0027s access rights to the requested asset or asset type. Request Asset GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/AccessRights api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} AccessRights Asset type GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetTypeId}/AccessRights api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetTypeId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string assetTypeId The asset type identifier Response The response includes a status code and a body. Status Code Body Type Description 200 OK string[] A list of access rights to the requested asset or asset type. 403 Forbidden error You are not authorized to make this request. 404 Not Found error The requested asset or asset type with the specified Id was not found. Example response body HTTP 200 OK [ \"Read\", \"Write\", \"Delete\", \"ManageAccessControl\" ] Get Asset or AssetType Owner Get the owner Trustee of the specified asset or asset type. Request Asset GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/owner api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} owner Asset type GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetTypeId}/owner api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetTypeId} owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetTypeId The asset type identifier Response The response includes a status code and a body. Status Code Body Type Description 200 OK Trustee The owner of the requested asset or asset type. 403 Forbidden error You are not authorized to view the owner of the requested asset or asset type. 404 Not Found error The requested asset or asset type with the specified Id was not found. Example response body HTTP 200 OK Content-Type: application/json application json { \"Type\": 1, \"TenantId\": \"55555555-5555-5555-5555-555555555555\", \"ObjectId\": \"44444444-4444-4444-4444-444444444444\" } Update Asset or AssetType Owner Update the owner Trustee of the specified asset or asset type. Request Asset PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/owner api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} owner Asset type PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes/{assetTypeId}/owner api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes {assetTypeId} owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string assetTypeId The AssetType identifier Request body A Trustee Example request body { \"Type\": 2, \"TenantId\": \"55555555-5555-5555-5555-555555555555\", \"ObjectId\": \"44444444-4444-4444-4444-444444444444\" } Response The response includes a status code and, in some instances, a body. Status Code Body Type Description 204 No Content (empty) Successfully updated the asset or asset type owner. 400 Bad Request error The request is not valid. See the response body for details. 403 Forbidden error You are not authorized to update the owner for the requested asset or asset type. 404 Not Found error The requested asset or asset type with the specified Id was not found."
                                                                    },
    "Content_Portal/Documentation/Assets/asset-centric-data-api.html":  {
                                                                            "href":  "Content_Portal/Documentation/Assets/asset-centric-data-api.html",
                                                                            "title":  "Asset Centric Data API",
                                                                            "keywords":  "Asset Centric Data API The asset centric data API provides a quick way to retrieve data stored in an asset\u0027s referenced streams. In order to retrieve stream data from an asset, you must first set up stream references for a given asset. The data that is retrieved is based on the resolved asset. Example Asset The following asset is used in all of the sample output in this topic. { \"Id\": \"Idsample\", \"Name\": \"SampleForDemo\", \"Description\": \"This is a demo asset.\", \"Metadata\": [ { \"Id\": \"b47c9529-7fbf-4b2d-810b-fe79d7fdb2b0\", \"Name\": \"RoomLocation\", \"Description\": \"This is what room number the asset is located.\", \"SdsTypeCode\": 14, \"Value\": 1.0 } ], \"StreamReferences\": [ { \"Id\": \"StreamReferenceId1\", \"Name\": \"StreamReferenceWithEventsName\" \"StreamId\": \"PI_buildingMachine_1112\" } ] } Get Asset Last Data Returns the last stored value for SDS streams in the resolved asset. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/Data/Last?Stream={streams} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Data Last?Stream={streams} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier [optional] string[] streams An optional parameter consisting of a comma-separated list of stream reference names that you are interested in. By default, all data calls return data for all stream references. Response The response includes a status code and a response body. Status Code Body Type Description 200 OK OK Array of last values for all references. 207 Multi-Status partial success Array of last values for references. Look at child errors for those that are unsuccessful. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The specified asset is not found. Example response body HTTP 200 OK Content-Type: application/json application json { \"Results\": { \"StreamReferenceWithEventsName\": [ { \"Timestamp\": \"2019-01-02T01:00:00Z\", \"Temp\": 155.5, \"Pres\": 1 } ], }, \"Errors\": null } Get Asset Sampled Data Returns sampled data for referenced Sds streams. Note: The inputs to this API matches the SDS stream Get samples values data call. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/Data/Sampled?startIndex={startIndex}\u0026endIndex={endIndex}\u0026intervals={intervals}\u0026Stream={streams} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Data Sampled?startIndex={startIndex}\u0026endIndex={endIndex}\u0026intervals={intervals}\u0026Stream={streams} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string startIndex The start index for the intervals string endIndex The end index for the intervals int intervals The number of requested intervals [optional] string[] streams An optional parameter consisting of a comma-separated list of stream reference names that you are interested in. By default, all data calls return data for all stream references. Response The response includes a status code and a response body. Status Code Body Type Description 200 OK OK Array of sampled values for all references. 207 Multi-Status partial success Array of sampled values for references. Look at child errors for those that are unsuccessful. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The specified asset with identifier is not found. HTTP 200 OK Content-Type: application/json application json { \"Results\": { \"StreamReferenceWithEventsName\": [ { \"Timestamp\": \"2019-01-02T00:00:00Z\", \"Temp\": 0.044, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:16:38Z\", \"Temp\": 998.046, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T01:00:00Z\", \"Temp\": 155.5, \"Pres\": 1 } ], }, \"Errors\": null } Get Asset Summary Data Returns summary data for referenced SDS streams. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/Data/Summaries?startIndex={startIndex}\u0026endIndex={endIndex}\u0026count={count}\u0026Stream={streams} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Data Summaries?startIndex={startIndex}\u0026endIndex={endIndex}\u0026count={count}\u0026Stream={streams} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string startIndex The start index for the intervals string endIndex The end index for the intervals int count The number of requested intervals [optional] string[] streams An optional parameter consisting of a comma-separated list of stream reference names that you are interested in. By default, all data calls return data for all stream references. Response The response includes a status code and a response body. Status Code Body Type Description 200 OK OK Array of summary values for all references. 207 Multi-Status partial success Array of summary values for references. Look at child errors for those that are unsuccessful. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The specified asset with identifier is not found. HTTP 200 OK Content-Type: application/json application json { \"Results\": { \"StreamReferenceWithEventsName\": [ { \"Start\": { \"Timestamp\": \"2019-01-01T08:00:00Z\", \"Temp\": 0.044, \"Pres\": 1 }, \"End\": { \"Timestamp\": \"2019-02-06T20:00:00Z\", \"Temp\": 155.5, \"Pres\": 1 }, \"Summaries\": { \"Count\": { \"Timestamp\": 1000, \"Temp\": 1000, \"Pres\": 1000 }, \"Minimum\": { \"Temp\": 0.044, \"Pres\": 1.0 }, \"Maximum\": { \"Temp\": 998.046, \"Pres\": 1.0 }, \"Range\": { \"Temp\": 998.0020000000001, \"Pres\": 0.0 }, \"Total\": { \"Temp\": 498779.61199999356, \"Pres\": 1001.0 }, \"Mean\": { \"Temp\": 498.28133066933077, \"Pres\": 1.0 }, \"StandardDeviation\": { \"Temp\": 288.4561823749973, \"Pres\": 0.0 }, \"PopulationStandardDeviation\": { \"Temp\": 288.31206236481444, \"Pres\": 0.0 }, \"WeightedMean\": { \"Temp\": 153.11692828545156, \"Pres\": 1.0 }, \"WeightedStandardDeviation\": { \"Temp\": 25.424619899757136, \"Pres\": 0.0 }, \"WeightedPopulationStandardDeviation\": { \"Temp\": 25.411917116101474, \"Pres\": 0.0 }, \"Skewness\": { \"Temp\": 0.0011013861675857883, \"Pres\": \"NaN\" }, \"Kurtosis\": { \"Temp\": -1.19976760290962, \"Pres\": \"NaN\" } } }, { \"Start\": { \"Timestamp\": \"2019-03-15T08:00:00Z\", \"Temp\": 155.5, \"Pres\": 1 }, \"End\": { \"Timestamp\": \"2019-04-20T20:00:00Z\", \"Temp\": 155.5, \"Pres\": 1 }, \"Summaries\": { \"Count\": { \"Timestamp\": 0, \"Temp\": 0, \"Pres\": 0 }, \"Minimum\": { \"Temp\": 155.5, \"Pres\": 1.0 }, \"Maximum\": { \"Temp\": 155.5, \"Pres\": 1.0 }, \"Range\": { \"Temp\": 0.0, \"Pres\": 0.0 }, \"Total\": { \"Temp\": 155.5, \"Pres\": 1.0 }, \"Mean\": { \"Temp\": 155.5, \"Pres\": 1.0 }, \"StandardDeviation\": { \"Temp\": \"NaN\", \"Pres\": \"NaN\" }, \"PopulationStandardDeviation\": { \"Temp\": 0.0, \"Pres\": 0.0 }, \"WeightedMean\": { \"Temp\": 155.5, \"Pres\": 1.0 }, \"WeightedStandardDeviation\": { \"Temp\": \"NaN\", \"Pres\": \"NaN\" }, \"WeightedPopulationStandardDeviation\": { \"Temp\": 0.0, \"Pres\": 0.0 }, \"Skewness\": { \"Temp\": \"NaN\", \"Pres\": \"NaN\" }, \"Kurtosis\": { \"Temp\": \"NaN\", \"Pres\": \"NaN\" } } } ], \"Errors\": null } } Get Asset Window Data Returns window data for referenced SDS streams. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/Data?startIndex={startIndex}\u0026endIndex={endIndex}\u0026Stream={streams} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Data?startIndex={startIndex}\u0026endIndex={endIndex}\u0026Stream={streams} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier string startIndex The start index for the intervals string endIndex The end index for the intervals [optional] string[] streams An optional parameter consisting of a comma-separated list of stream reference names that you are interested in. By default, all data calls return data for all stream references. Response The response includes a status code and a response body. Status Code Body Type Description 200 OK OK Array of window values for all references. 207 Multi-Status partial success Array of window values for references. Look at child errors for unsuccessful values. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The specified asset with identifier is not found. HTTP 200 OK Content-Type: application/json application json { \"Results\": { \"StreamReferenceWithEventsName\": [ { \"Timestamp\": \"2019-01-02T00:00:00Z\", \"Temp\": 0.044, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:01Z\", \"Temp\": 1.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:02Z\", \"Temp\": 2.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:03Z\", \"Temp\": 3.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:04Z\", \"Temp\": 4.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:05Z\", \"Temp\": 5.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:06Z\", \"Temp\": 6.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:07Z\", \"Temp\": 7.045, \"Pres\": 1 }, { \"Timestamp\": \"2019-01-02T00:00:08Z\", \"Temp\": 8.045, \"Pres\": 1 }, ], }, \"Errors\": null } *** ## `Get Asset Interpolated Data` Returns interpolated data for referenced SDS streams. ### Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/Data/Interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026count={count}\u0026Stream={streams} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Data Interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026count={count}\u0026Stream={streams} ### Parameters `string tenantId` The tenant identifier `string namespaceId` The namespace identifier `string assetId` The asset identifier `string startIndex` The start index for the intervals `string endIndex` The end index for the intervals `int count` The number of requested intervals [optional] `string[] streams` An optional parameter consisting of a comma-separated list of stream reference names that you are interested in. By default, all data calls return data for all stream references. ### Response The response includes a status code and a response body. | Status Code | Body Type | Description | |--|--|--| | 200 OK | OK | Array of summary values for all references. | | 207 Multi-Status | partial success | Array of summary values for references. Look at child errors for those that are unsuccessful. | | 400 Bad Request | error | The request is not valid. See the response body for additional details. | | 403 Forbidden | error | You are not authorized to view the requested asset. | | 404 Not Found | error | The specified asset with identifier is not found. | ```json HTTP 200 OK Content-Type: application/json application json { \"Results\": { \"StreamReferenceWithEventsName\": [ { \"Timestamp\": \"2019-01-02T00:00:05Z\", \"Temp\": 5.045, \"Pres\": 1 }, { \"Timestamp\": \"2020-04-12T08:00:00Z\", \"Temp\": 3.045, \"Pres\": 11 }, { \"Timestamp\": \"2020-06-29T05:20:00Z\", \"Temp\": 54.045, \"Pres\": 11 }] }, \"Errors\": null }"
                                                                        },
    "Content_Portal/Documentation/Assets/asset-resolved-asset.html":  {
                                                                          "href":  "Content_Portal/Documentation/Assets/asset-resolved-asset.html",
                                                                          "title":  "Resolved Asset",
                                                                          "keywords":  "Resolved Asset The resolved asset describes the consumption-oriented aspects of an OCS resource rather than describing how the resource is configured. The resolved asset corresponds to its metadata and referenced stream which define how the data is interpreted (that is, SdsTypeCode, InterpolationMode, and UOM). Get Resolved Asset Returns the resolved asset. Resolved Asset Metadata Value Rules When an asset references an asset type, the following rules explain how the values are derived for a given Metadata value on the resolved asset. If a Metadata value with the same Id exists on the asset type and asset, the Metadata value properties, Name , UOM , and SdsTypeCode , of the asset type take precedence over the asset properties. If the Metadata value with the same Id exists on the asset type and asset, the Value property on the asset takes precedence (Example 3) if its value is not null. If the Value property on the asset is null, then the Value property of the asset type\u0027s Metadata value is used (Example 2) unless that value is also null. In this instance, the Value property on the resolved asset is zero for metadata whose SdsTypeCode is a numeric type, and it is an empty string for metadata whose SdsTypeCode is string. (Example 1). If the SdsTypeCode on the asset and asset type do not match, then the Value property of the Metadata value on the resolved asset will be coerced to the SdsTypeCode property of the asset type (Examples 7 and 8). If the Metadata value with the same Id exists on the asset and the resolved asset, but the Metadata value does not exist on the asset type, then the asset\u0027s Metadata value appears on the resolved asset (Example 4), unless the asset\u0027s Name property is null. In this instance, the Metadata value does not appear on the resolved asset (Example 5). Examples The examples in the following table illustrate the resolved asset metadata value rules. Example Metadata value on asset type Metadata value on asset Metadata value on resolved asset Details 1 Id =\"md_id\" Name =\" m1 \" Value =null Id =\"md_id\" Name =null Value =null Id =\"md_id\" Name =\" m1 \" Value =See Details For a numeric SdsTypeCode , the value of the Value property for m1 is 0. For a string SdsTypeCode , the value of the Value property for m1 is an empty string. For both, the Metadata value is returned, along with the UOM and SdsTypeCode , for the asset type. 2 Id =\"md_id\" Name =\" m2 \" Value =10 Id =\"md_id\" Name =null Value =null Id =\"md_id\" Name =\" m2 \" Value =10 m2 appears on the resolved asset with Value =10, along with UOM and SdsTypeCode from the asset type. 3 Id =\"md_id\" Name =\" m3 \" Value =10 Id =\"md_id\" Name =null Value =20 Id =\"md_id\" Name =\" m3 \" Value =20 m3 appears on the resolved asset with Value =20, along with UOM and SdsTypeCode from the asset type. The Value property on the asset Metadata value always overrides the Value property on the asset type. 4 Not present Id =\"md_id\" Name =\" m4 \" Value =30 Id =\"md_id\" Name =\" m4 \" Value =30 m4 appears on the resolved asset with value =30, along with UOM and SdsTypeCode from the asset. Because this metadata value does not exist on the asset type, the metadata value on the resolved asset takes the value of the asset. 5 Not present Id =\"md_id\" Name =null Value =30 Not present Because there is no Metadata value with Id = \"md_id\" on the asset type and the name of the Metadata value on the asset is null, then this Metadata value does not appear on the resolved asset. 6 Id =\"md_id\" Name =\" m6 \" Value =10 Id =\"md_id\" Name =\"anotherName\" Value =\"1234\" Id =\"md_id\" Name =\" m6 \" Value =10 The Metadata value Name with Id = \"md_id\" is not null on the asset. Therefore, the resolved asset\u0027s Metadata value takes the asset type\u0027s Metadata value. 7 Id =\"md_id\" Name =\" m7 \" Value =10 Id =\"md_id\" Name =null Value =\"a string value\" Id =\"md_id\" Name =\" m7 \" Value =0 The Metadata value with Id =\"md_id\" has different SdsTypeCode on the asset and asset type. Therefore, the resolved asset\u0027s Metadata value coerces the overloaded Value from the asset to the SdsTypecode on the asset type. It also takes the Metadata value for UOM and SdsTypeCode from the asset type. 8 Id =\"md_id\" Name =\" m9 \" Value =10 Id =\"md_id\" Name =null Value =\"1.23\" Id =\"md_id\" Name =\" m9 \" Value =1 The Metadata value with Id =\"md_id\" has a different SdsTypeCode on the asset and asset type. Therefore, the resolved asset\u0027s Metadata value coerces the overloaded Value from the asset to the SdsTypecode on the asset type. It also takes the Metadata value for UOM and SdsTypeCode from the asset type. Resolved Asset Stream Reference Rules The following example illustrates the resolved asset reference rules. If an asset references an asset type, the the following rules apply for a given reference: Assume that the following is true for the asset and asset type: Id =\"reference1\" is defined for both the asset and the asset type. The asset type has measurement mappings for \"Temperature\" and \"Pressure\". Id =\"reference2\" is defined only on the asset, with one measurement mapping for \"Temperature\". Id =\"reference3\" is defined only on the asset, but its StreamReferenceName is null, with one measurement mapping for \"Pressure\". \u003c!-- Are \"Temperature\" and \"Pressure\" fields like \"Id\" and \"Name.\" If so, then they should be formatted similarly. Is \"reference1\", \"reference2\", etc. the value of \"Id\"? --\u003e In this scenario, the default reference rules resolve as follows: Measurement mappings for \"reference1\" are determined by the asset type. Any measurement mappings for \"reference1\" on the asset are ignored. The \"Temperature\" measurement mapping for \"reference2\" on the asset overrides the \"Temperature\" measurement mappings from \"reference1\". Any measurement mappings for \"reference3\" are ignored because Name on the asset is null. Note: StreamReferenceName on the asset type cannot be null. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/Resolved api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Resolved Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Response The response includes a status code and a response body. Status Code Body Type Description 200 OK Resolved Asset The resolved asset 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The asset with the specified identifier is not found. Example response body HTTP 200 OK Content-Type: application/json application json { \"Id\": \"AssetTest\", \"Name\": \"AssetName\", \"Metadata\": [ { \"Id\": \"metadataId_101\", \"Name\": \"DateTimeAttr\", \"SdsTypeCode\": 16, \"Value\": \"0001-01-01T00:00:00Z\" } ], \"Stream\": [ { \"Name\": \"Temperature\", \"Properties\": [ { \"Id\": \"Timestamp\", \"IsKey\": true, \"Uom\": null, \"Order\": 0, \"InterpolationMode\": \"Continuous\", \"ExtrapolationMode\": \"All\", \"SdsType\": { \"SdsTypeCode\": \"DateTime\", \"Properties\": null }, \"Source\": { \"StreamId\": \"SourceSdsStreamId\", \"PropertyId\": \"Timestamp\" } }, { \"Id\": \"Temp\", \"IsKey\": false, \"Uom\": null, \"Order\": 0, \"InterpolationMode\": \"Continuous\", \"ExtrapolationMode\": \"All\", \"SdsType\": { \"SdsTypeCode\": \"Double\", \"Properties\": null }, \"Source\": { \"StreamId\": \"SourceSdsStreamId\", \"PropertyId\": \"Temp\" } }, ] }, ], \"UnresolvedStreams\": [ { \"Name\": \"OutputFlow\", \"Reason\": \"SDS Stream \u0027PI_Outflow\u0027 not found\" } ] } Get Resolved Asset (Bulk) Request POST api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Assets/Resolved api v1-preview Tenants {tenantId} Namespaces {namespaceId} Bulk Assets Resolved Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body A list of asset Id s. Example request body Requesting resolved assets for assets with the following Id s: \"Asset1\", \"Asset2\", and \"Asset3\". [ \"Asset1\", \"Asset2\", \"Asset3\" ] Response The response includes a list of resolved assets, a status code and a response body. Status Code Body Type Description 200 OK Resolved Asset List The resolved assets 207 Multi-status Resolved Asset List and Error List The resolved assets and errors for assets which could not be resolved. 400 Bad Request error The request is not valid. See the response body for additional details."
                                                                      },
    "Content_Portal/Documentation/Assets/assets.html":  {
                                                            "href":  "Content_Portal/Documentation/Assets/assets.html",
                                                            "title":  "Assets",
                                                            "keywords":  "Assets The asset API allows you to programmatically model your on-premises assets in OSIsoft Cloud Services (OCS). A single stream with its metadata can be used to model very simple assets. However, in most instances, an asset relates to dynamic data from several streams and to static information that describe the asset. This is better structured as an asset instead of any single stream. The assets feature is well suited to model these aspects of an asset. It allows users to create an asset, add static metadata, and reference streams in a standard, structured way. The asset API includes search capabilities and features to directly retrieve the values of dynamic data associated with a given asset. It also provides methods to configure determining the asset status and to configure different user views of an asset. Asset types In many instances, you will have multiple assets of the same type. In this situation, an asset type can be used to create multiple similar assets. A change to the asset type is reflected in all assets that are derived from the asset type. Asset and asset type properties Property Type Required? Searchable? Description Asset Property? Asset Type Property? Id String Required Yes Id for referencing this asset. If you do not provide an Id , OCS copies the name as the identifier Id . If you do not provide a name, OCS assigns a random GUID for the Id . Yes Yes Name String Required only if Id is not specified Yes User-friendly name. Required if Id is not provided. If Name is used as the Id , it must be unique within a given namespace. Yes Yes Description String Optional Yes User-provided description. Yes Yes AssetTypeId String Optional No Id for the asset type that this asset is derived from. To get the merged view of the asset, get the resolved asset through the /Assets/{assetId}/Resolved  Assets {assetId} Resolved route. Yes No Metadata Metadata List Optional Yes Asset and asset type metadata Yes Yes StreamReferences Stream Reference List Optional No Asset stream references Yes No TypeReferences Type Reference List Optional No Asset type type references No Yes StatusMapping Status Mapping Optional No Asset and asset type status mapping Yes Yes For more information on search syntax, see Assets Search API . Asset and asset type metadata properties An asset or asset type metadata is static information associated with a given asset. A given metadata contains a list of individual metadata values. \u003c!-- I wonder if it\u0027s correct to call this a list? \"A given metadata contains any number of metadata values.\" --\u003e There is no limit on the number of metadata values defined by an asset. An asset or asset type metadata does not stand alone. It must be specified within an asset or asset type object and, therefore, there are no direct API routes to asset or asset type metadata. Property Type Required? Description Id String Required* Id for the metadata value. Name String Required User-friendly name for the metadata value. If not null, must be unique within an asset or asset type. Description String Optional User-provided description SdsTypeCode Int Required This integer corresponds to the SdsTypeCode. Asset metadata support the following integer values: 11 (Int64), 14 (Double), 16 (DateTime), and 18 (String). Uom String Optional Asset metadata unit of measurement. Select from the list of supported Uom types. Value String Optional String representation of the metadata. * Id is not required on property if the Name matches a Name on the Asset Type metadata. In this case, the Id of the metadata on the Asset will be set as the metadata Id of the Asset Type. This also applies when an Asset is updated. Asset stream reference properties An asset stream reference represents dynamic stream data associated with an asset. The references must either be an SDS stream or an SDS stream view. Asset-centric data routes provide direct access to dynamic data for a given asset. There are no limitations on the number of references an asset may contain. However, an asset cannot contain multiple references to the same SDS stream. An asset stream reference does not stand alone. It must be specified within an asset object and, therefore, asset references do not have direct API routes. Property Type Required? Searchable? Description Id String Required* No Id for this stream reference object. This Id must be unique within the asset. Name String Required No User-friendly name for the stream reference object. If not null, must be unique within an asset. Description String Optional No Description text. StreamId String Required No The SDS stream Id of this stream reference. This SDS stream must exist at the time the asset is created. * Id is not required on property if the Name matches a Name on the Asset Type type reference. In this case, the Id of the stream reference on the Asset will be set as the type reference Id of the Asset Type. This also applies when an Asset is updated. Asset type type reference properties An asset type type reference represents dynamic stream data associated with an asset. The references must either be an SDS stream or an SDS stream view. Asset-centric data routes provide direct access to dynamic data for a given asset. There are no limitations on the number of references an asset may contain. However, an asset cannot contain multiple references to the same SDS stream. An asset reference does not stand alone. It must be specified within an asset object and, therefore, asset references do not have direct API routes. Property Type Required? Searchable? Description StreamReferenceId String Required No The Id for this type reference. If an asset is derived from this asset type, this Id must be referenced in the asset reference type object. This Id must be unique within the asset type. StreamReferenceName String Required No The user friendly name for this type reference. If not null, must be unique within an asset type. Description String Optional No Description text TypeId String Required No This string must be an SDS stream type Id in the referenced SDS stream. Asset and asset type status mapping properties For information about asset and asset type status mapping, please refer to Asset Status for more details. The following is an example of an asset derived from an asset type. Asset type example Content-Type: application/json application json { \"Id\": \"ChargingStationType\", \"Description\": \"Charging Station Type\", \"Metadata\": [{ \"Id\":\"d7368dc2-58f0-4669-8e6e-44ac2cc3f47c\", \"Name\": \"Location\", \"SdsTypeCode\": 18, \"Value\": null \"Uom\": null }], \"TypeReferences\": [{ \"StreamReferenceId\": \"Reference1\", \"StreamReferenceName\": \"ReferenceName\", \"TypeId\": \"PI-Float32\" }] } Asset example { \"Id\": \"ChargingStation1\", \"Name\": \" ChargingStation1\", \"Description\": \"Charging Station Instance\", \"AssetTypeId\": \"ChargingStationType\", \"Metadata\": [{ \"Id\": \"d7368dc2-58f0-4669-8e6e-44ac2cc3f47c\", \"Name\": null, \"Value\": \"Houston\", \"SdsTypeCode\": 18, }], \"StreamReferences\": [ { \"Id\": \"Reference1\", \"Name\": \"ReferenceName\", \"StreamId\": \"PI_StreamReference_1010\" }], \"Status\": { \"Name\": \"ChargingStationStatus\", \"StreamReferenceId\": \"Reference1\", \"StreamPropertyId\": \"Value\", \"ValueStatusMappings\": [ { \"Value\": 0, \"Status\": 0, \"DisplayName\": \"Bad\" } { \"Value\": 1, \"Status\": 1, \"DisplayName\": \"Good\" } ] } }"
                                                        },
    "Content_Portal/Documentation/Assets/assets-api.html":  {
                                                                "href":  "Content_Portal/Documentation/Assets/assets-api.html",
                                                                "title":  "Assets API",
                                                                "keywords":  "Assets API The Assets API allows you to create, read, update, and delete assets. The asset feature supports the HTTP entity tag (ETag) and If-Match for conditional requests. When a GET call is performed, the HTTP response header includes an Etag which indicates what version of the asset resource will be retrieved. See Asset and AssetType Access Control API , Asset Centric Data API , and Assets Search API for additional API details. Example Etag Response Header This is version 7 of this particular asset. Etag: \"7\" To edit or delete the asset, specify If-Match in the HTTP request header when calling DELETE or PUT . Example If-Match Response Header Modify or delete only if the current asset matches version 7. Otherwise, do not perform this operation. If this condition fails, return a 412. If-Match : \"7\" Note: If-Match is optional. If you want to delete or modify an asset regardless of the asset version, do not specify an If-Match. Get Asset by Id Returns the specified asset and the version Etag in the HTTP response header. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Response The response includes a status code and a response body. Status Code Body Type Description 200 OK Asset The requested asset. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The asset with the specified identifier is not found. Example response body HTTP 200 OK Content-Type: application/json application json { \"Id\": \"Heater_01_01_02\", \"Name\": \"HeaterOnFirstFloor\", \"Description\": \"This is Asset which represents a heater on the first floor.\", \"Metadata\": [ { \"Id\": \"17020d80-1dc8-4690-932f-3421c9cff0d1\", \"Name\": \"ModelNumber\", \"Description\": \"This is attribute with double value representing the model number.\", \"SdsTypeCode\": 14, \"Value\": 1.3 } ], \"StreamReferences\": [ { \"Id\": \"63c0ba1d-f2db-4b28-b650-7e45afca9ab4\", \"Name\": \"Data\", \"Description\": \"This is reference to a stream. The stream has data coming from a heater.\", \"StreamId\": \"PI_bifrostbigdaddy_1\" } ] } Get Assets Returns an array of assets and the total number of assets returned, specified as Total-Count in the HTTP response header. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets?skip={skip}\u0026count={count} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets?skip={skip}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier [optional] int skip An optional parameter representing the zero-based offset of the first asset to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter, between 1 and 1000 (inclusive), that represents the maximum number of retrieved assets. If not specified, the default is 100. Response The response includes a status code and a body. Status Code Body Type Description 200 OK Asset[] A page of assets. A response header, Total-Count , indicates the total size of the collection. 204 No Content none No assets were found or you do not have permission to view assets. 400 Bad Request error The request is not valid. See the response body for additional details. 503 Service Unavailable error An error occurred while processing the request. See the response body for additional details. Create Asset Create a new asset with a specified Id . If the asset you are trying to create references an asset type (through the AssetTypeId property) and if the corresponding asset type has a metadata value with the same Id , then the name and SDS type code of the metadata value on the asset must be null. If the asset type does not have metadata value with a corresponding Id , the name and SDS type code on the asset cannot be null. Request POST api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Request body An asset object Example request body NOTE: To create an asset with a specific Id , use the API route with Id . If this is used, you must specify a matching Id field for the asset object in the JSON object below. { \"Name\": \"HeaterOnFirstFloor\", \"Description\": \"This is Asset which represents a heater on the first floor.\", \"Metadata\": [ { \"Id\": \"c0e29698-d157-4288-9dea-db290de1fb35\", \"Name\": \"ModelNumber\", \"Description\": \"This is attribute with double value representing the model number.\", \"SdsTypeCode\": 14, \"Value\": 1.3 } ], \"StreamReferences\": [ { \"Id\": \"a1b1c2cc-0a1d-4d89-b53e-e7db746bb4d2\", \"Name\": \"Data\", \"Description\": \"This is reference to a stream. The stream has data coming from a heater.\", \"StreamId\": \"heaterData_1\" } ] } Response The response includes a status code, a body, and the Etag version in the HTTP response header. Status Code Body Type Description 200 OK Asset The asset as persisted, including values for optional parameters that were omitted in the request. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to create assets. 409 Conflict error The asset create has a conflict. See the response body for additional details. Create Assets (Bulk create) Create multiple assets in a single call. Request POST api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An array of asset objects Response The response includes a status code and a body. Status Code Body Type Description 200 OK Asset[] An array of assets as persisted, including values for optional parameters that were omitted in the request. 207 Multi-Status partial success Array of errors. Assets that did not encounter errors are created. 400 Bad Request error The request is not valid. The response includes which asset failed validation checks. See the response body for additional details. 403 Forbidden error You are not authorized to create assets. 409 Conflict error The asset create has a conflict. See the response body for additional details. Create or Update Asset Create or update an asset with a specified Id . If the asset already exists, you can specify an If-Match property in the HTTP request header to ensure that the asset is modified only if its version matches. Request PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Request body The newly created or updated asset object. Asset Type Concordance If an asset type Id is specified for an asset, then the following is true: The stream references name of an asset is set to null if the stream reference Id matches the stream reference Id of the asset type. If the asset and asset type have a metadata value with the same Id , then the name property on the asset is set to null. Response The response includes a status code, body, and Etag version in the HTTP response header. Status Code Body Type Description 200 OK Asset The newly created or updated asset as persisted, including values for optional parameters that were omitted in the request. 400 Bad Request error The request is not valid. The response includes which asset failed validation checks. See the response body for additional details. 403 Forbidden error You are not authorized to update assets. 404 Not Found error The asset, with the specified identifier, was not found. 409 Conflict error The asset update or create has a conflict. See the response body for additional details. 412 Pre-Condition Failed error The asset failed to update because the If-Match condition failed. Delete Asset Delete an asset with a specified Id . You can include an If-Match property in the HTTP request header to specify the asset version. The asset is deleted only if the version matches. Request DELETE api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Request body None Response The response includes a status code and a body. Status Code Body Type Description 204 No Content none The asset with the specified Id is deleted. 400 Bad Request error The request is not valid. The response includes which asset failed validation checks. See the response body for additional details. 403 Forbidden error You are not authorized to delete this asset. 404 Not Found error The asset with the specified Id could not be found. 412 Pre-Condition Failed error The asset failed to update because the If-Match condition failed. Delete Asset (bulk) Delete all assets with the specified Ids. Use this API to delete up to a maximum of 1000 assets in one API call. Request DELETE api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/bulk/assets/delete api v1-preview Tenants {tenantId} Namespaces {namespaceId} bulk assets delete Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body A list of asset Id s. Response The response includes a status code and a body. Status Code Body Type Description 204 No Content none The assets with the specified Id s are deleted. 207 Multi-Status partial success Array of errors. Assets that did not encounter errors are deleted. 209 Conflict error See response body for additional details. 400 Bad Request error The request is not valid. See the response body for additional details."
                                                            },
    "Content_Portal/Documentation/Assets/asset-search-api.html":  {
                                                                      "href":  "Content_Portal/Documentation/Assets/asset-search-api.html",
                                                                      "title":  "Assets Search API",
                                                                      "keywords":  "Assets Search API The assets search API allows you to search for your assets with search criteria. Get Assets by Search Criteria Returns an array of assets that meet the search criteria. Searchable Properties Assets can be searched on the following asset properties: Asset Top-level Fields Id, Name, Description, AssetTypeId, AssetTypeName Metadata Fields Name, Description. Value Stream Reference Fields StreamReferences - Stream Reference Name StreamProperties - Sds Stream Property Ids, not including indices Search criteria can be chained together using an AND . See examples below. Search Assets Searches and returns assets matching the search criteria. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets?skip={skip}\u0026count={count}\u0026orderby={orderby}\u0026query={queryString} api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets?skip={skip}\u0026count={count}\u0026orderby={orderby}\u0026query={queryString} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string queryString The asset query string. Search strings are not case-sensitive. [optional] int skip An optional parameter representing the zero-based offset of the first asset to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter, between 1 and 1000 (inclusive), that represents the maximum number of assets to retrieve. If not specified, the default is 100. [optional] [id|name] [asc|desc|] orderby An optional parameter which returns assets ordered either by the asset Id or the asset name . Specify asc or desc to return the results in ascending or descending order. If not specified, the default is ascending order. Response Returns an array of assets matching the search query and the total number of assets returned specified as Total-Count in the HTTP response header. Status Code Body Type Description 200 OK Asset list A list of assets matching the search criteria. An empty array is returned if there are no matching assets. 204 OK empty No assets match your search criteria. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. Search Matched Fields Asset Searches all assets and returns a list of asset Ids and their matched fields. Use this API to identify the fields in the asset that match your query string. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/search/Assets?skip={skip}\u0026count={count}\u0026orderby={orderby}\u0026query={queryString} api v1-preview Tenants {tenantId} Namespaces {namespaceId} search Assets?skip={skip}\u0026count={count}\u0026orderby={orderby}\u0026query={queryString} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string queryString The asset query string. Search strings are not case-sensitive. [optional] int skip An optional parameter representing the zero-based offset of the first asset to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter, between 1 and 1000 (inclusive), representing the maximum number of retrieved assets. If not specified, the default is 100. [optional] [id|name] [asc|desc|] orderby An optional parameter which returns assets ordered either by the asset Id or the asset name . Specify asc or desc to return the results in ascending or descending order. If not specified, the default is ascending order. ` Response A list of asset Ids and their matched fields. Status Code Body Type Description 200 OK Asset list A list of assets matching the search criteria. An empty array is returned if there are no matching assets. 204 OK empty No assets match your search criteria. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. Example response body Below is a response when query string is \"Name: Tracer \". Count represents the number of matched assets in the given query. Also returned is a list of Results . Each result contains The MatchProperties - a list of matched property objects. Each MatchProperties object contains the matched fields and their values. Score - number that indicates the relevancy of the match. Id - Id of the matched asset. TypeId - asset type Id of the asset. This is null if the asset does not reference an asset type. Name - asset name. Description - asset description. HTTP 200 OK Content-Type: application/json application json { \"Count\": 2, \"Results\": [ { \"MatchedProperties\": [ { \"Field\": \"Name\", \"Value\": \"Asset Tracer ced7ee16-984d-480f-8338-3055f7f39d8b\" } ], \"Score\": 1, \"Id\": \"AssetId2b5f41ae-0929-4977-bfbd-1e046d8a66f4\", \"TypeId\": \"AssetTracerType\", \"Name\": \"Asset Tracer ced7ee16-984d-480f-8338-3055f7f39d8b\", \"Description\": \"First tracer device\" }, { \"MatchedProperties\": [ { \"Field\": \"Name\", \"Value\": \"Asset Tracer d6b984dd-b6da-4225-a2e0-59f781d065a4\" } ], \"Score\": 1, \"Id\": \"AssetId3dbfd185-7c62-49ed-b875-7953cba07fc3\", \"TypeId\": \"AssetTracerType\", \"Name\": \"Asset Tracer d6b984dd-b6da-4225-a2e0-59f781d065a4\", \"Description\": \"Another tracer device\" } ] } Examples of asset query strings Query String Description Id:Id1 Returns the asset with Id equal to Id1 . Id:Id1 Name desc Returns the asset with Id equal to Id1 return results in descending order by Name. Id:Id* Returns all assets with Id matching id * wildcard. Name:Name1 Returns all asset with a friendly name equal to Name1 . Id:Id AND Name:Name1 Returns all assets with Id matching the id and with a friendly name equal to Name1 . Description:floor1* Returns all assets with a description that starts with floor1 . Metadata/Name:Building* Metadata Name:Building* Returns all assets with at least one metadata name whose description contains the string Building . Metadata/Description:heater* Metadata Description:heater* Returns all assets with at least one metadata whose description starts with heater . Metadata/Value:123 Metadata Value:123 Returns all assets with at least one metadata whose Value property equals 123 . Id:X* AND Metadata/Name:B* Metadata Name:B* Returns all assets with Id starting with X and containing at least one metadata value with a name that starts with a B . AssetTypeId:HeaterTypeId Returns all assets with AssetTypeId matching HeaterTypeId AssetTypeName:HeaterTypeName Returns all assets whose Name field of the asset type matches HeaterTypeName StreamProperties:Pressure Returns all assets that have one or more stream references with the stream property ID Pressure . Note: This search only searches non-key Sds stream properties. StreamReferences:Name1 Returns all assets whose stream references contain a stream reference name that matches Name1 . Special characters in search queries Add the backslash escape character ( \\ ) before any special characters in search queries. The following special characters require an escape character: \" | /   * \\ ( ) : The following are examples of using the escape character in query strings. Example Field Value Query String Austin\\Dallas\\Fort Worth Austin\\\\Dallas\\\\Fort Worth 1:100 1\\:100"
                                                                  },
    "Content_Portal/Documentation/Assets/asset-status.html":  {
                                                                  "href":  "Content_Portal/Documentation/Assets/asset-status.html",
                                                                  "title":  "Asset and Asset Type Status",
                                                                  "keywords":  "Asset and Asset Type Status Status is a property of an asset or asset type that defines the simple status of an asset or asset type. There is one status property for each asset or asset type. If an asset references an existing asset type and the asset type has a corresponding type reference, then the status mapping on the asset is ignored. Create, read, update, and delete of an asset status mapping is done through the asset or asset type itself. Status mapping properties table The following table lists the most common fields in a status mapping. Property Type Required? Searchable? Description Name String Optional No Name and Id for this status mapping. StreamReferenceId String Required No Id for the asset\u0027s StreamReference property. The stream reference must exist before the status mapping can be created. StreamPropertyId String Required No SDS stream property that status uses for calculations. It must be present on the StreamId property on the asset StreamReference. The SDS stream property must be a numeric enumeration, character, or string type. ValueStatusMappings List Required No The value status mapping maps values to a given status. See Value status mapping properties table \u003c!-- Look at StreamPropertyID again. --\u003e Value status mapping properties table The following table lists the most common fields in a value status mapping. A single value status mapping corresponds to a single status. If you want additional statuses in your asset status mapping, add additional elements in the ValueStatusMapping list. Property Type Required? Searchable? Description Value Object Required No Value of the value status mapping. The values in a status mapping should be unique. Status Status Enumeration Required No Description of the value status mapping. DisplayName String Optional No Display name for this value status mapping. Status enumerations The following are valid status enumerations: Unknown = 0 Good = 1 Warning = 2 Bad = 3 Example status mapping The following is an example of a status property which is on the asset or asset type. \"Status\": { \"Name\": \"ChargingStationStatus\", \"StreamReferenceId\": \"Reference1\", \"StreamPropertyId\": \"Value\", \"ValueStatusMappings\": [ { \"Value\": 0, \"Status\": 0, \"DisplayName\": \"Bad\" } { \"Value\": 1, \"Status\": 1, \"DisplayName\": \"Good\" } ] } The asset or asset type\u0027s \u0027StreamReferences\u0027 field has an \u0027Id\u0027 property. To assign a status mapping to an asset or asset type, the value assigned to the Id property must match the StreamReferenceId of the status mapping object. Using the status mapping example above, AssetStreamReferenceId1 is assigned to the asset in the following example. { \"Id\": \"ChargingStationAsset\", \"AssetTypeId\": null, \"Metadata\": [{ \"Name\": \"Location\", \"Value\": \"Houston\", \"SdsTypeCode\": 18, \"Uom\": null??? }], \"StreamReferences\": [{ \"Id\": \"AssetStreamReferenceId1\", \"StreamId\": \"pi2ocs_stream1_inputpower\", }] } Get Asset Status View the status of an asset. The status of an asset is determined by an exact match of the Sds stream property value to the value of the ValueStatusMapping. If there are no exact matches, the status is a 0 (Unknown). Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Assets/{assetId}/status/last api v1-preview Tenants {tenantId} Namespaces {namespaceId} Assets {assetId} status last Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Response The response includes a status code and a response body. Status Code Body Type Description 200 OK Asset status On successful GET, asset status is returned. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset. 404 Not Found error The specified asset with identifier is not found. 422 Invalid State error See the response body for details. Example response body HTTP 200 OK Content-Type: application/json application json { \"AssetId\": \"TemperatureSensorAsset\", \"Status\": 1, \"Value\": \"85\", \"DisplayName\": \"TemperatureSensorBuild1InF\", \"DataRetrievalTime\": \"2020-05-04T16:55:26.3732693Z\" } Bulk Asset Status View the status of multiple assets. Request POST api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/bulk/assets/status/last api v1-preview Tenants {tenantId} Namespaces {namespaceId} bulk assets status last Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetId The asset identifier Example POST body Lists the asset Id s whose status you are interested in. Content-Type: application/json application json [ \"AssetId-1\", \"AssetId-2\", \"AssetId-3\" ] Response The response includes a status code and a response body. Status Code Body Type Description 200 OK Asset status list On successful POST, returns the status of multiple assets. 207 Multi Status Multi Status On POST, returns the status of multiple assets. For error responses, check the multi-status response for the error and cause. Example response body HTTP 200 OK Content-Type: application/json application json { [ { \"AssetId\": \"AssetId-1\", \"Status\": 1, \"Value\": \"85\", \"DisplayName\": \"TemperatureSensorBuild1InF\", \"DataRetrievalTime\": \"2020-05-04T16:55:26.3732693Z\" }, { \"AssetId\": \"AssetId-2\", \"Status\": 2, \"Value\": \"185\", \"DisplayName\": \"DeviceMeasurement\", \"DataRetrievalTime\": \"2020-05-04T16:55:26.3732693Z\" }, { \"AssetId\": \"AssetId-3\", \"Status\": 1, \"Value\": \"75\", \"DisplayName\": \"TemperatureSensorBuild5450InF\", \"DataRetrievalTime\": \"2020-05-04T16:55:26.3732693Z\" } ] }"
                                                              },
    "Content_Portal/Documentation/Assets/asset-type.html":  {
                                                                "href":  "Content_Portal/Documentation/Assets/asset-type.html",
                                                                "title":  "Asset Types API",
                                                                "keywords":  "Asset Types API The asset type API provides methods to create, read, update, and delete asset types. An asset type can be used to build many similar assets. Some of the key benefits of using an asset type as the base model for assets are: Multiple similar assets can be created more quickly and with less effort. Maintaining assets is simplified. Get AssetType by Id Returns the specified asset type. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes/{assetTypeId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes {assetTypeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetTypeId The asset type identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AssetType The requested asset type. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to view the requested asset type. 404 Not Found error The specified asset type with identifier is not found. Example response body HTTP 200 OK Content-Type: application/json application json { \"Id\": \"HeaterType\", \"Name\": \"NameOfHeaterType\", \"Description\": \"This is the AssetType which represents a common heater device.\", \"Metadata\": [ { \"Id\": \"MetadataId1\", \"Name\": \"ModelNumber\", \"Description\": \"This metadata indicates the model number of a given Asset.\", \"SdsTypeCode\": 14, } ], \"TypeReferences\": [ { \"Id\": \"TypeReferenceId1\", \"Name\": \"TemperatureData\", \"TypeId\": \"PI-Float32\" } ] } Get AssetTypes Returns a list of asset types and the total number of returned asset types, specified as Total-Count in the HTTP response header. Request GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes?skip={skip}\u0026count={count} api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes?skip={skip}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier [Optional] int skip Maximum number of asset types to retrieve. If unspecified, the default (100) is used. [Optional] int count An optional parameter, between 1 and 1000 (inclusive), that represents the maximum number of retrieved assets. If not specified, the default is 100. Response The response includes a status code and a body. Status Code Response Type Description 200 OK AssetType[] A page of asset types. A response header, Total-Count , indicates the total size of the collection. 204 No Content none No asset types found or the user does not have permissions to view the asset types. 400 Bad Request error The request is not valid. See the response body for additional details. 503 Service Unavailable error An error occurred while processing the request. See the response body for additional details. Create AssetType Create a new asset type with a specified Id . Request POST api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes/{assetTypeId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes {assetTypeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetTypeId The asset type identifier Request body An AssetType object Example request body To create an asset type with a specific Id , use the API route with Id . If this is used, you must specify a matching Id field for the AssetType object in the JSON object below. { \"Id\": \"HeaterType\", \"Name\": \"NameOfHeaterType\", \"Description\": \"This is the AssetType which represents a common heater device.\", \"Metadata\": [ { \"Id\": \"MetadataId1\", \"Name\": \"ModelNumber\", \"Description\": \"This metadata indicates the model number of a given Asset.\", \"SdsTypeCode\": 14 } ], \"TypeReferences\": [ { \"Id\": \"TypeReferenceId1\", \"Name\": \"TemperatureData\", \"TypeId\": \"PI-Float32\" } ] } Response The response includes a status code and a body. Status Code Response Type Description 200 OK AssetType The AssetType as persisted, including values for optional parameters that were omitted in the request. 400 Bad Request error The request is not valid. See the response body for additional details. 403 Forbidden error You are not authorized to create an AssetType object. 409 Conflict error The AssetType update (?) or create has a conflict. See the response body for additional details. Create AssetTypes (Bulk create) Create a new AssetTypes object Request POST api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body A list of AssetType objects Response The response includes a status code and a body. Status Code Response Type Description 200 OK AssetTypes A list of AssetType objects, as persisted, including values for optional parameters that were omitted in the request. 400 Bad Request error The request is not valid. The response will include which AssetType objects fail validation checks. See the response body for additional details. 403 Forbidden error You are not authorized to create AssetType objects. 409 Conflict error The asset type update or create has a conflict. See the response body for additional details. Create or Update AssetType Create or update an asset type with a specified Id . When updating an asset type which is referenced by assets, the following behaviors may apply: Deleting a metadata value on the asset type removes the metadata value on the resolved asset of referenced asset???s. Renaming a metadata value on the asset type renames the metadata value on the resolved asset of referenced assets???. Renaming the stream reference name on the asset type will rename the stream reference on resolved asset of referenced assets. Request PUT api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes/{assetTypeId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes {assetTypeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetTypeId The asset type identifier Request body The newly created or updated AssetType object. Response The response includes a status code and a body. Status Code Response Type Description 200 OK AssetType The newly created or updated AssetType object, as persisted, including values for optional parameters that were omitted in the request. 403 Forbidden error You are not authorized to update this AssetType object. 404 Not Found error The specified asset type with identifier is not found. 409 Conflict error The asset type update or create has a conflict. See the response body for additional details. Delete AssetType Delete an asset type with a specified Id . Note: An AssetType object cannot be deleted if it is referenced by an asset. To delete an AssetType object, you must first delete all assets that are mapped to it. Request DELETE api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/AssetTypes/{assetTypeId} api v1-preview Tenants {tenantId} Namespaces {namespaceId} AssetTypes {assetTypeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string assetTypeId The asset type identifier Request body None Response The response includes a status code and a body. Status Code Response Type Description 200 No Content none The AssetType object with the specified Id has been deleted. 400 Bad Request error The request is not valid. The response will include which items fail validation checks. See the response body for additional details. 403 Forbidden error You are not authorized to delete this asset type. 404 Not Found error The specified asset type object with identifier is not found. 409 Conflict error See the response body for additional details. This error typically occurs because assets are mapped to this asset type."
                                                            },
    "Content_Portal/Documentation/DataIngress/Data_Ingress.html":  {
                                                                       "href":  "Content_Portal/Documentation/DataIngress/Data_Ingress.html",
                                                                       "title":  "Data collection and OSIsoft Message Format",
                                                                       "keywords":  "Data collection and OSIsoft Message Format You use OSIsoft Message Format (OMF) to achieve high-throughput asynchronous data collection into the Sequential Data Store. The following terms are useful for understanding the information in this and subsequent sections: A producer of OMF messages needs a client identity to authenticate and send messages. OMF topics aggregate OMF messages received from one or more clients and makes them available for consumption by a subscription . An OMF subscription consumes OMF messages from a topic and forwards them to a data store. Multiple subscriptions can retrieve OMF messages from a single topic ."
                                                                   },
    "Content_Portal/Documentation/DataIngress/OMF_Ingress_Specification.html":  {
                                                                                    "href":  "Content_Portal/Documentation/DataIngress/OMF_Ingress_Specification.html",
                                                                                    "title":  "Use OSIsoft Message Format with OSIsoft Cloud Services",
                                                                                    "keywords":  "Use OSIsoft Message Format with OSIsoft Cloud Services The OSIsoft Message Format (OMF) specification is generic in that it does not specify a particular back-end system. This topic is a companion to the OMF specification which describes how OMF is interpreted by OSIsoft Cloud Services back-end system. Headers For a description of each of the headers, see OMF specification . Note that rather than using a producertoken , data collection calls to OCS require a bearer token to be attached in the header, as documented in the OCS Quick Start documentation. The bearer token is used to authenticate the sender and to authorize the sender for use with a particular tenant. The client ID associated with this token is used to route messages to a particular topic that it is mapped to. The omfversion header must match the version of the OMF spec used to construct the message. Versions 1.0 and 1.1 of the spec are currently supported. Message types OMF message types fall into three categories: type , container , and data , which are described below. Type messages A type message is interpreted by OSIsoft Cloud Services as an SdsType in the Sequential Data Store. Because SdsTypes are immutable, update operations are not supported. The keywords in the Type definition are interpreted as follows: id : Corresponds to the SdsType Id field. It must conform to the rules defined for a typeId specified here: Types classification : Only the dynamic classification is currently supported. version : Versioning of SdsTypes is not supported. name : Corresponds to the SdsType Name field. This is the friendly name for the type. description : Corresponds to the SdsType Description field. tags : Currently unsupported. metadata : Currently unsupported. The isindex keyword corresponds to the isKey attribute of an SdsTypeProperty. SdsTypes support clustered indexes which can be specified with multiple properties marked with the isindex keyword with a value of true . For compound indexes, the index property order within the message corresponds to the Order field of an SdsTypeProperty. The isname keyword is not supported. Link type Link types are not supported in Sequential Data Store and will be ignored. \u003c!--deleting per Chris feedback ### Span type Span types are not supported in Sequential Data Store. --\u003e Property types and formats OMF supports setting the format keyword to specify how a particular JSON type should be interpreted. The following is a mapping for the Sequential Data Store supported types (see types ): Type Format SdsTypeCode array IEnumerable boolean boolean integer int64 Int64 integer int32 Int32 integer int16 Int16 integer uint64 Uint64 integer uint32 Uint32 number uint16 Uint16 number float64 Double number float32 Single number float16 Single object dictionary Idictionary string String string date-time DateTime Container messages A container message is interpreted as an SdsStream in the Sequential Data Store. The keywords in the container definition are interpreted as follows: id : Corresponds to the SdsStream Id field. It must conform to the rules defined for an SdsStream Id specified here: Streams . typeid : Corresponds to the SdsStream TypeId field. typeversion : Versioning of SdsTypes is not supported. name : Corresponds to the SdsStream Name field. This is a friendly name for the stream. description : Corresponds to the SdsStream Description field. tags : Corresponds to the SdsStream Tag field. metadata : Corresponds to the SdsStream Metadata field. Data messages A data message is mapped to generic Sds values in the Sequential Data Store. The keywords in the data definitions are interpreted as follows: typeid : Data that is not grouped by containerId is not supported. containerid : Stream Id for the associated Sds Stream. typeversion : Not supported. values : An array of the generic Sds values."
                                                                                },
    "Content_Portal/Documentation/DataIngress/OMF_Ingress_Subscriptions.html":  {
                                                                                    "href":  "Content_Portal/Documentation/DataIngress/OMF_Ingress_Subscriptions.html",
                                                                                    "title":  "Subscriptions",
                                                                                    "keywords":  "Subscriptions A subscription consumes OMF messages from a Topic and forwards them to a data store. Multiple subscriptions can retrieve OMF messages from a single topic . Subscription information A subscription can consume OMF messages from a topic in a different namespace ; however, the topic\u0027s namespace must be in the same region as the subscription\u0027s namespace. OMF messages that the subscription is processing are temporarily stored in the region of its namespace. The API calls in this section are used to create and manipulate subscriptions. OMF subscription An OMF Subscription retrieves OMF messages from a topic and writes them directly to a namespace in the Sequential Data Store. Currently only OMF subscriptions are supported. The documentation uses OMF subscription and subscription interchangeably. Data models Subscription information is contained in an object called subscription which has the following format: Property Type Details Id string Unique Id generated by the API during creation. Name string A friendly name for the Subscription. TopicId string Unique Id for the Topic we are subscribing to. TopicTenantId string Identifies the owner of the Topic. TopicNamespaceId string Identifies the namespace for the Topic TenantId string Identifies the owner of the Subscription. NamespaceId string Identifies the namespace for the Subscription. Description string Description of the Subscription. Type integer An enumeration which describes the type of Subscription where Sds=1 CreatedDate DateTime Date and time this Subscription was created. Enabled boolean Whether the Topic exists or not. Get Tenant Subscriptions Get all subscriptions for a tenant. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions api v1 tenants {tenantId} namespaces {namespaceId} subscriptions Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Response An array of subscription objects. Get Subscription Get a specific subscription. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId} api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace subscriptionId Unique Id for the Subscription. Response A subscription object Get Subscriptions Access Control List Get the default Access Control List for new subscriptions. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/accesscontrol/subscriptions api v1 tenants {tenantId} namespaces {namespaceId} accesscontrol subscriptions Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Response An AccessControlList object. Get Subscriptions Access Rights Get the default Access Rights of the requesting identity for any newly created Subscriptions. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/accessrights/subscriptions api v1 tenants {tenantId} namespaces {namespaceId} accessrights subscriptions Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace. Response An array of Access Rights strings. Get Subscription Access Control List` Get the Access Control List for a particular Subscription. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId}/accesscontrol api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} accesscontrol Parameters tenantId Unique Id for the tenant. namespaceId Unique Id for the namespace. subscriptionId Unique Id for the Subscription. Response An AccessControlList object. Get Subscription Access Rights Get the Access Rights of the requesting identity for a particular Subscription. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId}/accessrights api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} accessrights Parameters tenantId Unique Id for the tenant. namespaceId Unique Id for the namespace. subscriptionId Unique Id for the Subscription. Response An array of Access Rights strings. Get Subscription Owner Get the owner for a particular subscription. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId}/owner api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} owner Parameters tenantId Unique Id for the tenant. namespaceId Unique Id for the namespace. subscriptionId Unique Id for the Subscription. Response A trustee object. Create Subscription Create a new subscription. Request POST api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions api v1 tenants {tenantId} namespaces {namespaceId} subscriptions Parameters tenantId Unique Id for the tenant. namespaceId Unique Id for the namespace. Body A Subscription object. The Id property should not be specified, since it will be automatically generated during creation. Response The subscription object that was created. Update subscription Update an existing subscription. Only the name and description may be updated. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId} api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace. subscriptionId Subscription Id for the Subscription to be updated. Body A subscription object. The Id property should match the subscriptionId in the route. Response The subscription object that was updated. Update Subscriptions Access Control List Update the default Access Control List for new subscriptions. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/accesscontrol/subscriptions api v1 tenants {tenantId} namespaces {namespaceId} accesscontrol subscriptions Parameters tenantId Unique Id for the tenant. namespaceId Unique Id for the namespace. Body An AccessControlList object. Update Subscription Access Control List Update the Access Control List for a particular subscription. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId}/accesscontrol api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} accesscontrol Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace subscriptionId Unique Id for the Subscription Body An AccessControlList object. Update Subscription Owner Update the owner for a particular subscription. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId}/owner api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} owner Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace subscriptionId Unique Id for the Subscription Body A Trustee object. Delete Subscription Delete a subscription. Request DELETE api/v1/tenants/{tenantId}/namespaces/{namespaceId}/subscriptions/{subscriptionId} api v1 tenants {tenantId} namespaces {namespaceId} subscriptions {subscriptionId} Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace subscriptionId Unique Id for the Subscription"
                                                                                },
    "Content_Portal/Documentation/DataIngress/OMF_Ingress_to_OCS.html":  {
                                                                             "href":  "Content_Portal/Documentation/DataIngress/OMF_Ingress_to_OCS.html",
                                                                             "title":  "Data collection using OMF",
                                                                             "keywords":  "Data collection using OMF You can use OSIsoft Message Format ( OMF ) to achieve high-throughput asynchronous data collection into the Sequential Data Store. The following terms are useful for understanding the information in this and subsequent sections: A producer of OMF messages needs a client identity to authenticate and send messages. OMF topics aggregate OMF messages received from one or more clients and makes them available for consumption by a subscription . An OMF subscription consumes OMF messages from a topic and forwards them to a data store. Multiple subscriptions can retrieve OMF messages from a single topic ."
                                                                         },
    "Content_Portal/Documentation/DataIngress/OMF_Ingress_Topics.html":  {
                                                                             "href":  "Content_Portal/Documentation/DataIngress/OMF_Ingress_Topics.html",
                                                                             "title":  "Topics",
                                                                             "keywords":  "Topics OMF topics aggregate OMF messages received from one or more clients and makes them available for consumption by a subscription. Topic information A topic must contain at least one Client Id. Clients may be added to or removed from an existing topic. A given client may belong to multiple topics in separate namespaces. When you create a topic, OMF messages sent from the topic\u0027s associated clients are routed to a queue where they can be consumed by a subscription. This queue makes OMF messages available to subscriptions for up to seven days. While the OMF messages are in the topic queue, they are not available for retrieval via an API. They must first be consumed by a subscription and forwarded to a data store. The topic queue stores the OMF messages in the region of its namespace. The API calls in this section are used to create and manipulate topics. Data models Topic information is contained in an object called Topic and has the following format: Property Type Details Id string Unique Id generated by the API during creation. Name string A friendly name for the Topic. ClientIds string array An array of Client Ids mapped to the Topic. Description string Description of the Topic. CreatedDate DateTime Date and time this Topic was created. Get Tenant Topics Get all topics for a tenant. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics api v1 tenants {tenantId} namespaces {namespaceId} topics Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Response An array of Topic objects. Get Topic Get a specific topic. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId} api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic Response A Topic object Get Topic Subscriptions Get all subscriptions across all namespaces mapped to a topic. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId}/subscriptions api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} subscriptions Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace of the Topic topicId Unique Id for the Topic Response An array of subscription objects. Get Topics Access Control List Get the default Access Control List for new topics. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/accesscontrol/topics api v1 tenants {tenantId} namespaces {namespaceId} accesscontrol topics Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Response An AccessControlList object Get Topics Access Rights Get the default Access Rights of the requesting identity for any newly created topics. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/accessrights/topics api v1 tenants {tenantId} namespaces {namespaceId} accessrights topics Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Response An array of Access Rights strings Get Topic Access Control List Get the Access Control List for a particular topic. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId}/accesscontrol api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} accesscontrol Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic Response An AccessControlList object Get Topic Access Rights Get the Access Rights of the requesting identity for a particular Topic. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId}/accessrights api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} accessrights Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic Response An array of Access Rights strings Get Topic Owner Get the Owner for a particular Topic. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId}/owner api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} owner Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic Response A Trustee object Create Topic Create a new topic. Request POST api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics api v1 tenants {tenantId} namespaces {namespaceId} topics Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Body A topic object. The Id property should not be specified, since it will be automatically generated during creation. Response The topic object that was created Update Topic Update an existing topic. Only the name and description can be updated. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId} api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Topic Id for the Topic to be updated Body A topic object. The Id property should match the topicId in the route. Response The Topic object that was updated. Update Topics Access Control List Update the default Access Control List for new topics. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/accesscontrol/topics api v1 tenants {tenantId} namespaces {namespaceId} accesscontrol topics Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace Body An AccessControlList object Update Topic Access Control List Update the Access Control List for a particular topic. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId}/accesscontrol api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} accesscontrol Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic Body An AccessControlList object Update Topic Owner Update the Owner for a particular topic. Request PUT api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId}/owner api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} owner Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic Body A Trustee object. Delete Topic Delete a topic. Request DELETE api/v1/tenants/{tenantId}/namespaces/{namespaceId}/topics/{topicId} api v1 tenants {tenantId} namespaces {namespaceId} topics {topicId} Parameters tenantId Unique Id for the tenant namespaceId Unique Id for the namespace topicId Unique Id for the Topic"
                                                                         },
    "Content_Portal/Documentation/DataViews/Data_Views_Overview.html":  {
                                                                            "href":  "Content_Portal/Documentation/DataViews/Data_Views_Overview.html",
                                                                            "title":  "Data Views",
                                                                            "keywords":  "Data Views Data views are subsets of data from one or more OCS sources, such as streams and assets, which can serve as a bridge between raw OCS data and data-driven applications. A data view is a declarative query and shape for OCS data. It is composed of an index field, a set of queries, sets of data field definitions, grouping instructions, and default data range and interval. A data view contains the following: Index field - Specifies the primary index type and label of the index. The index must be a timestamp and will be the first column of the data view Query ??? Part of the definition of a data view which determines what data items are available for a data view. Queries can be made against streams or assets. A data view can have multiple queries Data field set ??? Collections of fields originating from the same query Data view shape ??? A portion of a data view definition that determines if the data should be returned in the standard grouped row format or a narrow view which is a pivot of the standard table The ability to create data views in OCS will mesh directly with OSIsoft\u0027s Data Science Enablement efforts, whereby users will be able to programmatically access data view content via an API for the purposes of advanced analytics. The ultimate goal is to deliver shaped data that is ready for consumption because it is normalized, aligned, and interpolated. Understanding how the data view resolves into content is important both for the designer and the consumer. Data views provide extensive visibility into what data is included. The concept of \"resolving\" a data view is when the data view\u0027s queries and logic are executed to determine the data view\u0027s exact schema and content. The collection(s) of OCS resources (such as streams and assets) on which a data view is based is the result of one or more queries. Streams, assets and other OCS resources are collectively known as data items . Values from the data items\u0027 properties can be included in the data view as fields , as well as information about the data items (such as Id and Metadata). There are two primary means of controlling how the data items will be organized. One or more fields may be designated to group the data view, effectively grouping or partitioning the data items on some value. Within a set of fields, one field may be designated to identify or align the items. Data view data is available in several formats, including JSON and CSV, with a user-specified range and granularity. Data is obtained by querying the REST API. Defining and refining a data view There are several concepts and types used when defining data views. This is accomplished via the RESTful data views API . See the OCS documentation for greater detail on these concepts: Define queries Define data field sets Group data items Data view shape Data views are meant to be designed interactively. Each modification you make to a data view is likely to affect how the data view resolves into concrete information. The resolved API resources close the loop, showing you exactly what information is in the data view, and why. Each data view can be individually access-controlled using the access control API resources . Consuming a data view Data view data is available via queries to the RESTful data views data API resource . To understand the source of each data field, inspect how the data view resolved ."
                                                                        },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Access_Control_API.html":  {
                                                                                                "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Access_Control_API.html",
                                                                                                "title":  "Access control API",
                                                                                                "keywords":  "Access control API This portion of the overall data views API focuses on securing data views by setting their ownership and permissions. Get Data Views Access Control List Get the default AccessControlList for the DataViews collection. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/DataViews api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl DataViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a body. Status code Body Type Description 200 OK AccessControlList The default access control list of the data views collection 403 Forbidden error You are not authorized to view the requested data view collection\u0027s access control list 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": Role, \"RoleId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": Allowed, \"AccessRights\": 1 }, { \"Trustee\": { \"Type\": Role, \"RoleId\": \"22222222-2222-2222-2222-222222222222\" }, \"AccessType\": Allowed, \"AccessRights\": 15 }, { \"Trustee\": { \"Type\": User, \"RoleId\": \"33333333-3333-3333-3333-333333333333\" }, \"AccessType\": Denied, \"AccessRights\": 8 } ] } .NET client libraries method Task\u003cAccessControlList\u003e GetAccessControlListAsync(); Update Data Views Access Control List Update the default AccessControlList for the DataViews collection. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/DataViews api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl DataViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An AccessControlList Example request body { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": Role, \"RoleId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": Allowed, \"AccessRights\": 1 }, { \"Trustee\": { \"Type\": Role, \"RoleId\": \"22222222-2222-2222-2222-222222222222\" }, \"AccessType\": Allowed, \"AccessRights\": 15 }, { \"Trustee\": { \"Type\": User, \"RoleId\": \"33333333-3333-3333-3333-333333333333\" }, \"AccessType\": Denied, \"AccessRights\": 8 } ] } Response The response includes a status code and, in some cases, a body. Status code Body Type Description 204 No Content (empty) Successfully updated the default access control list of the data views collection 400 Bad Request error The request is not valid. See the response body for details 403 Forbidden error You are not authorized to update the data views collection\u0027s default access control list 500 Internal Server Error error An error occurred while processing the request. See the response body for details .NET client libraries method Task UpdateAccessControlListAsync(AccessControlList acl); Get Data Views Access Rights Get access rights to the data views collection for the calling user or client. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessRights/DataViews api v1 Tenants {tenantId} Namespaces {namespaceId} AccessRights DataViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a body. Status code Body Type Description 200 OK string[] A list of access rights to the data views collection 403 Forbidden error You are not authorized to view the requested data view collection\u0027s access control list 500 Internal Server Error error An error occurred while processing the request. See the response body for details. Example response body HTTP 200 OK [ \"Read\", \"Write\", \"Delete\", \"ManageAccessControl\" ] .NET client libraries method Task\u003cstring[]\u003e GetAccessRightsAsync(); Get Data View Access Control List Get the AccessControlList of the specified data view. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Response The response includes a status code and a body. Status code Body Type Description 200 OK AccessControlList The access control list of the requested data view 403 Forbidden error You are not authorized to view the requested data view\u0027s access control list 404 Not Found error The requested data view was not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": Role, \"RoleId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": Allowed, \"AccessRights\": 1 }, { \"Trustee\": { \"Type\": Role, \"RoleId\": \"22222222-2222-2222-2222-222222222222\" }, \"AccessType\": Allowed, \"AccessRights\": 15 }, { \"Trustee\": { \"Type\": User, \"RoleId\": \"33333333-3333-3333-3333-333333333333\" }, \"AccessType\": Denied, \"AccessRights\": 8 } ] } .NET client libraries method Task\u003cAccessControlList\u003e GetDataViewAccessControlAsync(string id); Update Data View Access Control List Update the AccessControlList of the specified data view. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request body An AccessControlList Example request body { \"RoleTrusteeAccessControlEntries\": [ { \"Trustee\": { \"Type\": Role, \"RoleId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": Allowed, \"AccessRights\": 1 }, { \"Trustee\": { \"Type\": Role, \"RoleId\": \"22222222-2222-2222-2222-222222222222\" }, \"AccessType\": Allowed, \"AccessRights\": 15 }, { \"Trustee\": { \"Type\": User, \"RoleId\": \"33333333-3333-3333-3333-333333333333\" }, \"AccessType\": Denied, \"AccessRights\": 8 } ] } Response The response includes a status code and, in some cases, a body. Status code Body Type Description 204 No Content (empty) Successfully updated the data view access control list 400 Bad Request error The request is not valid. See the response body for details 403 Forbidden error You are not authorized to update the requested data view\u0027s access control list 404 Not Found error The requested data view was not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details .NET client libraries method Task UpdateDataViewAccessControlAsync(string id, AccessControlList acl); Get Data View Access Rights Get access rights to the requested data view for the calling user or client. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/AccessRights api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Response The response includes a status code and a body. Status code Body Type Description 200 OK string[] A list of access rights to the requested data view 403 Forbidden error You are not authorized to make this request 404 Not Found error The requested data view was not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK [ \"Read\", \"Write\", \"Delete\", \"ManageAccessControl\" ] .NET client libraries method Task\u003cstring[]\u003e GetDataViewAccessRightsAsync(string id); Get Data View Owner Get the owner Trustee of the specified data view. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/owner api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Response The response includes a status code and a body. Status code Body Type Description 200 OK Trustee The owner of the requested data view 403 Forbidden error You are not authorized to view the requested data view\u0027s owner 404 Not Found error The requested data view was not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK Content-Type: application/json application json { \"Type\": User, \"TenantId\": \"55555555-5555-5555-5555-555555555555\", \"ObjectId\": \"44444444-4444-4444-4444-444444444444\" } .NET client libraries method Task\u003cTrustee\u003e GetDataViewOwnerAsync(string id); Update Data View Owner Update the owner Trustee of the specified data view. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/owner api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request body A Trustee Example request body { \"Type\": User, \"TenantId\": \"55555555-5555-5555-5555-555555555555\", \"ObjectId\": \"44444444-4444-4444-4444-444444444444\" } Response The response includes a status code and, in some cases, a body. Status code Body Type Description 204 No Content (empty) Successfully updated the data view owner 400 Bad Request error The request is not valid. See the response body for details 403 Forbidden error You are not authorized to update the requested data view\u0027s owner 404 Not Found error The requested data view was not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details .NET client libraries method Task UpdateDataViewOwnerAsync(string id, Trustee owner);"
                                                                                            },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Data_API.html":  {
                                                                                      "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Data_API.html",
                                                                                      "title":  "Data API",
                                                                                      "keywords":  "Data API The Data API allows users to retrieve data for a specified data view. This API is one portion of the data views API . Get Data View Data Get data for the provided index parameters with paging. See documentation on paging for further information. Request GET /api/v1/tenants/{tenantId}/namespaces/{namespaceId}/dataviews/{dataViewId}/data/interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026interval={interval}\u0026form={form}\u0026continuationToken={continuationToken}\u0026cache={cache}\u0026count={count}  api v1 tenants {tenantId} namespaces {namespaceId} dataviews {dataViewId} data interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026interval={interval}\u0026form={form}\u0026continuationToken={continuationToken}\u0026cache={cache}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier [optional] string startIndex The requested start index, inclusive. The default value is the .DefaultStartIndex of the data view. Optional if a default value is specified. [optional] string endIndex The requested end index, inclusive. The default value is the .DefaultEndIndex of the data view. Optional if a default value is specified. [optional] string interval The requested interval between index values. The default value is the .DefaultInterval of the data view. Optional if a default is specified. [optional] string form The requested data output format . Output formats: default , table , tableh , csv , csvh . [optional] string continuationToken Used only when paging . Not specified when requesting the first page of data. [optional] string cache Controls when the data view backing resources are to be refreshed. Used only when requesting the first page of data. Ignored if used with the continuationToken. Values are: Value Description Refresh Force the resource to re-resolve. This is the default value for this API route. Preserve Use cached information, if available. [optional] int count The requested page size. The maximum is 250,000. If the parameter is not provided, an optimal page size will be calculated . Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK data in the requested format Successfully retrieved data. 400 Bad Request error The request could not be understood by the server due to malformed syntax. 403 Forbidden error User is not authorized for this operation. 404 Not Found error The specified data view identifier is not found. 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Link Hyperlinks to the first page and next page of data as applicable. Absence of the next link indicates that there is no additional data to be retrieved. Example response body in default format An array of json values. Each json property corresponds to a field mapping. Property names are the field mapping .Id s. HTTP 200 OK Content-Type: application/json application json [ { \"Time\": \"2018-01-01T00:00:00Z\", \"Temperature\": 24, \"Flowrate\": 44, \"Volume\": 245 }, { \"Time\": \"2018-01-01T00:00:01Z\", \"Temperature\": 24, \"Flowrate\": 44, \"Volume\": 245 }, { \"Time\": \"2018-01-01T00:00:02Z\", \"Temperature\": 24, \"Flowrate\": 44, \"Volume\": 245 } ] Example response body with form=table HTTP 200 OK Content-Type: application/json application json { \"Columns\": [ { \"Name\": \"Time\", \"Type\": \"DateTime\" }, { \"Name\": \"Temperature\", \"Type\": \"Int32\" }, { \"Name\": \"Flowrate\", \"Type\": \"Int32\" }, { \"Name\": \"Volume\", \"Type\": \"Int32\" } ], \"Rows\": [ [ \"2018-01-01T00:00:00Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:01Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:02Z\", 24, 44, 245 ] ] } Example response body with form=tableh HTTP 200 OK Content-Type: application/json application json { \"Columns\": [ { \"Name\": \"Time\", \"Type\": \"DateTime\" }, { \"Name\": \"Temperature\", \"Type\": \"Int32\" }, { \"Name\": \"Flowrate\", \"Type\": \"Int32\" }, { \"Name\": \"Volume\", \"Type\": \"Int32\" } ], \"Rows\": [ [ \"Time\", \"Temperature\", \"Flowrate\", \"Volume\" ], [ \"2018-01-01T00:00:00Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:01Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:02Z\", 24, 44, 245 ] ] } Example response body with form=csv HTTP 200 OK Content-Type: text/csv text csv 2018-01-01T00:00:00Z,24,44,245 2018-01-01T00:00:01Z,24,44,245 2018-01-01T00:00:02Z,24,44,245 Example response body with form=csvh HTTP 200 OK Content-Type: text/csv text csv Time,Temperature,Flowrate,Volume 2018-01-01T00:00:00Z,24,44,245 2018-01-01T00:00:01Z,24,44,245 2018-01-01T00:00:02Z,24,44,245 .NET client libraries method IAsyncEnumerable\u003cstring\u003e GetDataInterpolatedAsync( string id, OutputFormat format = OutputFormat.Default, object startIndex = null, object endIndex = null, object interval = null, int? backingPageSize = null, CacheBehavior cache = CacheBehavior.Refresh, CancellationToken cancellationToken = default);"
                                                                                  },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Data_View_API.html":  {
                                                                                           "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Data_View_API.html",
                                                                                           "title":  "Data view API",
                                                                                           "keywords":  "Data view API The DataView API provides mechanisms to create, read, update, and delete data views. This is one portion of the whole data views API . For a description of the DataView object type, see the DataView documentation . Other sections of documentation describe how to secure data views by setting their ownership and permissions, and the corresponding API . Get Data View Returns the specified data view. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Response The response includes a status code and a response body. Status code Body Type Description 200 OK DataView The requested data view 403 Forbidden error You are not authorized to view the requested data view 404 Not Found error The specified data view identifier is not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK Content-Type: application/json application json { \"Id\": \"demo\", \"Name\": \"demo\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } .NET client libraries method Task\u003cDataView\u003e GetDataViewAsync(string id); Get Data Views Returns a list of data views. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews?skip={skip}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier [optional] int skip An optional parameter representing the zero-based offset of the first data view to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of data views to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and a body. Status code Body Type Description 200 OK DataView[] A page of data views. A response header, Total-Count , indicates the total size of the collection. 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of data views visible to the current user Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json [ { \"Id\": \"demo view 1\", ... etc. }, { \"Id\": \"demo view 2\", ... etc. } ] .NET client libraries method Task\u003cIEnumerable\u003cDataView\u003e\u003e GetDataViewsAsync(int skip = 0, int count = 100); Create Data View Create a new data view with a system-generated identifier. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body A DataView object whose Id is null or unspecified. Example request body { \"Name\": \"demo\", \"Description\": \"demonstration\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and a body. Status code Body Type Description 201 Created DataView The data view as persisted, including values for optional parameters that were omitted in the request. 400 Bad Request error The request is not valid. See the response body for details 403 Forbidden error You are not authorized to create a data view 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK Content-Type: application/json application json { \"Id\": \"c79630cc-21dc-483e-8b37-46880e92c456\", \"Name\": \"demo\", \"Description\": \"demonstration\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } .NET client libraries method Task\u003cDataView\u003e GetOrCreateDataViewAsync(DataView dataView); Get or Create Data View This call creates the specified data view. If a data view with the same id already exists, the existing data view is compared with the specified data view. If they are identical, a redirect ( 302 Found ) is returned with the Location response header indicating the URL where the data view may be retrieved using a Get function. If the data views do not match, the request fails with 409 Conflict . Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request body A DataView object whose Id matches the dataViewId in the URL. Example request body { \"Id\": \"demo2\", \"Name\": \"demo2\", \"Description\": \"demonstration 2\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 201 Created DataView The data view as persisted, including values for optional parameters that were omitted in the request. 302 Found (empty) The specified data view already exists. A response header, Location , indicates the URL where the data view may be retrieved with the GET verb 400 Bad Request error The request is not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 409 Conflict error The specified data view conflicts with an existing data view that is not identical. To forcibly update the data view, see Create Or Update Data View 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 201 Created Content-Type: application/json application json { \"Id\": \"demo2\", \"Name\": \"demo2\", \"Description\": \"demonstration 2\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } .NET client libraries method Task\u003cDataView\u003e GetOrCreateDataViewAsync(DataView dataView); Create or Update Data View If a data view with the same id already exists, it is updated to the specified value. Otherwise, a new data view is created. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request body A DataView object whose Id matches the dataViewId in the URL. Example request body { \"Id\": \"demo\", \"Name\": \"demo\", \"Description\": \"demonstration\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in some cases, a body. Status code Body Type Description 201 Created DataView The data view as persisted, including values for optional parameters that were omitted in the request 204 No Content (empty) Successfully updated the data view 400 Bad Request error The request is not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 500 Internal Server Error error An error occurred while processing the request. See the response body for details .NET client libraries method Task\u003cDataView\u003e CreateOrUpdateDataViewAsync(DataView dataView); Delete Data View Delete the data view with the specified id. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Response The response includes a status code and, in some cases, a body. Status code Body Type Description 204 No Content (empty) Successfully deleted the data view 403 Forbidden error You are not authorized for this operation 404 Not Found error The specified data view identifier is not found 500 Internal Server Error error An error occurred while processing the request. See the response body for details .NET client libraries method Task DeleteDataViewAsync(string id);"
                                                                                       },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Data_Views_API_Overview.html":  {
                                                                                                     "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Data_Views_API_Overview.html",
                                                                                                     "title":  "Data views API reference",
                                                                                                     "keywords":  "Data views API reference The data views API is a RESTful surface for creating, securing, and consuming data views. The supported content type of request and response bodies is JSON unless otherwise noted. The API is comprised of the following main areas: Data view API Resources to create, read, update, and delete /DataViews  DataViews . For more information, see Data View Resolved data view API For each /DataViews/{dataViewId}  DataViews {dataViewId} , these resources show how the data view ./Resolved/ . Resolved  for your user context. Resolved data view preview API For each /DataView  DataView provided in the request body, resources to show how the data view ./Resolved/ . Resolved  for your user context. This provides the flexibility to change the data view on the fly without saving/updating saving updating it. Data API For each /DataViews/{dataViewId}  DataViews {dataViewId} , resources for getting the ./Data/ . Data  for a particular time range Preview data API For each /DataView  DataView provided in request body, resources for getting the preview ./Data/ . Data  for a particular time range. This provides the flexibility to change the data view on the fly without saving/updating saving updating it. Access control API For the /DataViews  DataViews collection, resources for reading and updating the default /AccessControl  AccessControl . For each /DataViews/{dataViewId}  DataViews {dataViewId} , resources for reading and updating its /Owner  Owner and /AccessControl  AccessControl"
                                                                                                 },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Preview_Data_API.html":  {
                                                                                              "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Preview_Data_API.html",
                                                                                              "title":  "Preview Data API",
                                                                                              "keywords":  "Preview Data API The Preview Data API allows users to retrieve data for a specified data view. This API is one portion of the data views API . Get Data View Data Get data for the provided data view and index parameters with paging. See documentation on paging for further information. Request POST /api/v1/tenants/{tenantId}/namespaces/{namespaceId}/preview/dataviews/data/interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026interval={interval}\u0026form={form}\u0026countPerGroup={countPerGroup}\u0026groupCount={groupCount}\u0026continuationToken={continuationToken}\u0026count={count}  api v1 tenants {tenantId} namespaces {namespaceId} preview dataviews data interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026interval={interval}\u0026form={form}\u0026countPerGroup={countPerGroup}\u0026groupCount={groupCount}\u0026continuationToken={continuationToken}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier [optional] string startIndex The requested start index, inclusive. The default value is the .DefaultStartIndex of the data view. Optional if a default value is specified. [optional] string endIndex The requested end index, inclusive. The default value is the .DefaultEndIndex of the data view. Optional if a default value is specified. [optional] string interval The requested interval between index values. The default value is the .DefaultInterval of the data view. Optional if a default is specified. [optional] int countPerGroup The number of rows per group. It overrides the endIndex. [optional] int groupCount The requested number of groups. [optional] string form The requested data output format . Output formats: default , table , tableh , csv , csvh . [optional] string continuationToken Used only when paging . Not specified when requesting the first page of data. [optional] int count The requested page size. The maximum is 250,000. If the parameter is not provided, an optimal page size will be calculated . Example request body { \"IndexField\": { \"Label\": \"Time\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Flowrate\" ], \"Label\": \"{IdentifyingValue} Flowrate {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Volume\" ], \"Label\": \"{IdentifyingValue} Volume {Uom} {SummaryType}\" }, ], }, ], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK data in the requested format Successfully retrieved data. 400 Bad Request error The data view or the query parameters are not valid. See the response body for details. 403 Forbidden error User is not authorized to create a data view. 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Link Hyperlinks to the first page and next page of data as applicable. Absence of the next link indicates that there is no additional data to be retrieved. Example response body in default format An array of json values. Each json property corresponds to a field mapping. Property names are the field mapping .Id s. HTTP 200 OK Content-Type: application/json application json [ { \"Time\": \"2018-01-01T00:00:00Z\", \"Temperature\": 24, \"Flowrate\": 44, \"Volume\": 245 }, { \"Time\": \"2018-01-01T00:00:01Z\", \"Temperature\": 24, \"Flowrate\": 44, \"Volume\": 245 }, { \"Time\": \"2018-01-01T00:00:02Z\", \"Temperature\": 24, \"Flowrate\": 44, \"Volume\": 245 } ] Example response body with form=table HTTP 200 OK Content-Type: application/json application json { \"Columns\": [ { \"Name\": \"Time\", \"Type\": \"DateTime\" }, { \"Name\": \"Temperature\", \"Type\": \"Int32\" }, { \"Name\": \"Flowrate\", \"Type\": \"Int32\" }, { \"Name\": \"Volume\", \"Type\": \"Int32\" } ], \"Rows\": [ [ \"2018-01-01T00:00:00Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:01Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:02Z\", 24, 44, 245 ] ] } Example response body with form=tableh HTTP 200 OK Content-Type: application/json application json { \"Columns\": [ { \"Name\": \"Time\", \"Type\": \"DateTime\" }, { \"Name\": \"Temperature\", \"Type\": \"Int32\" }, { \"Name\": \"Flowrate\", \"Type\": \"Int32\" }, { \"Name\": \"Volume\", \"Type\": \"Int32\" } ], \"Rows\": [ [ \"Time\", \"Temperature\", \"Flowrate\", \"Volume\" ], [ \"2018-01-01T00:00:00Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:01Z\", 24, 44, 245 ], [ \"2018-01-01T00:00:02Z\", 24, 44, 245 ] ] } Example response body with form=csv HTTP 200 OK Content-Type: text/csv text csv 2018-01-01T00:00:00Z,24,44,245 2018-01-01T00:00:01Z,24,44,245 2018-01-01T00:00:02Z,24,44,245 Example response body with form=csvh HTTP 200 OK Content-Type: text/csv text csv Time,Temperature,Flowrate,Volume 2018-01-01T00:00:00Z,24,44,245 2018-01-01T00:00:01Z,24,44,245 2018-01-01T00:00:02Z,24,44,245 .NET client libraries method IAsyncEnumerable\u003cstring\u003e GetPreviewDataInterpolatedAsync( DataView dataView, OutputFormat format = OutputFormat.Default, object startIndex = null, object endIndex = null, object interval = null, int? countPerGroup = null, int? groupCount = null, int? backingPageSize = null, CacheBehavior cache = CacheBehavior.Refresh, CancellationToken cancellationToken = default);"
                                                                                          },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Resolved_Data_View_API.html":  {
                                                                                                    "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Resolved_Data_View_API.html",
                                                                                                    "title":  "Resolved data view API",
                                                                                                    "keywords":  "Resolved data view API This portion of the overall data views API is the resources that resolve per-user for each data view. For a description of what this information is, and how to use it, see the documentation for resolved data views. Get Data Items by Query Gets the paged collection of data items that are the results of an individual query, and which are eligible for use in the current data view. A data view has a collection of zero or more queries. Each query has an identifier. Those identifiers are used here as part of the request path. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/Resolved/DataItems/{queryId}?cache={cache}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Resolved DataItems {queryId}?cache={cache}\u0026skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier string queryId The Query identifier Request query parameters [optional] string cache \"Refresh\" to force the resource to re-resolve. \"Preserve\" to use cached information, if available. This is the default value. [optional] int skip An optional parameter representing the zero-based offset of the first data item to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of data items to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cDataItem\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the DataItem s that resolved. 403 Forbidden error You are not authorized for this operation 404 Not Found error The data view or query does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of data items visible to the current user Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"Id\": \"WS_BILT\", \"Name\": \"WS_BILT\", \"TypeId\": \"quickstart-omf-weather-gen1\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"High Resolution\", \"Gen1\" ], \"Metadata\": [ { \"Name\": \"Site\", \"Value\": \"Biltmore\", \"TypeCode\": \"String\" } ], \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"SolarRadiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false } ], \"IneligibleDataItemFields\": [] } ] } .NET client libraries method Task\u003cResolvedItems\u003cDataItem\u003e\u003e GetDataItemsAsync(string id, string queryId, int skip = 0, int count = 100, CacheBehavior cache = CacheBehavior.Preserve); Get Ineligible Data Items by Query Gets the paged collection of data items that are the results of an individual query, but which are not eligible for use in the current data view. A common reason for ineligibility is that the item\u0027s index property is of a different type than the data view expects. A data view has a collection of zero or more queries. Each query has an identifier. Those identifiers are used here as part of the request path. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/Resolved/IneligibleDataItems/{queryId}?cache={cache}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Resolved IneligibleDataItems {queryId}?cache={cache}\u0026skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier string queryId The Query identifier Request query parameters [optional] string cache \"Refresh\" to force the resource to re-resolve. \"Preserve\" to use cached information, if available. This is the default value. [optional] int skip An optional parameter representing the zero-based offset of the first data item to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of data items to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cDataItem\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the DataItem s that resolved. 403 Forbidden error You are not authorized for this operation 404 Not Found error The data view or query does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of data items visible to the current user Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"Id\": \"SOME_INELIGIBLE_STREAM\", \"Name\": \"Some Ineligible Stream\", \"TypeId\": \"type-with-different-index\", \"ResourceType\": \"Stream\", \"Tags\": [], \"Metadata\": [], \"DataItemFields\": [], \"IneligibleDataItemFields\": [ { \"Id\": \"Depth\", \"Name\": \"Depth\", \"TypeCode\": \"Double\", \"IsKey\": true }, { \"Id\": \"Density\", \"Name\": \"Density\", \"TypeCode\": \"Double\", \"IsKey\": false } ] } ] } .NET client libraries method Task\u003cResolvedItems\u003cDataItem\u003e\u003e GetIneligibleDataItemsAsync(string id, string queryId, int skip = 0, int count = 100, CacheBehavior cache = CacheBehavior.Preserve); Get Groups Gets the collection of Group s that resolved for a data view. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/Resolved/Groups?cache={cache}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Resolved Groups?cache={cache}\u0026skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request query parameters [optional] string cache \"Refresh\" to force the resource to re-resolve. \"Preserve\" to use cached information, if available. This is the default value. [optional] int skip An optional parameter representing the zero-based offset of the first group to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of groups to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cGroup\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the Groups s that resolved. 403 Forbidden error You are not authorized for this operation 404 Not Found error The data view does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of groups Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"GroupingValues\": [ { \"Value\": \"Biltmore\", \"TypeCode\": \"String\" } ], \"DataItems\": { \"Query1\": [ { \"Id\": \"WS_BILT\", \"Name\": \"WS_BILT\", \"TypeId\": \"quickstart-omf-weather-gen1\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"High Resolution\", \"Gen1\" ], \"Metadata\": [ { \"Name\": \"Site\", \"Value\": \"Biltmore\", \"TypeCode\": \"String\" } ], \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"SolarRadiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false } ], \"IneligibleDataItemFields\": [] } ] } } ] } .NET client libraries method Task\u003cResolvedItems\u003cGroup\u003e\u003e GetGroupsAsync(string id, int skip = 0, int count = 100, CacheBehavior cache = CacheBehavior.Preserve); Get Available Field Sets Gets the collection of field sets that are available for use in the data view, and which are not already included in the data view. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/Resolved/AvailableFieldSets?cache={cache} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Resolved AvailableFieldSets?cache={cache} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request query parameters [optional] string cache \"Refresh\" to force the resource to re-resolve. \"Preserve\" to use cached information, if available. This is the default value. Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cFieldSet\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the FieldSets s that resolved and which are still available 403 Forbidden error You are not authorized for this operation 404 Not Found error The data view does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ] } ] } .NET client libraries method Task\u003cResolvedItems\u003cFieldSet\u003e\u003e GetAvailableFieldSetsAsync(string id, CacheBehavior cache = CacheBehavior.Preserve); Get Field Mappings Gets the collection of field mappings resolved for the data view. These show the exact data behind every field, for each data item, for each group. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/Resolved/FieldMappings?cache={cache}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Resolved FieldMappings?cache={cache}\u0026skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request query parameters [optional] string cache \"Refresh\" to force the resource to re-resolve. \"Preserve\" to use cached information, if available. This is the default value. [optional] int skip An optional parameter representing the zero-based offset of the first field mapping to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of field mappings to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cFieldMapping\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the FieldMapping s resolved 403 Forbidden error You are not authorized for this operation 404 Not Found error The data view does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of field mappings Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"Id\": \"Timestamp\", \"Label\": \"Timestamp\", \"FieldKind\": \"IndexField\", \"TypeCode\": \"DateTime\", \"DataMappings\": [ { \"TypeCode\": \"DateTime\" }, { \"TypeCode\": \"DateTime\" }, { \"TypeCode\": \"DateTime\" } ] }, { \"Id\": \"Temperature\", \"Label\": \"Temperature\", \"FieldKind\": \"DataField\", \"TypeCode\": \"Double\", \"DataMappings\": [ { \"TargetId\": \"WS_BILT\", \"TargetFieldKey\": \"Temperature\", \"TypeCode\": \"Double\", \"FieldSetIndex\": 1, \"FieldIndex\": 0 }, { \"TargetId\": \"WS_ROSE\", \"TargetFieldKey\": \"Temperature\", \"TypeCode\": \"Double\", \"FieldSetIndex\": 1, \"FieldIndex\": 0 }, { \"TargetId\": \"WS_WINT\", \"TargetFieldKey\": \"AmbientTemperature\", \"TypeCode\": \"Double\", \"FieldSetIndex\": 1, \"FieldIndex\": 0 } ] }, ] } .NET client libraries method Task\u003cResolvedItems\u003cFieldMapping\u003e\u003e GetFieldMappingsAsync(string id, int skip = 0, int count = 100, CacheBehavior cache = CacheBehavior.Preserve); Get Statistics Gets statistics about the size and shape on how the data view resolved. Request GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/{dataViewId}/Resolved/Statistics?cache={cache}  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews {dataViewId} Resolved Statistics?cache={cache} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string dataViewId The data view identifier Request query parameters [optional] string cache \"Refresh\" to force the resource to re-resolve. \"Preserve\" to use cached information, if available. This is the default value. Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItem\u003cStatistics\u003e Successfully retrieved data. 403 Forbidden error User is not authorized for this operation. 404 Not Found error The specified data view identifier is not found. 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"DataItemCount\": 24, \"GroupCount\": 2, \"FieldMappingCount\": 10, \"DataFieldSets\": [ { \"DataItemCount\": 18, \"UnmappedDataItemCount\": 3, \"DataFields\": [ { \"FieldMappingCount\": 3, \"DataMappingCount\": 6, \"EmptyDataMappingCount\": 0, \"UnmappedGroupCount\": 0 }, { \"FieldMappingCount\": 3, \"DataMappingCount\": 6, \"EmptyDataMappingCount\": 2, \"UnmappedGroupCount\": 1 } ] }, { \"DataItemCount\": 6, \"UnmappedDataItemCount\": 0, \"DataFields\": [ { \"FieldMappingCount\": 2, \"DataMappingCount\": 4, \"EmptyDataMappingCount\": 2, \"UnmappedGroupCount\": 1 } ] } ] } .NET client libraries method Task\u003cResolvedItem\u003cStatistics\u003e\u003e GetStatisticsAsync(string id, CacheBehavior cache = CacheBehavior.Preserve);"
                                                                                                },
    "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Resolved_Data_View_Preview_API.html":  {
                                                                                                            "href":  "Content_Portal/Documentation/DataViews/DataViewsAPIOverview/Resolved_Data_View_Preview_API.html",
                                                                                                            "title":  "Resolved data view preview API",
                                                                                                            "keywords":  "Resolved data view preview API This portion of the overall data views API specifies the resources that resolve per-user for an input data view. The preview APIs require a data view to be passed in the request body for each request, which provides the user the flexibility to change the data view on the fly without saving/updating saving updating it. Get Data Items by Query Gets the paged collection of data items returned by an individual query, and which are eligible for use in the provided data view. A data view has a collection of zero or more queries. Each query has an identifier. Those identifiers are used here as part of the request path. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Preview/DataViews/Resolved/DataItems/{queryId}?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Preview DataViews Resolved DataItems {queryId}?skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string queryId The Query identifier Request query parameters [optional] int skip An optional parameter representing the zero-based offset of the first data item to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of data items to retrieve. If not specified, a default value of 100 is used. Request body A DataView object to get the results for. Example request body { \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*WS_BILT*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cDataItem\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the DataItem s that resolved. 400 Bad Request error The data view or the query parameters are not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 404 Not Found error The query does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of data items visible to the current user Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"Id\": \"WS_BILT\", \"Name\": \"WS_BILT\", \"TypeId\": \"quickstart-omf-weather-gen1\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"High Resolution\", \"Gen1\" ], \"Metadata\": [ { \"Name\": \"Site\", \"Value\": \"Biltmore\", \"TypeCode\": \"String\" } ], \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"SolarRadiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false } ], \"IneligibleDataItemFields\": [] } ] } .NET client libraries method Task\u003cResolvedItems\u003cDataItem\u003e\u003e GetPreviewDataItemsAsync(string queryId, DataView dataView, int skip = 0, int count = 100); Get Ineligible Data Items by Query Gets the paged collection of data items returned by an individual query, but which are not eligible for use in the provided data view. A common reason for ineligibility is that the item\u0027s index property is of a different type than the data view expects. A data view has a collection of zero or more queries. Each query has an identifier. Those identifiers are used here as part of the request path. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Preview/DataViews/Resolved/IneligibleDataItems/{queryId}?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Preview DataViews Resolved IneligibleDataItems {queryId}?skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier string queryId The Query identifier Request query parameters [optional] int skip An optional parameter representing the zero-based offset of the first data item to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of data items to retrieve. If not specified, a default value of 100 is used. Request body A DataView object to get the results for. Example request body { \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cDataItem\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the DataItem s that resolved. 400 Bad Request error The data view or the query parameters are not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 404 Not Found error The query does not exist 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of data items visible to the current user Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"Id\": \"SOME_INELIGIBLE_STREAM\", \"Name\": \"Some Ineligible Stream\", \"TypeId\": \"type-with-different-index\", \"ResourceType\": \"Stream\", \"Tags\": [], \"Metadata\": [], \"DataItemFields\": [], \"IneligibleDataItemFields\": [ { \"Id\": \"Depth\", \"Name\": \"Depth\", \"TypeCode\": \"Double\", \"IsKey\": true }, { \"Id\": \"Density\", \"Name\": \"Density\", \"TypeCode\": \"Double\", \"IsKey\": false } ] } ] } .NET client libraries method Task\u003cResolvedItems\u003cDataItem\u003e\u003e GetPreviewIneligibleDataItemsAsync(string queryId, DataView dataView, int skip = 0, int count = 100); Get Groups Gets the collection of Group s that resolved for the provided data view. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Preview/DataViews/Resolved/Groups?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Preview DataViews Resolved Groups?skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request query parameters [optional] int skip An optional parameter representing the zero-based offset of the first group to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of groups to retrieve. If not specified, a default value of 100 is used. Request body A DataView object to get the results for. Example request body { \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*WS_BILT*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" } ], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cGroup\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the Groups s that resolved. 400 Bad Request error The data view or the query parameters are not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of groups Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK Content-Type: application/json application json { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"GroupingValues\": [ { \"Value\": \"Biltmore\", \"TypeCode\": \"String\" } ], \"DataItems\": { \"Query1\": [ { \"Id\": \"WS_BILT\", \"Name\": \"WS_BILT\", \"TypeId\": \"quickstart-omf-weather-gen1\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"High Resolution\", \"Gen1\" ], \"Metadata\": [ { \"Name\": \"Site\", \"Value\": \"Biltmore\", \"TypeCode\": \"String\" } ], \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"SolarRadiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false } ], \"IneligibleDataItemFields\": [] } ] } } ] } .NET client libraries method Task\u003cResolvedItems\u003cGroup\u003e\u003e GetPreviewGroupsAsync(DataView dataView, int skip = 0, int count = 100); Get Available Field Sets Gets the collection of field sets that are available for use in the provided data view, and which are not already included in the data view. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Preview/DataViews/Resolved/AvailableFieldSets api v1 Tenants {tenantId} Namespaces {namespaceId} Preview DataViews Resolved AvailableFieldSets Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body A DataView object to get the results for. Example request body { \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cFieldSet\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the FieldSets s that resolved and which are still available 400 Bad Request error The data view or the query parameters are not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ] } ] } .NET client libraries method Task\u003cResolvedItems\u003cFieldSet\u003e\u003e GetPreviewAvailableFieldSetsAsync(DataView dataView); Get Field Mappings Gets the collection of field mappings resolved for the provided data view. These show the exact data behind every field, for each data item, for each group. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Preview/DataViews/Resolved/FieldMappings?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Preview DataViews Resolved FieldMappings?skip={skip}\u0026count={count} Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request query parameters [optional] int skip An optional parameter representing the zero-based offset of the first field mapping to retrieve. If not specified, a default value of 0 is used. [optional] int count An optional parameter representing the maximum number of field mappings to retrieve. If not specified, a default value of 100 is used. Request body A DataView object to get the results for. Example request body { \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\", \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" } ], }, ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" } ], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItems\u003cFieldMapping\u003e An object with a \"TimeOfResolution\" and a collection of \"Items\", the FieldMapping s resolved 400 Bad Request error The data view or the query parameters are not valid. See the response body for details 403 Forbidden error You are not authorized for this operation 500 Internal Server Error error An error occurred while processing the request. See the response body for details Response headers Successful (200 OK) responses include: Header Description Total-Count The total count of field mappings Link Hyperlinks to the first page and next page of results as applicable Example response body HTTP 200 OK { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Items\": [ { \"Id\": \"Timestamp\", \"Label\": \"Timestamp\", \"FieldKind\": \"IndexField\", \"TypeCode\": \"DateTime\", \"DataMappings\": [ { \"TypeCode\": \"DateTime\" }, { \"TypeCode\": \"DateTime\" }, { \"TypeCode\": \"DateTime\" } ] }, { \"Id\": \"Temperature\", \"Label\": \"Temperature\", \"FieldKind\": \"DataField\", \"TypeCode\": \"Double\", \"DataMappings\": [ { \"TargetId\": \"WS_BILT\", \"TargetFieldKey\": \"Temperature\", \"TypeCode\": \"Double\", \"FieldSetIndex\": 1, \"FieldIndex\": 0 }, { \"TargetId\": \"WS_ROSE\", \"TargetFieldKey\": \"Temperature\", \"TypeCode\": \"Double\", \"FieldSetIndex\": 1, \"FieldIndex\": 0 }, { \"TargetId\": \"WS_WINT\", \"TargetFieldKey\": \"AmbientTemperature\", \"TypeCode\": \"Double\", \"FieldSetIndex\": 1, \"FieldIndex\": 0 } ] }, ] } .NET client libraries method Task\u003cResolvedItems\u003cFieldMapping\u003e\u003e GetPreviewFieldMappingsAsync(DataView dataView, int skip = 0, int count = 100); Get Statistics Gets statistics about the size and shape on how the data view resolved. Request POST /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Preview/DataViews/Resolved/Statistics  api v1 Tenants {tenantId} Namespaces {namespaceId} Preview DataViews Resolved Statistics Request path parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body A DataView object to get the results for. Example request body { \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\", \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" } ], }, ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" } ], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Response The response includes a status code and, in most cases, a body. Status code Body Type Description 200 OK ResolvedItem\u003cStatistics\u003e Successfully retrieved data. 400 Bad Request error The data view or the query parameters are not valid. See the response body for details 403 Forbidden error User is not authorized for this operation. 500 Internal Server Error error An error occurred while processing the request. See the response body for details Example response body HTTP 200 OK { \"TimeOfResolution\": \"2019-12-13T01:23:45Z\", \"Item\": { \"DataItemCount\": 24, \"GroupCount\": 2, \"FieldMappingCount\": 10, \"DataFieldSets\": [ { \"DataItemCount\": 18, \"UnmappedDataItemCount\": 3, \"DataFields\": [ { \"FieldMappingCount\": 3, \"DataMappingCount\": 6, \"EmptyDataMappingCount\": 0, \"UnmappedGroupCount\": 0 }, { \"FieldMappingCount\": 3, \"DataMappingCount\": 6, \"EmptyDataMappingCount\": 2, \"UnmappedGroupCount\": 1 } ] }, { \"DataItemCount\": 6, \"UnmappedDataItemCount\": 0, \"DataFields\": [ { \"FieldMappingCount\": 2, \"DataMappingCount\": 4, \"EmptyDataMappingCount\": 2, \"UnmappedGroupCount\": 1 } ] } ] } } .NET client libraries method Task\u003cResolvedItem\u003cStatistics\u003e\u003e GetPreviewStatisticsAsync(DataView dataView);"
                                                                                                        },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Add_Identifying_Field.html":  {
                                                                                              "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Add_Identifying_Field.html",
                                                                                              "title":  "Add identifying field",
                                                                                              "keywords":  "Add identifying field If a field set resolves to multiple data items in any group, you may wish to identify those data items so that they are not ambiguous and so they will be aligned across groups. The identifying field of a data field set specifies the primary field to identify multiple items in a group. This allows the identifying field value to be used automatically in field labels of the group. One field should be designated as the .IdentifyingField of the field set to tell the data items apart. If a single criterion is not an effective way of disambiguating fields, then it may be necessary to group by additional criteria. Any field from field sources FieldSource.Id , FieldSource.Name , FieldSource.Metadata , FieldSource.Tags can be used as an identifying field. See Add identifying field in the Define data field sets topic for details."
                                                                                          },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Available_Field_Sets.html":  {
                                                                                             "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Available_Field_Sets.html",
                                                                                             "title":  "Retrieve available field sets",
                                                                                             "keywords":  "Retrieve available field sets Available field sets include fields not currently included in the data view, which are available to be added. The list of field sets is generated based on the .Queries and .GroupingFields of the defined data view. A grouping field is part of a data view definition that identifies a data item which is used to group related data items together. These fields and field sets can be readily added to the data view .DataFieldSets . Once the field is added, it is omitted from the list of available field sets. Similarly, if the field is removed from the data view, it is added back to the available field sets. This allows an iterative approach to building the data view by easily adding and removing fields from the data view. Example The example uses the following data view and the streams from the Stream examples . Note that the field sets and the grouping fields arrays are empty: { \"Id\": \"example_without_grouping_fields\", \"Name\": \"example_without_grouping_fields\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Accessing the Get Available Field Sets endpoint will show available fields corresponding to stream id, name, tags, metadata, and each property. HTTP 200 OK { \"TimeOfResolution\": \"(a timestamp in ISO 8601 format)\", \"Items\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"Name\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Name\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} AmbientTemperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"CloudCover\" ], \"Label\": \"{IdentifyingValue} CloudCover {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ] } ] }"
                                                                                         },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Consolidate_Data_Fields.html":  {
                                                                                                "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Consolidate_Data_Fields.html",
                                                                                                "title":  "Consolidate data fields",
                                                                                                "keywords":  "Consolidate data fields Data items included in a data view may have slight differences in property naming, despite those properties representing the same logical thing. For example: data from one equipment manufacturer reports \"Temperature\", while another reports \"AmbientTemperature\" instead. Data views can overcome property naming differences by consolidating these similar properties into a single data field. This applies to stream properties referenced by id ( FieldSource.PropertyId ) or by name ( FieldSource.PropertyName ), and to stream metadata keys ( FieldSource.Metadata ). For those cases, adding multiple match values to the field\u0027s Keys collection will allow alternate keys to match. See Consolidate data fields in the Define a data view topic for details. Asset properties can also be consolidated. Asset metadata ( FieldSource.Metadata ) and property ids ( FieldSource.PropertyId ) can be consolidated using the Keys collection. Asset stream reference names can be consolidated using the StreamReferenceNames collection."
                                                                                            },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Data_Items_and_Groups.html":  {
                                                                                              "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Data_Items_and_Groups.html",
                                                                                              "title":  "Identify data items",
                                                                                              "keywords":  "Identify data items A DataItem is an OCS resource, such as a stream or asset, included in the data view. The collection of data items is specified by the data view queries, where the queries define the search criteria and the data items represent the results of the search. The data view can include one or more properties from each data item. Data items The collection of data items in the data view represents all OCS resources that match the .Queries field of the data view, excluding data items that are ineligible (see discussion of ineligible data items below). To add data items to a data view, either refine an existing query, or add a new query (refer to queries for which option to choose from). Similarly, to remove data items from a data view, either refine an existing query, or remove a query (this will remove all data items from the query). Note: Each query is executed independently to generate the list of data items. It is thus possible to have duplicate data items resulting from different queries. This can be desirable or undesirable depending on the use case. There is a maximum of 10,000 data items per query. You can add more than 10,000 data items to a data view by adding additional queries. Data items are ordered alphabetically by data item id within the data items collection. Adding fields Each data item contains information that can be optionally (and explicitly) added to the data view by setting the .DataFieldSets field of the data view. Currently, there are two supported resource types: stream and asset . The resource type stream has the following available fields: Stream id Stream name Stream tags Stream metadata Data from each stream property The resource type asset has the following available fields: Asset id Asset name Asset metadata Data from each asset stream reference property Adding or removing data items When requesting for resolved data items or when getting the data view data , the list of data items reflects the list of OCS resources that match one or more queries when the data view was last resolved. This means that if new data items, such as new streams or assets, were added or existing data items were removed, the list of data items will only reflect the latest changes if the data view is re-resolved. For more information, refer to the caching section in the resolved data view resource page . Ineligible data items The collection of ineligible data items represents OCS resources that match the queries but cannot be included in the data view. A data item is ineligible if it does not contain at least one eligible non-key data item field . A data item field is ineligible if its index is not appropriate for the data view, or if the field has an SdsTypeCode that may not be included in data views. The following are examples of ineligible index: The index is compound (multiple properties) The index property\u0027s SdsTypeCode differs from the IndexTypeCode of the data view The following are examples of ineligible field types: SdsTypeCode.Object (nested type) SdsTypeCode.Array (collection type) SdsTypeCode.TimeSpan (time spans and nullable time spans are currently unsupported)"
                                                                                          },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Data_View_Shape.html":  {
                                                                                        "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Data_View_Shape.html",
                                                                                        "title":  "Data view shape",
                                                                                        "keywords":  "Data view shape Data views may be set to resolve as a standard shape or a narrow shape. A data view shape is a portion of a data view definition that determines if the data should be returned in the standard grouped row format or a narrow view which is a pivot of the standard table. With a standard shape, each row in the resolved data view includes all the data fields for a single event or observation. With a narrow shape, each row in the resolved data view includes only one data field. This results in a narrow output schema where one column contains all the data field values, so the schema remains fixed regardless of changes to the included data fields. Narrow shape may be used when an invariant output schema is required. The shape concepts presented in this section apply to building all data view output formats; although the terminology used and examples shown, pertain to tabular output with headers (form = csvh). Specify the shape Set the DataViewShape property to a value of the DataViewShape enumeration , either DataViewShape.Standard (default) or DataViewShape.Narrow . Standard shape The standard table column structure is built horizontally from left to right. The index field is first, followed by the grouping fields, if any exist. Data field sets come next, in the order they are presented in the data view. Fields are presented in order of appearance within each data field set for each data item from the associated query. Vertically, the standard structure depends on the inclusion of grouping fields. If grouping fields are not defined, each resultant index appears only once, and all interpolated data is in that row. If grouping fields are defined, then the resultant indexes will repeat vertically for each group. The groups are presented in alphabetical order. Example: Get data response body for standard shape with no grouping field Note, column labels contain a numerical suffix to ensure that each label is unique. Use grouping fields or an identifying field to create unique column labels. Timestamp.0,Id.1,SolarRadiation.2,Temperature.3,Tags.4,Id.5,SolarRadiation.6,Temperature.7,Tags.8,Id.9,SolarRadiation.10,Temperature.11,Tags.12,Id.13,SolarRadiation.14,Temperature.15,Tags.16 2018-11-13T18:19:00.0000000Z,WS_BILT,229,28.042327888795327,\"Gen1, High Resolution, Weather\",WS_HRST,254,4.219790459247207,\"Gen1, Low Resolution, Weather\",WS_ROSE,31,31.23228568408279,\"Gen1, Low Resolution, Weather\",WS_WINT,184,,\"Gen2, High Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,WS_BILT,229,28.042327888795327,\"Gen1, High Resolution, Weather\",WS_HRST,254,4.219790459247207,\"Gen1, Low Resolution, Weather\",WS_ROSE,31,31.23228568408279,\"Gen1, Low Resolution, Weather\",WS_WINT,184,,\"Gen2, High Resolution, Weather\" Example: Get data response body for standard shape with grouping field (Site) The use of a grouping field will restructure the table vertically. See Grouping documentation for details. Timestamp,Site,Id,SolarRadiation,Temperature,Tags 2018-11-13T18:19:00.0000000Z,Biltmore,WS_BILT,229,28.042327888795327,\"Gen1, High Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,Biltmore,WS_BILT,229,28.042327888795327,\"Gen1, High Resolution, Weather\" 2018-11-13T18:21:00.0000000Z,Biltmore,WS_BILT,229,28.042327888795327,\"Gen1, High Resolution, Weather\" 2018-11-13T18:22:00.0000000Z,Biltmore,WS_BILT,229,28.042327888795327,\"Gen1, High Resolution, Weather\" 2018-11-13T18:19:00.0000000Z,Hearst Castle,WS_HRST,254,4.219790459247207,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,Hearst Castle,WS_HRST,254,4.219790459247207,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:21:00.0000000Z,Hearst Castle,WS_HRST,254,4.219790459247207,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:22:00.0000000Z,Hearst Castle,WS_HRST,254,4.219790459247207,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:19:00.0000000Z,Rosecliff,WS_ROSE,31,31.23228568408279,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,Rosecliff,WS_ROSE,31,31.23228568408279,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:21:00.0000000Z,Rosecliff,WS_ROSE,31,31.23228568408279,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:22:00.0000000Z,Rosecliff,WS_ROSE,31,31.23228568408279,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:19:00.0000000Z,Winterthur,WS_WINT,184,,\"Gen2, High Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,Winterthur,WS_WINT,184,,\"Gen2, High Resolution, Weather\" 2018-11-13T18:21:00.0000000Z,Winterthur,WS_WINT,184,,\"Gen2, High Resolution, Weather\" 2018-11-13T18:22:00.0000000Z,Winterthur,WS_WINT,184,,\"Gen2, High Resolution, Weather\" Narrow shape The narrow table pivots the standard table. Each data field becomes a row comprised of the following columns: Index column Grouping value column(s) Field column, which holds the resolved column label of the field Value column, which holds the field value such as the property or metadata value The column label of the index and grouping value columns may vary depending on the resolved label. The Field and Value column labels are not modifiable. The data view is built vertically by grouping field, if present, then by field. Data views resolving into multiple data items with the same property ids or names, should use a grouping field or an identifier in order to differentiate the data rows. Example: Get data response body for narrow shape with grouping field (Site) Timestamp,Site,Field,Value 2018-11-13T18:19:00.0000000Z,Biltmore,Id,WS_BILT 2018-11-13T18:20:00.0000000Z,Biltmore,Id,WS_BILT 2018-11-13T18:19:00.0000000Z,Biltmore,SolarRadiation,229 2018-11-13T18:20:00.0000000Z,Biltmore,SolarRadiation,229 2018-11-13T18:19:00.0000000Z,Biltmore,Temperature,28.042327888795327 2018-11-13T18:20:00.0000000Z,Biltmore,Temperature,28.042327888795327 2018-11-13T18:19:00.0000000Z,Biltmore,Tags,\"Gen1, High Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,Biltmore,Tags,\"Gen1, High Resolution, Weather\" 2018-11-13T18:19:00.0000000Z,Hearst Castle,Id,WS_HRST 2018-11-13T18:20:00.0000000Z,Hearst Castle,Id,WS_HRST 2018-11-13T18:19:00.0000000Z,Hearst Castle,SolarRadiation,254 2018-11-13T18:20:00.0000000Z,Hearst Castle,SolarRadiation,254 2018-11-13T18:19:00.0000000Z,Hearst Castle,Temperature,4.219790459247207 2018-11-13T18:20:00.0000000Z,Hearst Castle,Temperature,4.219790459247207 2018-11-13T18:19:00.0000000Z,Hearst Castle,Tags,\"Gen1, Low Resolution, Weather\" 2018-11-13T18:20:00.0000000Z,Hearst Castle,Tags,\"Gen1, Low Resolution, Weather\""
                                                                                    },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Field_Mappings.html":  {
                                                                                       "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Field_Mappings.html",
                                                                                       "title":  "View field mappings",
                                                                                       "keywords":  "View field mappings A FieldMapping contains information on the source on every field of data in the data view. Field mappings are part of a resolved data view that describe which data items will map to specific fields. Each field mapping can report the field kind (index, group, data, or field id) of the field as well as information on how it is mapped via its data mapping. For each field in the data view, there is a corresponding FieldMapping . Inspecting the field mapping resource after defining the data view is a good way to confirm that the output data view does contain the data-of-interest prior to data generation. Within each field mapping, the list of DataMapping s shows the source of data for each group. There is one DataMapping per group, since the number of distinct data sources for each field equals the number of groups in the resolved data view. The order of the data mappings corresponds to the order of the groups as seen from Get Groups . If a field does not resolve for a specific group, then the data mapping will be empty. Empty data mappings have a TypeCode of Empty . See below for more details in TypeCode . Ordering The first field mapping contains information for the index field. Next, field mappings are appended for each GroupingField in the data view. If there is more than one GroupingField , the order of the field mappings corresponds to the order of the GroupingField s in the data view. Following the index and grouping field mappings are the data field mappings. Data field mappings are different depending on the data view shape . Standard For standard shape data views, the order of the field mappings reflects the order of the data fields in the data view. The first data field mappings are created for the first DataFieldSet DataField . Then field mappings are created for each subsequent DataField in the order they appear in the data view. If the data view contains more than one DataFieldSet , then the subsequent DataFieldSet DataField s will be added after the first DataFieldSet and following the same pattern. Narrow Narrow shape data views have a fixed field mapping shape. There are only two data field mappings, the Field field mapping, which contains the field identifiers, and the Value field mapping, which contains the field values. Interpreting field mapping The number and order of field mappings is identical to the number and order of the resulting data view fields. Id and label The field mapping id represents the JSON property name (or column name in table or csv format) in the output data view data. The field mapping label represents the data view field label with tokens resolved. If all field mapping labels in a data view are unique, the field mapping id is identical to the label; if not, the id is generated from the label by adding an index number postfix. Field kind The FieldKind specifies whether the field maps to an index field, grouping field, data field, or field id field. Not all DataMapping properties apply to each FieldKind . Index field Fields of kind IndexField map to the data view\u0027s index field . DataMapping Property Details TargetId Not applicable TargetStreamReferenceName Not applicable TargetFieldKey Not applicable TypeCode Equivalent to the IndexTypeCode of the data view SummaryType Not applicable Uom Not applicable FieldSetIndex Not applicable FieldIndex Not applicable Grouping field Fields of kind GroupingField map to a grouping field on the data view. DataMapping Property Details TargetId The group\u0027s value TargetStreamReferenceName Not applicable TargetFieldKey Not applicable TypeCode The group\u0027s data type SummaryType Not applicable Uom The unit of measure id for the grouping field FieldSetIndex Not applicable FieldIndex The zero-based positioning of the field within the data view\u0027s grouping fields Data field Fields of kind DataField map to a data field on the data view. DataMapping Property Details TargetId The data item id TargetStreamReferenceName The name of the asset stream reference. Only applicable to PropertyId fields and when the data field references an asset property. TargetFieldKey The metadata name ( Metadata fields), property id ( PropertyId fields), or property name ( PropertyName fields). Not applicable to Id , Name , or Tags fields. TypeCode The data item\u0027s data type SummaryType The summary type calculation for the data field. Applicable to \u0027PropertyId\u0027 and \u0027PropertyName\u0027 fields only. SummaryDirection SummaryDirection controls whether the start or end index of the summary is used by the data view to calculate the summary values. Uom The unit of measure id for the data field FieldSetIndex The zero-based positioning of the data field set FieldIndex The zero-based positioning of the data field within the appropriate data field set Field id field The field id field only applies to data views with narrow shape . The FieldId field maps to the field column. DataMapping Property Details TargetId The data item id TargetStreamReferenceName Not applicable TargetFieldKey Not applicable TypeCode String SummaryType Not applicable Uom Not applicable FieldSetIndex The zero-based positioning of the data field set FieldIndex The zero-based positioning of the data field within the appropriate data field set Type code The TypeCode is the primary data type of the field mapping. This value comes from the field mapping\u0027s first populated DataMapping . The field mapping TypeCode is informational; it is not enforced."
                                                                                   },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Field_Sets.html":  {
                                                                                   "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Field_Sets.html",
                                                                                   "title":  "Define data field sets",
                                                                                   "keywords":  "Define data field sets A data view is likely to include multiple fields of information. One field serves as the index (e.g. Timestamp), and others contain information from or about the data items in the data view DataFieldSet s. Data field sets are collections of fields originating from the same query. Available field sets The typical workflow for adding data field sets, and the data fields in them, is to use or adapt the available field sets that resolve for the data view. Available field sets provide the field sets and data fields which are available to a data view based on its query, but not currently included in its definition. This workflow is demonstrated in Define a Data View . Example: Defining data field sets Let us take a subset of the power inverter streams in the stream examples , returned by the Query value \"TypeId:docs-pi-inverter AND Site:Winterthur\" . Site Meter Measurement Stream Id Tags Winterthur Primary Power In WINT.Meter.Primary.Inverter.0.PwrIn Low Resolution Winterthur Primary Power Out WINT.Meter.Primary.Inverter.0.PwrOut Low Resolution Winterthur Secondary Power In WINT.Meter.Secondary.Inverter.0.PwrIn Low Resolution Winterthur Secondary Power Out WINT.Meter.Secondary.Inverter.0.PwrOut Low Resolution The following represents a data view grouped by \"Meter\", including fields for the grouping value, and each data item\u0027s \"Tags\" and property \"Value\": { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-pi-inverter AND Site:Winterthur\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} Value {Uom} {SummaryType}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Low Resolution\", \"High Resolution\" ], \"Label\": \"{IdentifyingValue} Tags\" } ] } ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Meter\" ], \"Label\": \"{IdentifyingValue} Meter {Uom}\" } ] } The view resolves into two groups of field mappings: Timestamp.0 Meter.1 Value.2 Tags.3 Value.4 Tags.5 Value.6 Tags.7 Value.8 Tags.9 - Primary ..Primary..PwrIn/PropertyId:Value ..Primary..PwrIn PropertyId:Value ..Primary..PwrIn/Tags ..Primary..PwrIn Tags ..Primary..PwrOut/PropertyId:Value ..Primary..PwrOut PropertyId:Value ..Primary..PwrOut/Tags ..Primary..PwrOut Tags - Secondary ..Secondary..PwrIn/PropertyId:Value ..Secondary..PwrIn PropertyId:Value ..Secondary..PwrIn/Tags ..Secondary..PwrIn Tags ..Secondary..PwrOut/PropertyId:Value ..Secondary..PwrOut PropertyId:Value ..Secondary..PwrOut/Tags ..Secondary..PwrOut Tags Two things are clearly undesirable here: The field identifiers are ambiguous The result is sparse: the data views engine has not been told how to align the data items across groups, so it has no idea that all \"Power In\" streams are similar. To fix this, we will add an .IdentifyingField to the field set. Identifying field If the field set resolves to multiple data items in any group (or if grouping is not used), then a field should be designated as the .IdentifyingField of the field set. The identifying field of a data field set specifies the primary field to identify multiple items in a group. This allows the identifying field value to be used automatically in field labels of the group. If one lone criterion is not a sufficient or useful way of disambiguating the fields, then grouping by additional criteria may be necessary. Field from field sources FieldSource.Id , FieldSource.Name , FieldSource.Metadata , FieldSource.Tags can be used as an identifying field. Keys are required for identifying fields with the source type of FieldSource.Metadata and FieldSource.Tags . Keys are not applicable for identifying fields with the source type of FieldSource.Id and FieldSource.Name . Example: Adding an identifying field To the data view from the previous example, we will add a Field as the .IdentifyingField of its field set. In this example, it makes sense to identify each data item by its Measurement . { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-pi-inverter AND Site:Winterthur\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} Value {Uom} {SummaryType}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Low Resolution\", \"High Resolution\" ], \"Label\": \"{IdentifyingValue} Tags\" } ], \"IdentifyingField\": { \"Source\": \"Metadata\", \"Keys\": [ \"Measurement\" ] } } ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Meter\" ], \"Label\": \"{IdentifyingValue} Meter {Uom}\" } ] } The result is much more consumable. The data field identifiers are no longer ambiguous, and like data items are aligned across groups: Timestamp Meter Power In Value Power In Tags Power Out Value Power Out Tags - Primary ..Primary..PwrIn/PropertyId:Value ..Primary..PwrIn PropertyId:Value ..Primary..PwrIn/Tags ..Primary..PwrIn Tags ..Primary..PwrOut/PropertyId:Value ..Primary..PwrOut PropertyId:Value ..Primary..PwrOut/Tags ..Primary..PwrOut Tags - Secondary ..Secondary..PwrIn/PropertyId:Value ..Secondary..PwrIn PropertyId:Value ..Secondary..PwrIn/Tags ..Secondary..PwrIn Tags ..Secondary..PwrOut/PropertyId:Value ..Secondary..PwrOut PropertyId:Value ..Secondary..PwrOut/Tags ..Secondary..PwrOut Tags Working with assets If assets are defined, data field sets can be defined to show the properties from stream references of the assets. To define data field sets with asset properties, two pieces of information are required: the stream reference name and the property id. In order to reference an asset property, a field must contain at least one stream reference name included in the .StreamReferenceNames collection and at least one property id included in the .Keys collection. .StreamReferenceNames only applies to fields with source FieldSource.PropertyId . For all other field sources, .StreamReferenceNames are ignored. Similar to .Keys , .StreamReferenceNames are evaluated in order specified until a match is found, i.e. first-match-wins. Example: Defining data field sets with assets The following example presents a subset of the power inverter streams in the asset examples , returned by the Query value \"Id:*Inverter* AND Metadata/Value:Winterthur\" Metadata Value:Winterthur\" . Site Meter Asset Id Winterthur Primary Winterthur Primary Inverter 0 Winterthur Secondary Winterthur Secondary Inverter The following represents a data view grouped by \"Meter\", including fields for the grouping value, and each data item\u0027s \"Tags\" and property \"Value\": { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Asset\", \"Value\": \"Id:*Inverter* AND Metadata/Value:Winterthur\" Metadata Value:Winterthur\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"StreamReferenceNames\": [ \"Power In\" ], \"Label\": \"{IdentifyingValue} Power In Value {SummaryType} {Uom}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"StreamReferenceNames\": [ \"Power Out\" ], \"Label\": \"{IdentifyingValue} Power Out Value {SummaryType} {Uom}\" } ] } ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Meter\" ], \"StreamReferenceNames\": [], \"Label\": \"{IdentifyingValue} Meter {Uom}\" } ] } The view resolves nicely into the following results: Timestamp Meter Power In Value Power Out Value - Primary ..Primary..PwrIn/PropertyId:Value ..Primary..PwrIn PropertyId:Value ..Primary..PwrOut/PropertyId:Value ..Primary..PwrOut PropertyId:Value - Secondary ..Secondary..PwrIn/PropertyId:Value ..Secondary..PwrIn PropertyId:Value ..Secondary..PwrOut/PropertyId:Value ..Secondary..PwrOut PropertyId:Value The presence of context allows data views to align the data fields, without the addition of an .IdentifyingField as shown in the stream example above. Field Each data field represents a particular source of information, such as a data item\u0027s .Id or the values from one of its properties. Label A data field\u0027s label is a friendly name that can by specified directly or via rules. Null, empty or whitespace is not allowed for a data field label. When the data view is resolved and data fields produce field mappings, labels are trimmed of whitespace and used as the field mappings\u0027 identifier. For example: Timestamp Power In Value Power Out Value In cases where the identifiers are unique, the identifier is suffixed with an ordinal number, its position. For example: Timestamp.0 Value.1 Value.2 There are seven special parameters available for use in field labels: {IdentifyingValue} - the value of the identifying field {Key} - the value of the first of the \"Keys\" specified on the field {StreamReferenceName} - the value of the first of the \"StreamReferenceNames\" specified on the field {Uom} - the value of the unit of measure of the field (if uom is present in the source) {SummaryType} - the value of the summary type of the field (if defined) {SummaryDirection} - the value of the summary direction of the field (if summary type is defined) {QueryId} - the id of the query that produced the field If a special parameter fails to resolve, it becomes an empty string, \"\" . Source A field\u0027s .Source indicates where the field\u0027s values will come from, if applicable. A field of source type FieldSource.NotApplicable cannot be used as a data field. Keys The collection of data items in the data view represents all OCS resources that match the .Queries field of the data view, excluding data items that are ineligible. The list of data items can be retrieved from a resolved data view. The ineligible data items can be retrieved from a resolved data view to determine OCS resources that match the queries but cannot be included in the data view results. A data item is ineligible if it does not contain at least one eligible non-key data item field. In certain cases, a field may need to address data within its data source, such as a particular Metadata value of a data item. This applies to the sources Metadata , PropertyId , and PropertyName . Multiple keys may be specified in the field\u0027s .Keys . This is a way to overcome differences in properties or metadata across data items. Keys are evaluated in order specified until a match is found, i.e. first-match-wins. For field sources that do not use keys ( FieldSource.NotApplicable , FieldSource.Id and FieldSource.Name ), any keys specified are ignored. Special case: Tags The field source FieldSource.Tags is a special case due to the nature of tags. On a field of source FieldSource.Tags , its collection of .Keys represents a whitelist. Example Given a stream with tags [ \"Weather\", \"Low Resolution\", \"Gen2\" ] A field of source FieldSource.Tags and .Keys [ \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\" ] The field\u0027s value when resolved will be [ \"Low Resolution\", \"Gen2\" ]"
                                                                               },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Grouping.html":  {
                                                                                 "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Grouping.html",
                                                                                 "title":  "Group data items",
                                                                                 "keywords":  "Group data items A group can be returned from a resolved data view that describes how data view results will be grouped. The data items of a data view may be organized by grouping them. It is one way of producing a meaningful, consumable shape of data. Grouping is optional when defining the data view. If the .GroupingFields section is not defined on the data view, the resolved data view shows a single group with all eligible data items. If the .GroupingFields section is defined, the resolved data view shows multiple groups, each with the list of data items for the group and the .GroupingValues field showing the matching group\u0027s value(s). In this case, if a data item does not match any group, it is added to all groups. Groups are ordered alphabetically by the first grouping value for each group. Within each group, data items are ordered alphabetically by data item id. Purpose of grouping Without grouping, all of the data items returned by a Query will appear side-by-side. If the view includes many data items, its data records will be enormous. The fields are also likely to be ambiguous. Identifying the items within each field set is one way to disambiguate the fields, but only one Field may be an identifying field. What if multiple metadata Field s are required to fully describe each data item? The example below shows exactly that case: power inverters that are described by a site, meter, and number. Grouping can organize the data items into shapes that are consumable and/or and or represent a physical asset. How it works To group a data view, specify one or more Field objects as the DataView \u0027s .GroupingFields . Eligible grouping fields Fields whose values come from data item FieldSource.Id , FieldSource.Name , FieldSource.Metadata , or FieldSource.Tags are eligible to be used as grouping fields. Grouping field label is required. Keys are required for the grouping fields with source type FieldSource.Metadata and FieldSource.Tags . Keys are not applicable for grouping fields with source type of FieldSource.Id or FieldSource.Name . Uses of grouping Grouping can be used to separate the data items from each other, and to join different types of data items together. Separating data items Separating the data items from each other makes the data view\u0027s data records smaller and more granular. It is also possible to produce shapes that mimic physical or logical assets. Example scenario For the following examples, assume a subgroup of the stream examples power inverter streams, produced by a Query value such as \"TypeId:docs-pi-inverter AND (Site:Rosemont OR Site:Winterthur)\" . This is to keep the example succinct. Site Meter Inverter Measurement Stream Id Rosemont Primary 0 Power In ROSE.Meter.Primary.Inverter.0.PwrIn Rosemont Primary 0 Power Out ROSE.Meter.Primary.Inverter.0.PwrOut Rosemont Primary 1 Power In ROSE.Meter.Primary.Inverter.1.PwrIn Rosemont Primary 1 Power Out ROSE.Meter.Primary.Inverter.1.PwrOut Winterthur Primary 0 Power In WINT.Meter.Primary.Inverter.0.PwrIn Winterthur Primary 0 Power Out WINT.Meter.Primary.Inverter.0.PwrOut Winterthur Secondary 0 Power In WINT.Meter.Secondary.Inverter.0.PwrIn Winterthur Secondary 0 Power Out WINT.Meter.Secondary.Inverter.0.PwrOut Example: No grouping Let us start with a simple data view. It queries for the aforementioned streams, and includes the \"Value\" property of each stream. { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-pi-inverter AND (Site:Rosemont OR Site:Winterthur)\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ], } ] } Unfortunately, the initial result is not very usable. The fields are ambiguous. Eight fields are simply labeled \"Value\" with an index appendended to the end and the size of each data record is tied to the number of inverter streams found by the query. Timestamp.0 Value.1 Value.2 Value.3 ... - ROSE.Meter.Primary.Inverter.0.PwrIn/Value ROSE.Meter.Primary.Inverter.0.PwrIn Value ROSE.Meter.Primary.Inverter.0.PwrOut/Value ROSE.Meter.Primary.Inverter.0.PwrOut Value ROSE.Meter.Primary.Inverter.1.PwrIn/Value ROSE.Meter.Primary.Inverter.1.PwrIn Value ... Example: Complete uniqueness, grouping by data item id A simple way of disambiguating the data items is to group them by data item id. This example includes two actions: Add data item id as a grouping field Include fields for metadata: Site, Meter, Inverter, Measurement. { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-pi-inverter AND (Site:Rosemont OR Site:Winterthur)\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Meter\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Inverter\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Measurement\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ], } ], \"GroupingFields\": [ { \"Source\": \"Id\", \"Label\": \"{IdentifyingValue} Id\" }, ] } The result is much closer to being usable. The records are no longer ambiguous. However, they do not mirror any physical or logical asset. Timestamp Id Site Meter Inverter Measurement Value - \"ROSE.Meter.Primary.Inverter.0.PwrIn\" \"Rosemont\" \"Primary\" \"0\" \"Power In\" ROSE.Meter.Primary.Inverter.0.PwrIn/Value ROSE.Meter.Primary.Inverter.0.PwrIn Value - \"ROSE.Meter.Primary.Inverter.0.PwrOut\" \"Rosemont\" \"Primary\" \"0\" \"Power Out\" ROSE.Meter.Primary.Inverter.0.PwrOut/Value ROSE.Meter.Primary.Inverter.0.PwrOut Value - \"ROSE.Meter.Primary.Inverter.1.PwrIn\" \"Rosemont\" \"Primary\" \"1\" \"Power In\" ROSE.Meter.Primary.Inverter.1.PwrIn/Value ROSE.Meter.Primary.Inverter.1.PwrIn Value - \"ROSE.Meter.Primary.Inverter.1.PwrOut\" \"Rosemont\" \"Primary\" \"1\" \"Power Out\" ROSE.Meter.Primary.Inverter.1.PwrOut/Value ROSE.Meter.Primary.Inverter.1.PwrOut Value - \"WINT.Meter.Primary.Inverter.0.PwrIn\" \"Winterthur\" \"Primary\" \"0\" \"Power In\" WINT.Meter.Primary.Inverter.0.PwrIn/Value WINT.Meter.Primary.Inverter.0.PwrIn Value - \"WINT.Meter.Primary.Inverter.0.PwrOut\" \"Winterthur\" \"Primary\" \"0\" \"Power Out\" WINT.Meter.Primary.Inverter.0.PwrOut/Value WINT.Meter.Primary.Inverter.0.PwrOut Value - \"WINT.Meter.Secondary.Inverter.0.PwrIn\" \"Winterthur\" \"Secondary\" \"0\" \"Power In\" WINT.Meter.Secondary.Inverter.0.PwrIn/Value WINT.Meter.Secondary.Inverter.0.PwrIn Value - \"WINT.Meter.Secondary.Inverter.0.PwrOu\" \"Winterthur\" \"Secondary\" \"0\" \"Power Out\" WINT.Meter.Secondary.Inverter.0.PwrOut/Value WINT.Meter.Secondary.Inverter.0.PwrOut Value Example: Data records that reflect real-world assets Instead of grouping by data item id, let us group by metadata. This example uses: the Field s for Site, Meter, and Inverter metadata as the data view\u0027s .GroupingFields the Field for Measurement metadata as the data item FieldSet \u0027s .IdentifyingField { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-pi-inverter AND (Site:Rosemont OR Site:Winterthur)\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ], \"IdentifyingField\": { \"Source\": \"Metadata\", \"Keys\": [ \"Measurement\" ], \"Label\": \"{IdentifyingValue} {Key}\" } } ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Meter\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Inverter\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ] } The resulting data mappings reflect the data on a per-inverter basis, mirroring the physical asset: Timestamp Site Meter Inverter Power In Value Power Out Value - \"Rosemont\" \"Primary\" \"0\" ROSE.Meter.Primary.Inverter.0.PwrIn/Value ROSE.Meter.Primary.Inverter.0.PwrIn Value ROSE.Meter.Primary.Inverter.0.PwrOut/Value ROSE.Meter.Primary.Inverter.0.PwrOut Value - \"Rosemont\" \"Primary\" \"1\" ROSE.Meter.Primary.Inverter.1.PwrIn/Value ROSE.Meter.Primary.Inverter.1.PwrIn Value ROSE.Meter.Primary.Inverter.1.PwrOut/Value ROSE.Meter.Primary.Inverter.1.PwrOut Value - \"Winterthur\" \"Primary\" \"0\" WINT.Meter.Primary.Inverter.0.PwrIn/Value WINT.Meter.Primary.Inverter.0.PwrIn Value WINT.Meter.Primary.Inverter.0.PwrOut/Value WINT.Meter.Primary.Inverter.0.PwrOut Value - \"Winterthur\" \"Secondary\" \"0\" WINT.Meter.Secondary.Inverter.0.PwrIn/Value WINT.Meter.Secondary.Inverter.0.PwrIn Value WINT.Meter.Secondary.Inverter.0.PwrOut/Value WINT.Meter.Secondary.Inverter.0.PwrOut Value Note: Grouping by Meter and Inverter overcomes the differences across Sites: not every site has a Secondary meter, and not every Meter has the same number of Inverters. This is not a problem. Associating data items with each other Another use of grouping fields is to \"join\" the data items returned by different queries, such as adding weather data for each power inverter. Example: Adding weather data to the real-world assets This example includes two actions: Add a second Query for \"site weather\" Add a new FieldSet for the data items from the \"site weather\" query, with Field s for \"SolarRadiation\" and \"Temperature\" { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-pi-inverter AND (Site:Rosemont OR Site:Winterthur)\" }, { \"Id\": \"site weather\", \"Kind\": \"Stream\", \"Value\": \"TypeId:docs-omf-weather* AND (Site:Rosemont OR Site:Winterthur)\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ], \"IdentifyingField\": { \"Source\": \"Metadata\", \"Keys\": [ \"Measurement\" ], \"Label\": \"{IdentifyingValue} {Key}\" } }, { \"QueryId\": \"site weather\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\", \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ] } ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Meter\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Inverter\" ], \"Label\": \"{IdentifyingValue} {Key}\" } ] } This \"join\" works because inverters and weather stations have common metadata: Site . Timestamp Site Meter Inverter Power In Value Power Out Value SolarRadiation Temperature - \"Rosemont\" \"Primary\" \"0\" ROSE.Meter.Primary.Inverter.0.PwrIn/Value ROSE.Meter.Primary.Inverter.0.PwrIn Value ROSE.Meter.Primary.Inverter.0.PwrOut/Value ROSE.Meter.Primary.Inverter.0.PwrOut Value WS_ROSE/SolarRadiation WS_ROSE SolarRadiation WS_ROSE/Temperature WS_ROSE Temperature - \"Rosemont\" \"Primary\" \"1\" ROSE.Meter.Primary.Inverter.1.PwrIn/Value ROSE.Meter.Primary.Inverter.1.PwrIn Value ROSE.Meter.Primary.Inverter.1.PwrOut/Value ROSE.Meter.Primary.Inverter.1.PwrOut Value WS_ROSE/SolarRadiation WS_ROSE SolarRadiation WS_ROSE/Temperature WS_ROSE Temperature - \"Winterthur\" \"Primary\" \"0\" WINT.Meter.Primary.Inverter.0.PwrIn/Value WINT.Meter.Primary.Inverter.0.PwrIn Value WINT.Meter.Primary.Inverter.0.PwrOut/Value WINT.Meter.Primary.Inverter.0.PwrOut Value WS_WINT/SolarRadiation WS_WINT SolarRadiation WS_WINT/AmbientTemperature WS_WINT AmbientTemperature - \"Winterthur\" \"Secondary\" \"0\" WINT.Meter.Secondary.Inverter.0.PwrIn/Value WINT.Meter.Secondary.Inverter.0.PwrIn Value WINT.Meter.Secondary.Inverter.0.PwrOut/Value WINT.Meter.Secondary.Inverter.0.PwrOut Value WS_WINT/SolarRadiation WS_WINT SolarRadiation WS_WINT/AmbientTemperature WS_WINT AmbientTemperature"
                                                                             },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Queries.html":  {
                                                                                "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Queries.html",
                                                                                "title":  "Define queries",
                                                                                "keywords":  "Define queries Queries determine what data items are included in a data view. Query Each Query must be uniquely identified with an .Id . The identifier should be meaningful. The query\u0027s results will be referenced by this identifier when you include fields in the data view. The query text is the same as the corresponding data item\u0027s query syntax. For example, queries of kind Stream use stream query syntax and queries of kind Asset use asset query strings . Property Type Optionality Default Details Id string Required Unique identifier. Used by FieldSet to link to the query\u0027s results. Kind DataItemResourceType Optional Stream Type of resource to be queried. Value string Optional null A query for OCS resources in the corresponding query syntax. Using queries Querying data items of differing nature To include data items of completely different nature (like power inverters and weather stations), use one query for each. For example: \"Queries\": [ { \"Id\": \"inverter power measurements\", \"Kind\": \"Stream\", \"Value\": \"inverter:* AND measurement:power*\" }, { \"Id\": \"weather stations\", \"Kind\": \"Stream\", \"Value\": \"tags:weather\" } ] Using separate queries means the data items will be available in separate field sets. This is good, because a power inverter has completely different fields versus a weather station. Querying data items of a common nature In the example scenario, streams that originate from an OSIsoft PI System represent only one fundamental measurement (e.g. Power In), unlike the more general case where the stream may represent several measurements (e.g. Temperature, Solar Radiation, and Cloud Cover). This means that multiple streams refer to the same physical or logical asset. In the example scenario, each power inverter is associated with two streams. It makes sense to structure our query around the physical asset, returning all \"power*\" measurements of all inverters: \"Queries\": [ { \"Id\": \"inverter power measurements\", \"Kind\": \"Stream\", \"Value\": \"inverter:* AND measurement:power*\" } ] These streams will be available in one single field set. This is good, because our data view can operate in terms of physical assets, and not be bound by how the stream data was recorded. Asset queries Users can create a data view by querying directly for assets, as long as the assets have stream references defined. An asset query looks identical to a stream query with the exception that query kind (set using the DataItemResourceType enumeration ) is equal to Asset, and query value uses asset search syntax . \"Queries\": [ { \"Id\": \"inverter power measurements\", \"Kind\": \"Asset\", \"Value\": \"Metadata/Name:Inverter\" \"Metadata Name:Inverter\" } ] Note that query kind defaults to Stream if not included in the query definition. A single query cannot contain both streams and assets. However, a single data view can contain both stream queries and asset queries. \"Queries\": [ { \"Id\": \"inverter power measurements\", \"Kind\": \"Asset\", \"Value\": \"Metadata/Name:Inverter\" \"Metadata Name:Inverter\" }, { \"Id\": \"weather stations\", \"Kind\": \"Stream\", \"Value\": \"tags:weather\" } ]"
                                                                            },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Quick_Start_Define_a_Data_View.html":  {
                                                                                                       "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Quick_Start_Define_a_Data_View.html",
                                                                                                       "title":  "Define a data view",
                                                                                                       "keywords":  "Define a data view The DataView object is a declarative query and shape for OCS data. This section describes the DataView object. See the Data View API section for the corresponding API routes. At times, this section makes reference to ways the view resolves into further resources, such as the collection of data items found by each data item query. See the Resolved Data View and Resolved Data View API sections for details. General concepts You define multiple aspects of a data view when you define it, including data items and their organization, grouping, and shaping. Define a data view identifier A data view must have a unique identifier. It may have a friendly name and description. If a friendly name is not specified, the identifier will be used as the data view\u0027s name. Include data items One or more queries determine the set of data items (such as streams and assets) that the data view will include. Each Query should represent a collection of like data items. Use separate queries to include data items that represent very different items, such as power inverters and weather stations. Include data fields Information from, or about, those data items must be included explicitly in the data view as Fields within DataFields or GroupingFields . By default, a data view includes no fields, except the default IndexField . The fields that are available for use are exposed as a \"resolved\" resource, Available Field Sets . It is recommended to use or adapt those fields instead of defining new fields. Individual fields are organized into DataFieldSets and GroupingFields . Group the data items Data items may be grouped , which amounts to grouping or partitioning them by one or more field values. To group data items in a data view, define one or more fields as .GroupingFields of the data view. This is one way of producing a meaningful, consumable shape of data. Organize the data fields Field sets and fields resolve in the order they are defined. They may be re-ordered. Within each group, a field set may be associated with multiple data items. It is often necessary to disambiguate these items. If a group contains multiple data items from the same query, you may wish to identify those data items so that they are not ambiguous and so they will be aligned across groups. Items can be disambiguated by specifying an .IdentifyingField . An identifying field is a field that differentiates the data items within a group, such as the value of Measurement metadata (i.e., the data items are identified by what they measure). Identifying data items also allows the data views engine to \"align\" them across groups, since it is clear, for example, that streams measuring Power Out and streams measuring Power In are alike. Ensure that each data field\u0027s label includes the {IdentifyingValue} token so the field labels are unique. The default field labels already include it. Include the index field The field used for indexing. If not specified, a default value with a label of \"Timestamp\" is applied. If specified, a label is required. Field source and keys are not applicable for index field. Define index type and default range Data views currently operate on timestamped data, which is data indexed by a DateTime property. This is reflected by the .IndexTypeCode of the DataView, whose value must be \"DateTime\". Default values may be defined for the start index, end index, and/or and or interval used when data view data is queried. Define data view shape Data views may be set to resolve as standard shape or narrow shape. Standard shape resolves fields similar to how they are defined. Narrow shape pivots the fields vertically, resulting in a view whose schema is independent of what data items are resolved by the data view. Narrow shape may be used when an invariant output schema is required. Data view properties The following table lists the properties of a DataView : Property Type Optionality Default Details Id string Required Unique indentifier Name string Optional value of Id Friendly name Description string Optional null Longer description of the view IndexField Field Optional { Label:\"Timestamp\" } The field used for indexing. If unspecified a field labeled \"Timestamp\" is included. Queries Query[] Optional [ ] Queries for OCS resources (such as streams and assets) to include in the view. This is the starting point when defining a data view. Each Query should represent a collection of like data items. To include data items that represent very different items (e.g. solar inverters and weather), use separate queries. DataFieldSets FieldSet[] Optional [ ] The sets of fields included in the data view. Often copied or adapted from the view\u0027s available field sets, which are exposed in a resolved resource. GroupingFields Field[] Optional [ ] Fields by which the data items are partitioned/grouped. partitioned grouped. DefaultStartIndex string Optional null The default value of StartIndex used when querying the data view data if none is specified. DefaultEndIndex string Optional null The default value of EndIndex used when querying the data view data if none is specified. DefaultInterval string Optional null The default value of Interval used when querying the data view data if none is specified. IndexTypeCode SdsTypeCode Optional DateTime The name of the index data type. DateTime is the currently supported index type. Shape DataViewShape Optional Standard Data views may be set to resolve as standard shape or narrow shape. Narrow shape may be used when an invariant output schema is required. Rules for Id property Is not case sensitive, but case is preserved Can contain spaces Cannot contain forward slash (\"/\") (\" \") Can contain a maximum of 100 characters Related object types The following sections describe the classes and enumerations used when defining data views. Query A query for OCS resources to include in the view. Property Type Optionality Default Details Id string Required Unique identifier. Used by FieldSet to link to the query\u0027s results. Kind DataItemResourceType Optional Stream Type of resource to be queried. Value string Optional null A query for OCS resources in the corresponding query syntax. For example, a query for streams must be in SDS query syntax. A null or empty query will not match any data items. DataItemResourceType enumeration The DataItemResourceType enumeration specifies the OCS resource type included in the data view query. Name Enumeration Id Details Stream 1 SDS streams Asset 2 Assets FieldSet A set of fields included in the data view, sharing a common role and query. One DataView is likely to include one FieldSet per query. Property Type Optionality Default Details QueryId string Required Must correspond to a query defined in the data view. DataFields Field[] Optional [ ] Data fields to include in the data view. Often copied or adapted from the view\u0027s available field sets, which are exposed in a resolved resource. IdentifyingField Field Optional null A field by which to tell the data items apart, within each group. Any field from field sources FieldSource.Id , FieldSource.Name , FieldSource.Metadata and FieldSource.Tags can be used as an identifying field. Field An individual piece of information, such as a property of an SDS stream, an asset stream reference, or metadata of that stream or asset. All sources except FieldSource.NotApplicable can be used as data fields. Fields from sources FieldSource.Id , FieldSource.Name , FieldSource.Metadata and FieldSource.Tags can be used as grouping fields and identifying fields. Some sources are used in conjunction with the Keys property (see below). Property Type Optionality Default Details Source FieldSource Optional NotApplicable Identifies the .Source of the field\u0027s values (not applicable for an index field). See the FieldSource enumeration section in this topic for details. Keys String[] Optional [ ] Used for sources FieldSource.PropertyId , FieldSource.PropertyName , FieldSource.Metadata and FieldSource.Tags , e.g. to map to specific data item properties by id. If more than one key is specified, they are matched as exclusive-or. A key has to be a non-null value. StreamReferenceNames String[] Optional [ ] Identifies the stream reference name when referencing an asset property. StreamReferenceNames only applies to source FieldSource.PropertyId . If more than one key is specified, they are matched as exclusive-or. A key has to be a non-null value. Label string Optional null Friendly name for the field. Certain tokens have special meaning: one of these, {IdentifyingValue}, is included in the suggested labels of AvailableFieldSets. Tokens that do not resolve are \"\" (empty string). The label is required in a field for all usages except in an identifying field. Label is trimmed of whitespace when used to identify field mappings. IncludeUom bool Optional false Specifies whether to include the unit of measure for this field as an additional field mapping in the resolved data view. FieldSource enumeration For fields that derive data from a data item (e.g. a stream or asset), the FieldSource enumeration specifies the part of that data item that a Field resolves to. Some sources require one or more .Keys to be specified on the field, such as PropertyId , in which a key is the id of a desired property. Name Enumeration Id Keyed Details NotApplicable 0 No FieldSource is not applicable for an index field Id 1 No The id of the data item Name 2 No The name of the data item PropertyId 3 Yes Data from a property, found by id PropertyName 4 Yes Data from a property, found by name Metadata 5 Yes Value of the data item metadata, found by key Tags 6 Yes Data item tags matching the collection provided SdsTypeCode enumeration SdsTypeCode enumeration is the name of a data type. It is used when defining a data view, where the only supported .IndexTypeCode is \"DateTime\". See Sds documentation for details. DataViewShape enumeration DataViewShape enumeration describes possible output shapes for a data view. Name Enumeration Id Details Standard 0 Fields are resolved into a shape similar to how they were defined. This is the recommended shape unless specific needs dictate. Narrow 1 Fields are pivoted vertically, resulting in a view whose schema is independent of what data items are resolved by the data view."
                                                                                                   },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Rec_Workflow.html":  {
                                                                                     "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Rec_Workflow.html",
                                                                                     "title":  "Recommended workflow: Define a data view",
                                                                                     "keywords":  "Recommended workflow: Define a data view This is an introduction to the recommended workflow for defining data views. The following sections show these concepts in action. Designing and tweaking a data view is expected to be an iterative process. You are not expected to \"get it right the first time,\" nor to be an expert at your OCS configuration such as available streams and assets. Data views provide an interactive way to select, identify, and arrange the data you and your applications need. There are three main steps required to define a data view: Including data items (such as streams and assets) Including specific data fields Arranging them within the data view. This is not a one-way street. You are likely to keep adjusting the data fields included in the view even after you have begun working on how the fields are arranged in the data view. Procedure: Define a data view This section presents the main concepts behind creating data views. It is assumed that you are working with streams and assets as described in the Stream examples and Asset examples . The data views API uses the same authentication scheme as the Sequential Data Store. Create a data view Very little information is required to create a new data view. In fact, if you request that the system generate an identifier for the new data view, no information at all is necessary. However, it is recommended to specify a meaningful .Id , because the identifier cannot be changed later without recreating the data view. All other properties are modifiable. This data view does not accomplish anything yet, but it\u0027s a starting point. Action POST /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart { \"Id\": \"quickstart\" } Expected result A data view with very few properties populated: .Id , .Name , IndexField (default: { \"Label\": \"Timestamp\" } ), .IndexTypeCode (default: \"DateTime\" ), Shape (default: DataViewShape.Standard , which as a string is \"Standard\" ). HTTP 201 Created { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } The .Queries property is empty, [ ] . We will address that soon. Retrieve the data view To access the data view again, it is available via the GET verb: Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Expected result HTTP 200 OK { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Add a query for data items Creating a data view begins with including some data items. This example will use SDS Streams. Action Use the result of the previous step as the starting point. All following steps will involve modifying the data view definition, or seeing the effects of those modifications. Add an item to the array of .Queries : { \"Id\": \"weather\", Kind: \"Stream\", \"Value\":\"*weather*\" } PUT /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Expected result HTTP 204 No Content View items found by the query Data views resolve on a per user basis, executing the queries you defined. The results are available in several ???resolved??? resources. Action ??? Page through the data items found by the query GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Resolved/DataItems/weather  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Resolved DataItems weather Expected result An array of the data items matching the query, whose index type is \"DateTime\" (matching the Data View???s IndexTypeCode) HTTP 200 OK { \"TimeOfResolution\": \"(a timestamp in ISO8601 format)\", \"Items\": [ { \"Id\": \"WS_BILT\", \"Name\": \"WS_BILT\", \"TypeId\": \"docs-omf-weather-gen1\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"High Resolution\", \"Gen1\" ], \"Metadata\": { \"Site\": \"Biltmore\" }, \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"Solar Radiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false } ] }, { \"Id\": \"WS_ROSE\", \"Name\": \"WS_ROSE\", \"TypeId\": \"docs-omf-weather-gen1\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"Low Resolution\", \"Gen1\" ], \"Metadata\": { \"Site\": \"Rosecliff\" }, \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"Solar Radiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false } ] }, { \"Id\": \"WS_WINT\", \"Name\": \"WS_WINT\", \"TypeId\": \"docs-omf-weather-gen2\", \"ResourceType\": \"Stream\", \"Tags\": [ \"Weather\", \"High Resolution\", \"Gen2\" ], \"Metadata\": { \"Site\": \"Winterthur\" }, \"DataItemFields\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"TypeCode\": \"DateTime\", \"IsKey\": true }, { \"Id\": \"SolarRadiation\", \"Name\": \"Solar Radiation\", \"TypeCode\": \"Int32\", \"IsKey\": false }, { \"Id\": \"AmbientTemperature\", \"Name\": \"Ambient Temperature\", \"TypeCode\": \"Double\", \"IsKey\": false }, { \"Id\": \"CloudCover\", \"Name\": \"Cloud Cover\", \"TypeCode\": \"Int32\", \"IsKey\": false } ] } ] } Action ??? Page through the ineligible data items found by the query GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Resolved/IneligibleDataItems/weather  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Resolved IneligibleDataItems weather Expected result An array of the data items matching the query, but whose index type is not \"DateTime\" and thus not eligible for inclusion in the data view. With the example streams, this collection is empty. HTTP 200 OK { \"TimeOfResolution\": \"(a timestamp in ISO 8601 format)\", \"Items\": [] } View fields available to include in the data view Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Resolved/AvailableFieldSets  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Resolved AvailableFieldSets Expected result A field set pointing to the query identified by \"weather\". Assuming some data items were retrieved, this field set shows that attributes of the retrieved data items (id, name, tags) are available, as well as the values of all metadata and properties. HTTP 200 OK { \"TimeOfResolution\": \"(a timestamp in ISO 8601 format)\", \"Items\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"Name\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Name\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} AmbientTemperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"CloudCover\" ], \"Label\": \"{IdentifyingValue} CloudCover {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ] } ] } Include some of the available fields At this point, if you query for data, the table only contains the IndexField ??? because no fields have been included in the data view. Including fields is a deliberate action, albeit one that is intended to be easy. Action For ease, grab all of the field sets that are available. Set the data view???s DataFieldSets property as the contents of the AvailableFieldSets response. PUT /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"Name\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Name\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} AmbientTemperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"CloudCover\" ], \"Label\": \"{IdentifyingValue} CloudCover {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" }, { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ], }, ], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Expected Result HTTP 204 No Content Now, if we return to the available field sets, all data fields are used so none are available. Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Resolved/AvailableFieldSets  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Resolved AvailableFieldSets Expected result No available data fields. { \"TimeOfResolution\": \"(a timestamp in ISO 8601 format)\", \"Items\": [] } And if we request data, the table contains multiple fields in addition to the IndexField . Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here} Expected result An array of json values similar to: [ { \"Timestamp.0\": \"2019-10-21T18:00:00Z\", \"Id.1\": \"WS_BILT\", \"Name.2\": \"WS_BILT\", \"AmbientTemperature.3\": null, \"CloudCover.4\": null, \"SolarRadiation.5\": 165, \"Temperature.6\": 33.589619124193831, \"Site.7\": \"Biltmore\", \"Tags.8\": \"Weather, High Resolution, Gen1\", \"Id.9\": \"WS_ROSE\", \"Name.10\": \"WS_ROSE\", \"AmbientTemperature.11\": null, \"CloudCover.12\": null, \"SolarRadiation.13\": 132, \"Temperature.14\": 14.537369185607899, \"Site.15\": \"Rosecliff\", \"Tags.16\": \"Weather, Low Resolution, Gen1\", \"Id.17\": \"WS_WINT\", \"Name.18\": \"WS_WINT\", \"AmbientTemperature.19\": 1.0805517883941373, \"CloudCover.20\": 2, \"SolarRadiation.21\": 108, \"Temperature.22\": null, \"Site.23\": \"Winterthur\", \"Tags.24\": \"Weather, High Resolution, Gen2\" }, ] There was ambiguity in the field mapping identifiers, so the data views engine suffixed each field mapping id ordinally. The suffixing (to ensure uniqueness) is done for the sake of client behavior, as it is not expected that ambiguity is an acceptable outcome. The remaining steps show two approaches for disambiguating the content of a data view. Action ??? Want csv? Resubmit the data query with an additional query parameter, \u0026form=csvh GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here}\u0026form=csvh Expected result Rows of CSV values similar to: Timestamp.0,Id.1,Name.2,AmbientTemperature.3,CloudCover.4,SolarRadiation.5,Temperature.6,Site.7,Tags.8,Id.9,Name.10,AmbientTemperature.11,CloudCover.12,SolarRadiation.13,Temperature.14,Site.15,Tags.16,Id.17,Name.18,AmbientTemperature.19,CloudCover.20,SolarRadiation.21,Temperature.22,Site.23,Tags.24 2019-10-21T18:00:00.0000000Z,WS_BILT,WS_BILT,,,165,33.58961912,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,132,14.53736919,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,1.080551788,2,108,,Winterthur,\"Weather, High Resolution, Gen2\" 2019-10-21T20:00:00.0000000Z,WS_BILT,WS_BILT,,,157,32.41209639,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,139,14.76498991,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,2.501105722,3,109,,Winterthur,\"Weather, High Resolution, Gen2\" Group the data view One way to disambiguate the data items is to ???group??? them, which amounts to partitioning them based on a value. For example, metadata:Site as the grouping field might yield groups of Biltmore, Rosecliff, and Winterthur, each containing the data items associated with that Site. You may use multiple grouping fields. This is effectively ???group by X then Y then Z??? Grouping fields are a property of the data view, and are an array of Field objects. This means the same Field objects contained in the available or included field sets may be reused directly as grouping fields. Action To group by metadata, copy the field in the DataView object with { Source: ???Metadata???, Keys: [ \"Site\" ] } , and add it to the array of .GroupingFields . PUT /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"Name\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Name\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} AmbientTemperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"CloudCover\" ], \"Label\": \"{IdentifyingValue} CloudCover {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ], }, ], \"GroupingFields\": [ { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" } ], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Expected result HTTP 204 No Content Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here} Expected result Data that looks a bit different now. In table terms, the data table would be ultra-skinny instead of ultra-wide. HTTP 200 OK [ { \"Timestamp\": \"2019-10-21T18:00:00Z\", \"Site\": \"Biltmore\", \"Id\": \"WS_BILT\", \"Name\": \"WS_BILT\", \"AmbientTemperature\": null, \"CloudCover\": null, \"SolarRadiation\": 165, \"Temperature\": 33.589619124193831, \"Tags\": \"Weather, High Resolution, Gen1\" }, ... (rest of the values for Site:Biltmore), then ... { \"Timestamp\": \"2019-10-21T18:00:00Z\", \"Site\": \"Rosecliff\", \"Id\": \"WS_ROSE\", \"Name\": \"WS_ROSE\", \"AmbientTemperature\": null, \"CloudCover\": null, \"SolarRadiation\": 132, \"Temperature\": 14.537369185607899, \"Tags\": \"Weather, Low Resolution, Gen1\" }, ... (rest of the values for Site:Rosecliff), then ... { \"Timestamp\": \"2019-10-21T18:00:00Z\", \"Site\": \"Winterthur\", \"Id\": \"WS_WINT\", \"Name\": \"WS_WINT\", \"AmbientTemperature\": 1.0805517883941373, \"CloudCover\": 2, \"SolarRadiation\": 108, \"Temperature\": null, \"Tags\": \"Weather, High Resolution, Gen2\" }, ... (rest of the values for Site:Winterthur) ] Note: The Data Views product does not assume an intention for ultra-skinny output. Identify data items A different and complementary way of disambiguating the data items is to ???identify??? them within the field set. This is also useful for aligning data items across groups. Imagine if each site had an additional stream from a backup weather station: Timestamp Site Primary Temperature Primary SolarRadiation Backup Temperature Backup SolarRadiation Biltmore Rosecliff Winterthur The data views engine must be told how the streams align across sites. Here, it makes sense to align them by which measurement they represent: Primary or Backup . Action Move the field used as GroupingField over to being the ???.IdentifyingField??? of the weather data items FieldSet . PUT /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"Id\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Id\" }, { \"Source\": \"Name\", \"Keys\": [], \"Label\": \"{IdentifyingValue} Name\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\" ], \"Label\": \"{IdentifyingValue} AmbientTemperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"CloudCover\" ], \"Label\": \"{IdentifyingValue} CloudCover {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"Temperature\" ], \"Label\": \"{IdentifyingValue} Temperature {Uom} {SummaryType}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" ], \"IdentifyingField\": { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" } }, ], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Expected result HTTP 204 No Content Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here} Expected result We???re back to a wide table, but the field ids are now distinct. The suggested/default suggested default values of the Available Fields??? .Label property includes {IdentifyingValue}, so if using those defaults, the impact of adding an identifying field is immediately clear. HTTP 200 OK [ { \"Timestamp\": \"2019-10-21T18:00:00Z\", \"Biltmore Id\": \"WS_BILT\", \"Biltmore Name\": \"WS_BILT\", \"Biltmore AmbientTemperature\": null, \"Biltmore CloudCover\": null, \"Biltmore SolarRadiation\": 165, \"Biltmore Temperature\": 33.589619124193831, \"Biltmore Tags\": \"Weather, High Resolution, Gen1\", \"Rosecliff Id\": \"WS_ROSE\", \"Rosecliff Name\": \"WS_ROSE\", \"Rosecliff AmbientTemperature\": null, \"Rosecliff CloudCover\": null, \"Rosecliff SolarRadiation\": 132, \"Rosecliff Temperature\": 14.537369185607899, \"Rosecliff Tags\": \"Weather, Low Resolution, Gen1\", \"Winterthur Id\": \"WS_WINT\", \"Winterthur Name\": \"WS_WINT\", \"Winterthur AmbientTemperature\": 1.0805517883941373, \"Winterthur CloudCover\": 2, \"Winterthur SolarRadiation\": 108, \"Winterthur Temperature\": null, \"Winterthur Tags\": \"Weather, High Resolution, Gen2\" }, ... ] Consolidate data fields There is a problem with this data view: the Gen1 Weather streams have a \"Temperature\" property but the Gen2 Weather streams have renamed it to \"AmbientTemperature\". The data view has fields for both, but for each stream \"Temperature\" or \"AmbientTemperature\" is null. This is undesirable since the fields are semantically identical and should not be separate fields in the data view. Find the Field associated with \"AmbientTemperature\". To the Field \u0027s .Keys array, add \"Temperature\": { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\", \"Temperature\" ], \"Label\": \"{IdentifyingValue} {Key}\" }, Now that field will match to either \"Temperature\" or \"AmbientTemperature\". Remove the Field associated only with \"Temperature\". You can also remove the Fields associated with data item Id and Name. These are not providing any additional useful information. Action PUT /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart { \"Id\": \"quickstart\", \"Name\": \"quickstart\", \"IndexField\": { \"Label\": \"Timestamp\" }, \"Queries\": [ { \"Id\": \"weather\", \"Kind\": \"Stream\", \"Value\":\"*weather*\" } ], \"DataFieldSets\": [ { \"QueryId\": \"weather\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"AmbientTemperature\", \"Temperature\" ], \"Label\": \"{IdentifyingValue} AmbientTemperature {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"CloudCover\" ], \"Label\": \"{IdentifyingValue} CloudCover {Uom} {SummaryType}\" }, { \"Source\": \"PropertyId\", \"Keys\": [ \"SolarRadiation\" ], \"Label\": \"{IdentifyingValue} SolarRadiation {Uom} {SummaryType}\" }, { \"Source\": \"Tags\", \"Keys\": [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\", ], \"Label\": \"{IdentifyingValue} Tags\" } ], \"IdentifyingField\": { \"Source\": \"Metadata\", \"Keys\": [ \"Site\" ], \"Label\": \"{IdentifyingValue} Site {Uom}\" } }, ], \"GroupingFields\": [], \"IndexTypeCode\": \"DateTime\", \"Shape\": \"Standard\" } Expected Result HTTP 204 No Content Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here} Expected Result HTTP 200 OK [ { \"Timestamp\": \"2019-10-21T18:00:00Z\", \"Biltmore AmbientTemperature\": 33.589619124193831, \"Biltmore CloudCover\": null, \"Biltmore SolarRadiation\": 165, \"Biltmore Tags\": \"Weather, High Resolution, Gen1\", \"Rosecliff AmbientTemperature\": 14.537369185607899, \"Rosecliff CloudCover\": null, \"Rosecliff SolarRadiation\": 132, \"Rosecliff Tags\": \"Weather, Low Resolution, Gen1\", \"Winterthur AmbientTemperature\": 1.0805517883941373, \"Winterthur CloudCover\": 2, \"Winterthur SolarRadiation\": 108, \"Winterthur Tags\": \"Weather, High Resolution, Gen2\" } ... ] Further steps The API is designed to encourage trial-and-error. We encourage you to experiment with other ways to represent this data, and to incorporate information about the solar inverters at each site."
                                                                                 },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Summaries.html":  {
                                                                                  "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Summaries.html",
                                                                                  "title":  "Display calculated summaries",
                                                                                  "keywords":  "Display calculated summaries Data views can be configured to show summary calculations for streams and assets. Summary calculations are defined as the summary types enumerated in SdsSummaryType . This topic describes how to include summaries in a data view. Available summaries Not all properties have summaries. For example, a string property has no Mean value. If a data item field requests a summary that is unavailable these values will be null in the view data. Include summaries in a data view Users may include any mix of interpolated or summary data fields in a data view. Multiple summary types for a stream property or an asset are requested by defining a field for each desired summary type. Units of measure can also be included for a summary, if applicable, not all summaries do (e.g. Kurtosis and Skewness). In the data view a data field defines the type of summary with the SummaryType property as SdsSummaryType . Another property, SummaryDirection, allows the direction of the summary to be defined as SummaryDirection . SummaryDirection controls whether the start or end index of the summary is used by the data view to calculate the summary values. If the SummaryType is \"None\", the SummaryDirection (if specified) will be accepted but ignored. If the SummaryType is not \"None\", and SummaryDirection is not specified, it will be initialized to \"Forward\". The label tokens: {SummaryType} and {SummaryDirection} will resolve in the field mappings and show in dataview table header columns for a summary field. Example: Include summary in data view This simple example shows the inclusion of a summary data field for a SummaryType set to \"Mean\" with \"IncludeUom\" set to \"true\". Since the SummaryDirection is not specified, the default value of \"Forward\" is used. The label includes two summary tokens that will resolve to the summary type and direction in the data view header. { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"id:BILT.Meter.Primary.Inverter.0.PwrIn\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} Value {SummaryType} {SummaryDirection}\", \"SummaryType\": \"Mean\", \"IncludeUom\": \"true\" } ] } ] } The resulting data view in standard mode: Timestamp Value Mean Forward Value Mean Forward Uom 2020-11-06T08:00:00Z .899 kW The resulting data view in narrow mode: Timestamp Field Value Uom 2020-11-06T08:00:00Z Value Mean Forward .899 kW Example: Impact of summary direction This simple example shows the impact of SummaryDirection, and how changing it will shift the summary value calculation. Three mini data view results are shown, where SummaryType and SummaryDirection are varied. Example #1: SummaryType = \"None\" Timestamp Value 2020-11-01T00:01:00Z 10 2020-11-01T00:02:00Z 100 2020-11-01T00:03:00Z 1000 Example #2: SummaryType = \"Mean\" \u0026 SummaryDirection = \"Forward\" In the \"Forward\" direction, the start index anchors the calculation direction. The first mean value of 55, is the mean of all the values between the first and second index. The second mean value of 550 is the mean of all the values between the second and third index. Timestamp Value Mean Forward 2020-11-01T00:01:00Z 55 2020-11-01T00:02:00Z 550 2020-11-01T00:03:00Z 1000 Example #3: SummaryType = \"Mean\" \u0026 SummaryDirection = \"Backward\" In the \"Backward\" direction, the last index anchors the calculation direction. The last mean value of 550, is the mean value of all the values between the last and second index. The second mean value of 55 is the mean value of all the values between the second and first index. Timestamp Value Mean Backward 2020-11-01T00:01:00Z 10 2020-11-01T00:02:00Z 55 2020-11-01T00:03:00Z 550"
                                                                              },
    "Content_Portal/Documentation/DataViews/DefineaDataView/Units_of_Measure.html":  {
                                                                                         "href":  "Content_Portal/Documentation/DataViews/DefineaDataView/Units_of_Measure.html",
                                                                                         "title":  "Display units of measure",
                                                                                         "keywords":  "Display units of measure Data views can be configured to show the units of measure (Uom) from the underlying data source. This topic describes how to see the effective units of measure within a resolved data view, as well as the different options to include them in the data set itself. Units of measure in resolved data view Units of measure are shown on each data item field , as well as any corresponding data mappings where that data item field is used in the data view. If a unit of measure is not present in the underying data source, the Uom property is null. If the unit of measure is consistent across all groups, then that unit of measure is reported on the field mapping itself. Otherwise, the Uom property of the field mapping is null. Note that in the resolved resources, units of measure are referenced by id . Units of measure in data view Data views can be optionally configured to show units of measure within the data set. Units of measure are then directly visible to consumers of the data set. This is useful for consumers who are unable to examine the resolved data view and rely only on the data set. There are two ways to include units of measure on a per-field basis: as an additional field or within the field\u0027s label. Units of measure are abbreviated when they appear in the data set. That is, the abbreviation of the unit of measure is used: cubic meter per second is shown as a more consumer-friendly m3/s m3 s . Show units of measure within the data set To show the units of measure within the data set, set the IncludeUom property of the field to true . This applies to both data fields and group fields. In this case, the field will resolve an additional, \"sister\" field mapping whose label is suffixed with the string \"Uom\u0027. Example This simple example shows the IncludeUom property of a data field is set to true . { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"id:BILT.Meter.Primary.Inverter.0.PwrIn\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} Value\", \"IncludeUom\": \"true\" } ] } ] } The resulting data view in standard mode: Timestamp Value Value Uom 2020-11-06T08:00:00Z 1.21 kW The resulting data view in narrow mode: Timestamp Field Value Uom 2020-11-06T08:00:00Z Value 1.21 kW Show units of measure in field labels The field label token {Uom} can be used to add field-level unit of measure to field labels. {Uom} is included in the default field label. If the unit of measure is consistent across all groups, {Uom} is resolved to the field-level unit of measure and displayed in the field label. Otherwise, if the unit of measure is not consistent across groups, use the alternative approach of IncludeUom . Example The following example shows how the field label token {Uom} of a data field is resolved. { \"Id\": \"quickstart\", \"Queries\": [ { \"Id\": \"inverters\", \"Kind\": \"Stream\", \"Value\": \"id:BILT.Meter.Primary.Inverter.0.PwrIn\" } ], \"DataFieldSets\": [ { \"QueryId\": \"inverters\", \"DataFields\": [ { \"Source\": \"PropertyId\", \"Keys\": [ \"Value\" ], \"Label\": \"{IdentifyingValue} Value {Uom}\", \"IncludeUom\": \"false\" } ] } ] } The resulting data view in standard mode: Timestamp Value kW 2020-11-06T08:00:00Z 1.21 The resulting data view in narrow mode: Timestamp Field Value 2020-11-06T08:00:00Z Value kW 1.21"
                                                                                     },
    "Content_Portal/Documentation/DataViews/GetDataViewData/Quick_Start_Get_Data_View_Data.html":  {
                                                                                                       "href":  "Content_Portal/Documentation/DataViews/GetDataViewData/Quick_Start_Get_Data_View_Data.html",
                                                                                                       "title":  "Get data view data",
                                                                                                       "keywords":  "Get data view data You retrieve data view data with the Data API . This topic explains the concepts and workflow to retrieve data view data. General concepts The supported mode of retrieval is interpolated values within a user-specified range. Several formats are available, such as JSON and CSV. Index All data in a data view is associated with an index value, i.e. a timestamp. If there are multiple groups in the data view, the index and grouping field values together form a unique identifier for each data record. Index type The supported index type is DateTime , as noted in Define a Data View . Date times should use ISO 8601 format and can be in either UTC or local time. Data retrieved using the Data API will be returned in UTC. Interval timespan values should be formatted using the standard timespan format, ie., d.hh:mm:ss.fffffff. Index range Three parameters control the range and granularity of data returned: Name Query-time parameter Default property Description Start index startIndex DefaultStartIndex The inclusive start boundary of the data view data End index endIndex DefaultEndIndex The inclusive end boundary of the data view data Interval interval DefaultInterval The interval between index values Default values may, optionally, be defined on the data view itself. It is not necessary to define defaults for all three properties. Index parameters may be specified at query time. These take precedence over any defaults that are set. Retrieval mode The supported mode of retrieval is interpolated . Interpolated retrieval Required index parameters when requesting interpolated data are: Start index End index Interval If one or more of these parameters is not specified at query time or as a default, the data query is not valid. Streams in SDS may be configured to have non-default interpolation and extrapolation behavior. These behaviors are observed when stream data is included in data views. Data view data is always treated as dense, even if SDS returns sparse data. See the following section on empty or missing values for details. Empty or missing values SDS stream properties may be of nullable (e.g. NullableInt32 ) or non-nullable (e.g. Int32 ) types. Data views treats all fields as nullable, as is necessary for its fundamental goal of aligning large datasets. SDS property type Corresponding data view field type Double NullableDouble NullableDouble NullableDouble If there is no value in an SDS stream for a requested index, the value of the corresponding data view fields(s) will be null . Ordering Data records are ordered first by group, in the order that the groups resolved then by index, ascending, within each group Format The view data is available in several formats. Name Id Enumeration Id Description JSON default 0 JSON object representation. An array of objects, each describing one data record. (default) Table table 1 JSON row-column representation. Includes an array describing the .Columns (corresponding to field mappings of the data view) and an array of data .Rows . Each row describes one data record. Table with header tableh 2 Similar to table . The first of the .Rows is an array of the field mapping identifiers, information that is also available in the .Columns of both table formats. CSV csv 3 Comma-separated values. Each row describes one data record. CSV with header csvh 4 Similar to csv . The first row contains the identifier of its corresponding field mapping. Paging Data retrieval operations are paged. Data for a requested index range may span multiple pages. Optimal page size is dependent both on the client and on the shape of the data view. The size of each individual record is proportional to the \"width\" of the data view, i.e. how many field mappings are resolved. Clients retrieving data views that resolve into few field mappings may wish to use a page size close to the maximum. Page size Optimal page size is dependent both on the client and on the shape of the data view. The size of each individual record is proportional to the \"width\" of the data view, i.e. how many field mappings are resolved. Clients retrieving data views that resolve into few field mappings may wish to use a page size close to the maximum. By default, data views will be returned with an optimized page size based on the size and layout of the data view. Users can see the calculated page size as a count query parameter in the Link response header (described below). The calculated page size will be included in both the first and the next page links. This default page size can be overridden, however, by providing a count query parameter. The maximum page size is 250,000. Hyperlinks When paging through data view data via the REST API, hyperlinks to the first page and next page of data are provided in the Link header. The first page header is signified by relation type of first, rel=\"first\" . The next page header is signified by rel=\"next\" . Proper use of the hyperlinks is recommended. Next page If the requested data spans into another page, the response includes a hyperlink to the next page of data. Absence of a rel=\"next\" link indicates that the data does not span past the current page. The hyperlink preserves all request parameters, while adding or updating a continuationToken . For example: Link: \u003c.../dataViews/{dataViewId}/data/interpolated?continuationToken=MjAxOC0wMS0wMVQwMDowMDoxMVo_MD90Yk1OblE_QUxXcEZBP1VEdGxIMWJROG9z\u0026count=1000\u003e; \u003c... dataViews {dataViewId} data interpolated?continuationToken=MjAxOC0wMS0wMVQwMDowMDoxMVo_MD90Yk1OblE_QUxXcEZBP1VEdGxIMWJROG9z\u0026count=1000\u003e; rel=\"next\" To retrieve the entire requested range of data, clients should continue to follow next page hyperlinks until the response does not include a next page link. This indicates that the last page has been reached. It is possible for the continuation token to become invalid during paging. This is unlikely in ordinary circumstances. However, if an independent operation triggers the data view to re-resolve differently, existing continuation tokens are no longer valid. Data requests with an invalid token are considered bad requests. Paging must be restarted from the first page. First page If the continuation token becomes invalid and paging must be restarted, clients may follow the first page hyperlink included in the Link header. The hyperlink preserves all request parameters, adding or updating the cache behavior to Preserve . This ensures that multiple parallel workers cannot endlessly \"trip\" each other. For example: Link: \u003c.../dataViews/{dataViewId}/data/interpolated?cache=Preserve\u0026count=1000\u003e; \u003c... dataViews {dataViewId} data interpolated?cache=Preserve\u0026count=1000\u003e; rel=\"first\" .NET client library Paging is handled automatically when using the .NET client library to retrieve data. Results are returned as an IAsyncEnumerable where each value is one record of data in the requested format. The actual backend page size of the request is configurable using the backingPageSize parameter. Index parameters Index parameters, such as Start Index, must remain constant while paging through a range of data. If a different range of data is desired, restart the paging operation. Parallelization To parallelize one large data retrieval operation across multiple workers, assign each worker a portion of the desired index range. Each worker should follow standard recommended paging behavior within its assigned range. The client application must then concatenate the portions in correct order. It is recommended to suppress re-resolution of the data view by specifying a cache behavior of \"preserve\" on each first-page request. Resolution behavior By default, requests for a first page of data will cause the data view to re-resolve. See the documentation on resolved data views . This ensures that the data view accounts for any data items that have been added to or removed from the underlying OCS data store. Re-resolution may be suppressed by explicitly specifying a cache behavior of \"preserve\". Requests for subsequent pages include a continuationToken . This implictly suppresses re-resolution, akin to cache \"preserve\" behavior. Field mapping maximum count Shape plays an important role in both the performance and usefulness of a data view. In order to retain this balance, a maximum threshold of 1,000 field mappings is imposed for each data view. OCS checks the field mapping count prior to constructing the data set and returns a message if the limit has been exceeded. If your data view exceeds this limit, there are several ways to shape the data view to reduce the number of field mappings generated: Use grouping fields to pivot data for like-groups into their own rows. Use identifying fields to display useful information in headers, rather than as discrete field mappings. Deselect unneeded fields to remove them as field mappings. Toggle to the narrow shape option to pivot data fields into individual rows instead of columns."
                                                                                                   },
    "Content_Portal/Documentation/DataViews/GetDataViewData/Rec_Workflow_Get.html":  {
                                                                                         "href":  "Content_Portal/Documentation/DataViews/GetDataViewData/Rec_Workflow_Get.html",
                                                                                         "title":  "Recommended workflow: Get data view data",
                                                                                         "keywords":  "Recommended workflow: Get data view data This is an introduction to the recommended workflow to get data from a data view. The following sections show how to carry out each required step. For detailed information about the source behind each data field, see the Data API reference . For detailed information about the source of each field\u0027s data, see the data view\u0027s resolved field mappings. To get data view data: Unless configured in the DataView object, you must include in the get data request the startIndex, endIndex, and interval query parameters. Specify the desired response format as csv, table-style json, or object-style json. Specify the page size. Note: If data spans into additional page(s), follow the hyperlinks in each HTTP Link header to retrieve the full requested dataset page by page. Procedure: Get Data View Data It is assumed that you are working with streams as described in the Stream examples . The data views API uses the same authentication scheme as the Sequential Data Store. Get data using defaults The default start index, end index, and interval are configured in the DataView object. If not null, the get data request must include the startIndex, endIndex, and interval query parameters. Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated Expected result An array of json values similar to: [ { \"Timestamp.0\": \"2019-10-21T18:00:00Z\", \"Id.1\": \"WS_BILT\", \"Name.2\": \"WS_BILT\", \"AmbientTemperature.3\": null, \"CloudCover.4\": null, \"SolarRadiation.5\": 165, \"Temperature.6\": 33.589619124193831, \"Site.7\": \"Biltmore\", \"Tags.8\": \"Weather, High Resolution, Gen1\", \"Id.9\": \"WS_ROSE\", \"Name.10\": \"WS_ROSE\", \"AmbientTemperature.11\": null, \"CloudCover.12\": null, \"SolarRadiation.13\": 132, \"Temperature.14\": 14.537369185607899, \"Site.15\": \"Rosecliff\", \"Tags.16\": \"Weather, Low Resolution, Gen1\", \"Id.17\": \"WS_WINT\", \"Name.18\": \"WS_WINT\", \"AmbientTemperature.19\": 1.0805517883941373, \"CloudCover.20\": 2, \"SolarRadiation.21\": 108, \"Temperature.22\": null, \"Site.23\": \"Winterthur\", \"Tags\": \"Weather, High Resolution, Gen2\", }, ... Get data for a custom range Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here} Expected result An array of json values similar to: [ { \"Timestamp.0\": \"2019-10-21T18:00:00Z\", \"Id.1\": \"WS_BILT\", \"Name.2\": \"WS_BILT\", \"AmbientTemperature.3\": null, \"CloudCover.4\": null, \"SolarRadiation.5\": 165, \"Temperature.6\": 33.589619124193831, \"Site.7\": \"Biltmore\", \"Tags.8\": \"Weather, High Resolution, Gen1\", \"Id.9\": \"WS_ROSE\", \"Name.10\": \"WS_ROSE\", \"AmbientTemperature.11\": null, \"CloudCover.12\": null, \"SolarRadiation.13\": 132, \"Temperature.14\": 14.537369185607899, \"Site.15\": \"Rosecliff\", \"Tags.16\": \"Weather, Low Resolution, Gen1\", \"Id.17\": \"WS_WINT\", \"Name.18\": \"WS_WINT\", \"AmbientTemperature.19\": 1.0805517883941373, \"CloudCover.20\": 2, \"SolarRadiation.21\": 108, \"Temperature.22\": null, \"Site.23\": \"Winterthur\", \"Tags.24\": \"Weather, High Resolution, Gen2\" }, ... Get data in a different format By default, data is returned in object-style json. Other formats are available: csv and table-style json, each with an optional header row. Action Resubmit the data query with an additional query parameter, \u0026form=csvh for csv-formatted data with a header row. GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here}\u0026form=csvh Expected result Rows of CSV values similar to: Timestamp.0,Id.1,Name.2,AmbientTemperature.3,CloudCover.4,SolarRadiation.5,Temperature.6,Site.7,Tags.8,Id.9,Name.10,AmbientTemperature.11,CloudCover.12,SolarRadiation.13,Temperature.14,Site.15,Tags.16,Id.17,Name.18,AmbientTemperature.19,CloudCover.20,SolarRadiation.21,Temperature.22,Site.23,Tags.24 2019-10-21T18:00:00.0000000Z,WS_BILT,WS_BILT,,,165,33.58961912,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,132,14.53736919,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,1.080551788,2,108,,Winterthur,\"Weather, High Resolution, Gen2\" 2019-10-21T20:00:00.0000000Z,WS_BILT,WS_BILT,,,157,32.41209639,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,139,14.76498991,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,2.501105722,3,109,,Winterthur,\"Weather, High Resolution, Gen2\" ... Get subsequent pages By default, each page includes 1000 records. If the requested data spans into another page, the response includes a hyperlink to the next page of data. Action Use the \"next\" hyperlink from the Link header to request the next page. GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here}\u0026form=csvh\u0026continuationToken=MjAxOC0wMS0wMVQwMDowMDoxMVo_MD90Yk1OblE_QUxXcEZBP1VEdGxIMWJROG9z Expected result The next page of data: Timestamp.0,Id.1,Name.2,AmbientTemperature.3,CloudCover.4,SolarRadiation.5,Temperature.6,Site.7,Tags.8,Id.9,Name.10,AmbientTemperature.11,CloudCover.12,SolarRadiation.13,Temperature.14,Site.15,Tags.16,Id.17,Name.18,AmbientTemperature.19,CloudCover.20,SolarRadiation.21,Temperature.22,Site.23,Tags.24 2019-10-21T22:00:00.0000000Z,WS_BILT,WS_BILT,,,165,33.58961912,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,132,14.53736919,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,1.080551788,2,108,,Winterthur,\"Weather, High Resolution, Gen2\" 2019-10-22T00:00:00.0000000Z,WS_BILT,WS_BILT,,,157,32.41209639,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,139,14.76498991,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,2.501105722,3,109,,Winterthur,\"Weather, High Resolution, Gen2\" ... Recover from an invalid paging session It is possible, though unlikely, for the continuation token to become invalid during paging. When this happens, paging must be restarted from the first page. Action Use the \"first\" hyperlink from the Link header to request the first page. GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Data/Interpolated  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Data Interpolated ?startIndex={your_val_here}\u0026endIndex={your_val_here}\u0026interval={your_val_here}\u0026form=csvh\u0026cache=preserve Expected result The first page of data: Timestamp.0,Id.1,Name.2,AmbientTemperature.3,CloudCover.4,SolarRadiation.5,Temperature.6,Site.7,Tags.8,Id.9,Name.10,AmbientTemperature.11,CloudCover.12,SolarRadiation.13,Temperature.14,Site.15,Tags.16,Id.17,Name.18,AmbientTemperature.19,CloudCover.20,SolarRadiation.21,Temperature.22,Site.23,Tags.24 2019-10-21T18:00:00.0000000Z,WS_BILT,WS_BILT,,,165,33.58961912,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,132,14.53736919,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,1.080551788,2,108,,Winterthur,\"Weather, High Resolution, Gen2\" 2019-10-21T20:00:00.0000000Z,WS_BILT,WS_BILT,,,157,32.41209639,Biltmore,\"Weather, High Resolution, Gen1\",WS_ROSE,WS_ROSE,,,139,14.76498991,Rosecliff,\"Weather, Low Resolution, Gen1\",WS_WINT,WS_WINT,2.501105722,3,109,,Winterthur,\"Weather, High Resolution, Gen2\" ... Explore what each data field maps to Action GET /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/DataViews/quickstart/Resolved/FieldMappings  api v1 Tenants {tenantId} Namespaces {namespaceId} DataViews quickstart Resolved FieldMappings Expected result An array of field mappings: { \"TimeOfResolution\": \"(a timestamp in ISO8601 format)\", \"Items\": [ { \"Id\": \"Timestamp.0\", \"Label\": \"Timestamp\", \"FieldKind\": \"IndexField\", \"TypeCode\": \"DateTime\", \"DataMappings\": [ { \"TypeCode\": \"DateTime\" } ] }, { \"Id\": \"Id.1\", \"Label\": \"Id\", \"FieldKind\": \"DataField\", \"TypeCode\": \"String\", \"DataMappings\": [ { \"TargetId\": \"WS_BILT\", \"TargetFieldKey\": \"WS_BILT\", \"TypeCode\": \"String\", \"FieldSetIndex\": 0, \"FieldIndex\": 0, } ] }, ... ] }"
                                                                                     },
    "Content_Portal/Documentation/DataViews/GetResolvedDataView/Resolved_Data_View.html":  {
                                                                                               "href":  "Content_Portal/Documentation/DataViews/GetResolvedDataView/Resolved_Data_View.html",
                                                                                               "title":  "Get resolved data view",
                                                                                               "keywords":  "Get resolved data view A resolved data view is used to describe the output of a data view at the time it was resolved and for the authorized user. It can provide information on what items will be in the results, how they will be grouped, what items are mapped to a particular field, what additional fields are available to be included in the data view, and data items which are ineligible for mapping. Resolved Data Views do not query or return event data. This is useful when defining a data view and when consuming it. General concepts What does resolving mean? A data view specifies .Queries to find data items, .GroupingFields (optionally) to group those data items into groups, and .FieldSets to include fields of data into the data view. Resolving the data view means the data views engine executes those queries and computes how the resulting data items will form a data view. What resolved information is available? Data items, ineligible data items, and the groups they form - OCS resources retrieved by the data view query Available field sets - fields which are present on the data items but not included in the data view Field mappings - details of the data behind each group of each field Statistics about how the view resolved These are available via the Resolved Data View API . The relevant object types are described below. Paged collections Some of this information is exposed as paged collections, which accept parameters controlling skip and count within the collection. Paged responses include a Link header, with a hyperlink to the first page of results. If the results extend into an additional page, a hyperlink to the next page will also be included in the Link header. Using these hyperlinks is the recommended method of paging. Alternatively, constructing paging links by manually incrementing the skip is allowable, though in this case it is recommended to specify cache behavior of \"preserve\". How is a data view resolved? Data views resolve on a per user basis. Data views respect the permissions on underlying data items such as streams and assets. For example, if a user does not have read access to a particular stream in SDS, then that stream is not visible from data views. As a consequence, different users may see different collections of data items resolve for a data view. This is by design. When is a data view resolved? Each data view is resolved as needed for each user: upon request of any resolved information or data view data. In certain cases, a cached version is retrieved if available. This is evident when accessing the resolved information. It is contained in ResolvedItem\u003cT\u003e/ResolvedItems\u003cT\u003e ResolvedItem\u003cT\u003e ResolvedItems\u003cT\u003e container types which have a .TimeOfResolution property. Controlling the cache behavior By default: accessing resolved information will retrieve a cached version if available: preserve the cache requesting a first page of data will cause the data view to re-resolve: refresh the cache These defaults are overridable on each API call. See the Resolved Data View API and Getting Data for details. The defaults are intended to strike a balance between predictability and freshness. When retrieving the various resolved information that is available, you will not cause regeneration (and possible changes) simply by viewing the resolved information. This is useful when diagnosing a data view that is not returning the data you expect. Invalidation If the data view is modified, any cached information is reset. The data view will be re-resolved the next time that information is requested. No guarantee is made of the durability or lifespan of cached information. It may be reset by the system for maintenance reasons. Paging through data When using the Data API to page through data view data, the cache is automatically preserved on all pages after the first. This ensures consistency while paging through view data: if the view were re-resolved between pages, it might resolve differently (e.g. new streams just added to SDS) and return unpredictable results. The documentation on Getting Data describes how the paging token helps guarantee consistency. Object types ResolvedItems Holds a collection of items that were resolved at a specific time Property Type Details Items IReadOnlyList A collection of resolved objects TimeOfResolution DateTimeOffset The time the collection of items was resolved ResolvedItem Holds an item that was resolved at a specific time. Property Type Details Item T A resolved object TimeOfResolution DateTimeOffset The time the item was resolved CacheBehavior enumeration Name Enumeration Id Description Preserve 1 Use cached resource values Refresh 2 Re-resolve the resource values DataItem An OCS resource retrieved by the data view query. Property Type Details Id string Unique identifier Name string Friendly name Description string Extended text description TypeId string The unique identifier of the data item\u0027s type ResourceType DataItemResourceType The data item resource type. Tags IReadOnlyList Tag strings assigned to the data item Metadata IReadOnlyList Metadata values assigned to the data item DataItemFields IReadOnlyList Data fields IneligibleDataItemFields IReadOnlyList Data fields assigned to the data item that are not supported by data views MetadataValue Individual metadata value from the metadata list of a DataItem . Property Type Details Name string Unique identifier Value object Static value assigned to the metadata value Description string Extended text description TypeCode SdsTypeCode The name of the metadata value\u0027s data type Uom string The metadata value\u0027s unit of measurement identifier DataItemResourceType enumeration Describes the resource type of a data item. Name Enumeration Id Description Stream 1 A stream from the Sequential Data Store Asset 2 An asset DataItemField A field of a data item where values come from. Within a data item of resource kind .Stream , this corresponds to a stream property. For a data item of resource kind .Asset , this corresponds to a property associated with an asset stream reference. Property Type Details Id string The data item field\u0027s unique identifier Name string The data item field\u0027s friendly name StreamReferenceName string The asset stream reference name. Only applies to asset property data item fields. TypeCode SdsTypeCode The name of the field\u0027s data type SummaryType SdsSummaryType The summary type calculation for the data field. SummaryDirection SummaryDirection Enumeration The direction of the summary type calculation for the data field. Uom bool The unit of measure id for the data item field IsKey bool True if the field is the primary index of the data item. False otherwise. SummaryDirection enumeration Direction used in the summary calculation. Name Enumeration Id Description Forward 1 Uses the start index for the summary calculation. Backward 2 Uses the end index for the summary calculation. Group A group of the data view. The overall collection of data items is divided into groups as a result of the .GroupingFields defined on the DataView . Property Type Details GroupingValues IReadOnlyList This groups\u0027s value of each .GroupingFields defined on the DataView DataItems IReadOnlyDictionary\u003cstring, IReadOnlyList \u003e The data items in this group GroupingValue The individual group value from the list of Groups . Property Type Details Value object This groups\u0027s value of each .GroupingFields defined on the DataView TypeCode SdsTypeCode The name of the group\u0027s type code Uom string The group\u0027s unit of measurement identifier FieldMapping Details on the provenance on every field of data: Property Type Details Id string Unique identifier Label string Friendly name FieldKind FieldKind enumeration Specifies if the mapping is for an index, grouping, data, or field id field TypeCode SdsTypeCode The primary data type of the mapping SummaryType SdsSummaryType The summary type calculation. Null unless all data mappings\u0027 SummaryType within the field mappings are identical. SummaryDirection SummaryDirection Enumeration SummaryDirection controls whether the start or end index of the summary is used by the data view to calculate the summary values. Null unless all data mappings\u0027 SummaryDirection within the field mappings are identical. Uom string The unit of measure id. Null unless all data mappings\u0027 unit of measures within the field mapping are identical. DataMappings IReadOnlyList Per-group details of what this field resolved to FieldKind enumeration Field type used in the mapping. Name Enumeration Id Description IndexField 1 Maps to an index field. GroupingField 2 Maps to a grouping field. DataField 3 Maps to a data field. FieldId 4 Maps to a field id field for a narrow shape data view. DataMapping Per-group details of the data that a FieldMapping targets: Property Type Details TargetId string The unique identifier of the target data item TargetFieldKey string The specific targeted part of the data item, if any. TargetStreamReferenceName string The asset stream reference name. Only applies to asset property data mappings. TypeCode SdsTypeCode The value type SummaryType SdsSummaryType The summary type calculation for the data field. SummaryDirection SummaryDirection Enumeration SummaryDirection controls whether the start or end index of the summary is used by the data view to calculate the summary values. Uom string The unit of measure id FieldSetIndex Nullable The position of the corresponding field set within the data view FieldIndex Nullable The position of the corresponding field within its field set Statistics General statistics about how the data view resolved: Property Type Details DataItemCount int The total count of data items resolved in the data view GroupCount int The total count of groups resolved in the data view FieldMappingCount int The total count of field mappings resolved by the data view DataFieldSets IReadOnlyList Statistics about how the data view data field sets resolved DataFieldSetStatistics Statistics about how a data field set resolved: Property Type Details DataItemCount int The total count of data items resolved for the data field set UnmappedDataItemCount int The total count of data items not referenced by a field mapping resolved for the data field set DataFields IReadOnlyList Statistics about how the data field set data fields resolved DataFieldStatistics Statistics about how a data field resolved: Property Type Details FieldMappingCount int The total count of field mappings associated with the data field DataMappingCount int The total count of data mappings associated with the data field EmptyDataMappingCount int The total count of data mappings associated with the data field that do not map to any data UnmappedGroupCount int The total count of groups that do not map to any field mappings in the data field"
                                                                                           },
    "Content_Portal/Documentation/DataViews/PreviewDataViewAPI/Preview_Data_View_API.html":  {
                                                                                                 "href":  "Content_Portal/Documentation/DataViews/PreviewDataViewAPI/Preview_Data_View_API.html",
                                                                                                 "title":  "Preview data view API",
                                                                                                 "keywords":  "Preview data view API The preview data view API provides the users with the flexibility to work and query with the routes and get a response on the fly before saving the data view. All the preview routes expect a data view to be passed in the request body of the call. The user has the flexibility to change the data view any number of times. The syntax of the data view and all other objects for the routes will remain identical to that of the non-preview routes. General concepts What routes have a preview available? Below data view API routes are available to be used as preview routes: Resolved preview routes See Get Data Items by Query . See Get Ineligible Data Items by Query . See Get Groups . See Get Available Field Sets . See Get Field Mappings . See Get Statistics . See Get Data View Data . When to use the preview routes? The preview API is useful for testing how all resources will resolve for the data view. These include data included in the data view, its source, and its destination. The preview data API provides the capability to identify the number of groups from which the groupCount query parameter will get preview data. The preview data API can also be used to identify the number of items per group using the countPerGroup parameter. Who can access the data view preview routes? The access rights required for the preview routes are identical to those of the non-preview data view create route. Users or clients with \"Write\" access rights on the data views collection access control list can access the preview routes."
                                                                                             },
    "Content_Portal/Documentation/DataViews/Reference/Asset_Example.html":  {
                                                                                "href":  "Content_Portal/Documentation/DataViews/Reference/Asset_Example.html",
                                                                                "title":  "Asset examples",
                                                                                "keywords":  "Asset examples This section defines some example assets that add context around the streams and types defined in stream examples in order to illustrate how assets can be used within a data view. Solar inverter assets Each solar inverter assets contain 2 stream references: power in and power out for the corresponding inverter stream. Asset IDs 8 inverter assets are defined: \"Biltmore Primary Inverter 0\", \"Biltmore Primary Inverter 1\", \"Biltmore Primary Inverter 2\", \"Biltmore Secondary Inverter 0\", \"Rosecliff Primary Inverter 0\", \"Rosecliff Primary Inverter 1\", \"Winterthur Primary Inverter 0\", \"Winterthur Secondary Inverter 0\", Asset metadata Each solar inverter asset contains metadata for site, meter, and inverter. \"Metadata\": [ { \"Id\": \"Site\", \"Name\": \"Site\", \"SdsTypeCode\": \"String\", \"Value\": one of ( \"Biltmore\" | \"Rosecliff\" | \"Winterthur\" ) }, { \"Id\": \"Meter\", \"Name\": \"Meter\", \"SdsTypeCode\": \"String\", \"Value\": one of ( \"Primary\" | \"Secondary\" ) }, { \"Id\": \"Inverter\", \"Name\": \"Inverter\", \"SdsTypeCode\": \"Int32\", \"Value\": one of ( 0 | 1 | 2 ) }, { \"Id\": \"Nominal Power\", \"Name\": \"Nominal Power\", \"SdsTypeCode\": \"Double\", \"Value\": 1.21 } ] Asset stream references Each solar inverter asset contains 2 stream references to the correspnding SDS streams for the solar inverter. \"StreamReferences\": [ { \"Id\": \"Power In\", \"Name\": \"Power In\", \"StreamId\": one of ( \"BILT.Meter.Primary.Inverter.0.PwrIn\" | \"BILT.Meter.Primary.Inverter.1.PwrIn\" | \"BILT.Meter.Primary.Inverter.2.PwrIn\" | \"BILT.Meter.Secondary.Inverter.0.PwrIn\" | \"ROSE.Meter.Primary.Inverter.0.PwrIn\" | \"ROSE.Meter.Primary.Inverter.1.PwrIn\" | \"WINT.Meter.Primary.Inverter.0.PwrIn\" | \"WINT.Meter.Secondary.Inverter.0.PwrIn\" ) }, { \"Id\": \"Power Out\", \"Name\": \"Power Out\", \"StreamId\": one of ( \"BILT.Meter.Primary.Inverter.0.PwrOut\" | \"BILT.Meter.Primary.Inverter.1.PwrOut\" | \"BILT.Meter.Primary.Inverter.2.PwrOut\" | \"BILT.Meter.Secondary.Inverter.0.PwrOut\" | \"ROSE.Meter.Primary.Inverter.0.PwrOut\" | \"ROSE.Meter.Primary.Inverter.1.PwrOut\" | \"WINT.Meter.Primary.Inverter.0.PwrOut\" | \"WINT.Meter.Secondary.Inverter.0.PwrOut\" ) } ] An example asset { \"Id\": \"Biltmore Primary Inverter 0\", \"Name\": \"Biltmore Primary Inverter 0\", \"Metadata\": [ { \"Id\": \"Site\", \"Name\": \"Site\", \"SdsTypeCode\": \"String\", \"Value\": \"Biltmore\" }, { \"Id\": \"Meter\", \"Name\": \"Meter\", \"SdsTypeCode\": \"String\", \"Value\": \"Primary\" }, { \"Id\": \"Inverter\", \"Name\": \"Inverter\", \"SdsTypeCode\": \"Int64\", \"Value\": 0 }, { \"Id\": \"Nominal Power\", \"Name\": \"Nominal Power\", \"SdsTypeCode\": \"Double\", \"Value\": 1.21 } ], \"StreamReferences\": [ { \"Id\": \"Power In\", \"Name\": \"Power In\", \"StreamId\": \"BILT.Meter.Primary.Inverter.0.PwrIn\" }, { \"Id\": \"Power Out\", \"Name\": \"Power Out\", \"StreamId\": \"BILT.Meter.Primary.Inverter.0.PwrOut\" } ] }"
                                                                            },
    "Content_Portal/Documentation/DataViews/Reference/Data_Views_Examples.html":  {
                                                                                      "href":  "Content_Portal/Documentation/DataViews/Reference/Data_Views_Examples.html",
                                                                                      "title":  "Examples",
                                                                                      "keywords":  "Examples The stream and asset examples defined in this section are used throughout the Data Views documentation. Stream examples Asset examples"
                                                                                  },
    "Content_Portal/Documentation/DataViews/Reference/Example_Scenario.html":  {
                                                                                   "href":  "Content_Portal/Documentation/DataViews/Reference/Example_Scenario.html",
                                                                                   "title":  "Stream examples",
                                                                                   "keywords":  "Stream examples This section uses example streams to illustrate data view concepts. The streams are of three types: docs-pi-inverter | simulates solar power inverter data collected via PI to OCS docs-omf-weather-gen1 | simulates weather data collected from an OMF source docs-omf-weather-gen2 | simulates weather data collected from an OMF source, but with some additional/renamed additional renamed properties Each solar inverter is associated with some physical location. There is a weather stream for each location. Use the bulk uploader to create the types and streams from the stream examples. See the configuration files specific to the data views stream examples in the sample collections . Data views are made to bring order to a tangle of data streams. Despite appearing complex and verbose, this example is likely much simpler than your real-world data. This example illustrates how data views can render real-world data consumable for data science. Solar inverter streams These streams represent values collected via PI to OCS, originally collected by a PI System. Each stream value contains a timestamp (Timestamp) and a measurement (Value) . Type { \"Id\": \"docs-pi-inverter\", \"Name\": \"Inverter\", \"SdsTypeCode\": \"Object\", \"Properties\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"IsKey\": true, \"SdsType\": { \"SdsTypeCode\": \"DateTime\" } }, { \"Id\": \"Value\", \"Name\": \"Value\", \"SdsType\": { \"SdsTypeCode\": \"Double\" } } ] } Stream IDs 16 inverter streams are defined: \"BILT.Meter.Primary.Inverter.0.PwrIn\", \"BILT.Meter.Primary.Inverter.0.PwrOut\", \"BILT.Meter.Primary.Inverter.1.PwrIn\", \"BILT.Meter.Primary.Inverter.1.PwrOut\", \"BILT.Meter.Primary.Inverter.2.PwrIn\", \"BILT.Meter.Primary.Inverter.2.PwrOut\", \"BILT.Meter.Secondary.Inverter.0.PwrIn\", \"BILT.Meter.Secondary.Inverter.0.PwrOut\", \"ROSE.Meter.Primary.Inverter.0.PwrIn\", \"ROSE.Meter.Primary.Inverter.0.PwrOut\", \"ROSE.Meter.Primary.Inverter.1.PwrIn\", \"ROSE.Meter.Primary.Inverter.1.PwrOut\", \"WINT.Meter.Primary.Inverter.0.PwrIn\", \"WINT.Meter.Primary.Inverter.0.PwrOut\", \"WINT.Meter.Secondary.Inverter.0.PwrIn\", \"WINT.Meter.Secondary.Inverter.0.PwrOut\", Tags and metadata Each inverter stream has some descriptive tags assigned, and metadata key-values describing its function. Tags: some subset of [ \"Commercial\", \"Residential\", \"Critical Asset\" ] Metadata: { \"Site\" : one of ( \"Biltmore\" | \"Rosecliff\" | \"Winterthur\" ), \"Measurement\": one of ( \"Power In\" | \"Power Out\" ), \"Meter\": one of ( \"Primary\" | \"Secondary\" ), \"Inverter\": one of ( \"0\" | \"1\" | \"2\" ) \"Nominal Power MW\": \"1.21\" } Weather streams These streams simulate data collected via OMF from a weather station. There are two \"generations\" represented: Gen2 adds one property and renames another, as compared to Gen1. Tags and metadata Each weather stream has some descriptive tags assigned, and one metadata key-value indicating its Site. These are the same sites with which the inverters are associated. Tags: some subset of [ \"Weather\", \"Low Resolution\", \"High Resolution\", \"Gen1\", \"Gen2\" ] Metadata: { \"Site\" : one of ( \"Biltmore\" | \"Rosecliff\" | \"Winterthur\" ) } Weather, generation 1 Type { \"Id\": \"docs-omf-weather-gen1\", \"Name\": \"WeatherGen1\", \"SdsTypeCode\": \"Object\", \"Properties\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"IsKey\": true, \"SdsType\": { \"SdsTypeCode\": \"DateTime\" } }, { \"Id\": \"SolarRadiation\", \"Name\": \"Solar Radiation\", \"SdsType\": { \"SdsTypeCode\": \"Int32\" } }, { \"Id\": \"Temperature\", \"Name\": \"Temperature\", \"SdsType\": { \"SdsTypeCode\": \"Double\" } } ] } Stream IDs Two streams of this type are defined: \"WS_BILT\", \"WS_ROSE\", Weather, generation 2 The latest and greatest Gen2 weather stations report a new property, Cloud Cover , but also rename Temperature to Ambient Temperature . They are otherwise similar to Gen1. Type { \"Id\": \"docs-omf-weather-gen2\", \"Name\": \"WeatherGen2\", \"SdsTypeCode\": \"Object\", \"Properties\": [ { \"Id\": \"Timestamp\", \"Name\": \"Timestamp\", \"IsKey\": true, \"SdsType\": { \"SdsTypeCode\": \"DateTime\" } }, { \"Id\": \"SolarRadiation\", \"Name\": \"Solar Radiation\", \"SdsType\": { \"SdsTypeCode\": \"Int32\" } }, { \"Id\": \"AmbientTemperature\", \"Name\": \"Ambient Temperature\", \"SdsType\": { \"SdsTypeCode\": \"Double\" } }, { \"Id\": \"CloudCover\", \"Name\": \"Cloud Cover\", \"SdsType\": { \"SdsTypeCode\": \"Int32\" } } ] } Stream IDs One stream of this type is defined: \"WS_WINT\""
                                                                               },
    "Content_Portal/Documentation/DataViews/SecureDataViews/Securing_Data_Views.html":  {
                                                                                            "href":  "Content_Portal/Documentation/DataViews/SecureDataViews/Securing_Data_Views.html",
                                                                                            "title":  "Secure data views",
                                                                                            "keywords":  "Secure data views Access rights to data views and their data are configurable in several ways. Permissions to the overall data views collection govern which users may create data views, and are also used as the default permissions for each data view that is created. Access to each data view is independently configurable. Finally, the permissions set on each data item, such as a stream or asset , apply globally within OSIsoft Cloud Services, including within the data views feature. This section covers information specific to access control within the data views feature. For background information about access control throughout OSIsoft Cloud Services and how to configure the access control objects, see Role-based access control . Data views collection access control The data views collection access control list is used to control which users and clients are authorized to create data views. Only users and clients with \"Write\" access rights can create data views. See CommonAccessRightsEnum for a complete list of available access rights. The data views collection access control list also determines the default access control list for individual data views. Note that changing the collection level access control list does not affect existing data views as the collection level access control list is only used when the data view is first created. Once the data view exists, data view level access control is managed independently of collection level access control. See Data Views Access Control for more information on securing individual data views. When a namespace is first created, the data views collection access control list will default to the access control list for the entire namespace. Use the API routes in Access Control API to view and update the data views collection access control list. Only users and clients with ManageAccessControl rights on the data views collection are authorized to view and update the collection-level access control list. Data view access control Data views are secured individually. This allows granular control over who can see which data view, in order to restrict access to sensitive or compartmentalized information. Each data view has two child resources that control authorization: the data view access control list and the data view owner. See Role-based access control for more information about the access control list and owner objects. Owner authorization supersedes access control list authorization. The owner (typically the user or client that created the data view) has full access to the data view regardless of the access control list. The data view owner and access control list control basic authorization to a given data view. See the table below for the required access rights for each operation that can be performed against a data view. For the full list of available access rights, see CommonAccessRightsEnum . Operation Required access rights Create Write on the data views collection (see Collection Access Control ) Read Read Update Write Delete Delete Read access control ManageAccessControl Update access control ManageAccessControl Data access control The access control rights of each data item, such as a stream or asset , apply globally within OSIsoft Cloud Services, including within data views. When a data view resolves per-user, each Query is executed with the user\u0027s own permissions, honoring the access control configured for each data item. Read access to a data view does not affect the user\u0027s read access to (or even the visibility of) any streams or assets. When you inspect the data items that resolve for a data view, you see only the data items that you have Read access to. Configuring access control for streams and assets is similar to configuring data views. See the Role-based access control , streams , and assets sections for more information."
                                                                                        },
    "Content_Portal/Documentation/http-status-codes.html":  {
                                                                "href":  "Content_Portal/Documentation/http-status-codes.html",
                                                                "title":  "HTTP status codes",
                                                                "keywords":  "HTTP status codes The server issues HTTP response status codes when a client makes a request over HTTP. In response to the requests made in OSIsoft Cloud Services, the system returns one of the codes listed in the table below. To see what each code means in context, refer to the API documentation. Status codes table Status Code Description 200 OK The request was successful. 201 Created A resource was created as a result of a successful request. 202 Accepted The request was accepted and has been queued for processing. 204 No content The request was successful and the server is not returning any content. 207 Multi-status The request was partially successful. 302 Found The requested resource will be redirected. 400 Bad request Due to a client error, the server could not process the request. 401 Unauthorized Authentication has failed or has not been provided. 403 Forbidden Unauthorized. Make sure the user has the right role to access the resource. 404 Not found The server could not find the requested resource. 405 Method not allowed The resource does not support the method in the request. For example, a PUT request on a ready-only resource will return this code. 408 Operation timed out The server timed out while waiting for a client request. 409 Conflict The request conflicts with the current state of the server. 412 Precondition Failed A precondition specified in the request was not met so the operation could not be completed. 500 Internal server error The server ran into an unexpected condition and failed to complete the request. 503 Service unavailable The server cannot handle the request (due to maintenance, being overloaded, or for other reasons). As it is often a temporary state, try again later."
                                                            },
    "Content_Portal/Documentation/Identity/Identity_and_Access_Management.html":  {
                                                                                      "href":  "Content_Portal/Documentation/Identity/Identity_and_Access_Management.html",
                                                                                      "title":  "Identity and Access Management",
                                                                                      "keywords":  "Identity and Access Management You use OSIsoft Identity Service APIs to create, read, update and delete tenants, clients, users and other identity related objects. Users and clients have access to their own information. You can read more about specific roles under the Management topic."
                                                                                  },
    "Content_Portal/Documentation/Identity/Identity_AuthorizationCodeClient.html":  {
                                                                                        "href":  "Content_Portal/Documentation/Identity/Identity_AuthorizationCodeClient.html",
                                                                                        "title":  "Authorization Code Client",
                                                                                        "keywords":  "Authorization Code Client Authorization code clients are used in Javascript/Browser Javascript Browser (SPA) based applications or native mobile applications with the presence of a User. You can read more about these clients here . Authorization code clients are not issued secrets or refresh tokens. For some guidelines on use of secrets, refer to the Credential management topic. For some recommendations on least privilege for users and clients, refer to the Least privilege topic. Properties For HTTP requests and responses, the AuthorizationCodeClient object has the following properties and JSON-serialized body: Property Name Data Type Description AllowedCorsOrigins string[] The values used by the default CORS policy service implementations to build a CORS policy for JavaScript clients. RedirectUris string[] The allowed URIs to which return tokens or authorization codes can be returned. Wildcards are ignored. URIs must match exactly what you are redirecting to after login. If URIs do not match, the authentication process will fail with a bad_client error. Maximum 10 per client. PostLogoutRedirectUris string[] Allowed URIs to redirect to after logout. Wildcards are ignored. URIs must match exactly what you are redirecting to after logout. Maximum 10 for client. ClientUri string URI to a page with information about client (used on consent screen). LogoUri string URI to client logo (used on consent screen). Id string Client ID for this client. This ID should be a GUID. Name string Name of Client. Enabled bool Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] For OSIsoft internal use only. Serialized Model { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error Handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Create an Authorization Code Client Create an authorization code client. No secret will be generated for this client. Request POST api/v1/Tenants/{tenantId}/AuthorizationCodeClients api v1 Tenants {tenantId} AuthorizationCodeClients Parameters [Required] string tenantId Id of tenant. [FromBody] [Required] AuthorizationCodeClient authorizationCodeClient New AuthorizationCodeClient object. Property Name Data Type Required Description AllowedCorsOrigins string[] No The values used by the default CORS policy service implementations to build a CORS policy for JavaScript clients. RedirectUris string[] No The allowed URIs to which return tokens or authorization codes can be returned. Wildcards are ignored. URIs must match exactly what you are redirecting to after login. If URIs do not match, the authentication process will fail with a bad_client error. Maximum 10 per client. PostLogoutRedirectUris string[] No Allowed URIs to redirect to after logout. Wildcards are ignored. URIs must match exactly what you are redirecting to after logout. Maximum 10 for client. ClientUri string No URI to a page with information about client (used on consent screen). LogoUri string No URI to client logo (used on consent screen). Id string No Client ID for this client. This ID should be a GUID. Name string Yes Name of Client. Enabled bool No Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 No Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] No For OSIsoft internal use only. { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: AuthorizationCodeClient { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 400 Missing or invalid inputs or client limit exceeded. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Client Id already exists. 500 Internal server error. Update an Authorization Code Client Update an authorization code client. It can take up to one hour for update to manifest in the authentication process. Request PUT api/v1/Tenants/{tenantId}/AuthorizationCodeClients/{clientId} api v1 Tenants {tenantId} AuthorizationCodeClients {clientId} Parameters [Required] string tenantId Id of Tenant. [Required] string clientId Id of Client. [FromBody] [Required] AuthorizationCodeClient authorizationCodeClient Updated authorization code client values. Properties that are not set or are null will not be changed. Property Name Data Type Required Description AllowedCorsOrigins string[] No The values used by the default CORS policy service implementations to build a CORS policy for JavaScript clients. RedirectUris string[] No The allowed URIs to which return tokens or authorization codes can be returned. Wildcards are ignored. URIs must match exactly what you are redirecting to after login. If URIs do not match, the authentication process will fail with a bad_client error. Maximum 10 per client. PostLogoutRedirectUris string[] No Allowed URIs to redirect to after logout. Wildcards are ignored. URIs must match exactly what you are redirecting to after logout. Maximum 10 for client. ClientUri string No URI to a page with information about client (used on consent screen). LogoUri string No URI to client logo (used on consent screen). Id string No Client ID for this client. This ID should be a GUID. Name string Yes Name of Client. Enabled bool No Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 No Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] No For OSIsoft internal use only. { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: AuthorizationCodeClient { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 400 Missing or invalid inputs. 404 Client or Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get an Authorization Code Client from Tenant Get an authorization code client from tenant. Request GET api/v1/Tenants/{tenantId}/AuthorizationCodeClients/{clientId} api v1 Tenants {tenantId} AuthorizationCodeClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of Client. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: AuthorizationCodeClient { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 404 Client or Tenant not found. 500 Internal server error. Get All Authorization Code Clients from Tenant Get all authorization code clients from a tenant. Optionally, get a list of requested clients. Total number of clients in the Tenant set in the Total-Count header. Request GET api/v1/Tenants/{tenantId}/AuthorizationCodeClients api v1 Tenants {tenantId} AuthorizationCodeClients Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] id Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored. [FromQuery] [Optional] [Default = \"\"] string[] tag Only return clients that have these tags. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of clients to skip. From query. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of clients to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] }, { \"AllowedCorsOrigins\": [ \"String\", \"String\" ], \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } ] 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Get Total Count Authorization Code Clients from Tenant Return total number of authorization code clients in a Tenant. Optionally, check based on a list of requested clients. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/AuthorizationCodeClients api v1 Tenants {tenantId} AuthorizationCodeClients Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] id Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored. [FromQuery] [Optional] [Default = \"\"] string[] tag Only count clients that have these tags. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or Tenant not found. 500 Internal server error. Delete an Authorization Code Client Delete an Authorization Code Client. It can take up to one hour for deletion to manifest in the authentication process. Access tokens issued to this client will be valid until their expiration. Request DELETE api/v1/Tenants/{tenantId}/AuthorizationCodeClients/{clientId} api v1 Tenants {tenantId} AuthorizationCodeClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. 404 Client or Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for Authorization Code Client Validate that an authorization code client exists in Tenant. Request HEAD api/v1/Tenants/{tenantId}/AuthorizationCodeClients/{clientId} api v1 Tenants {tenantId} AuthorizationCodeClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: ClientCredentialClient 401 Unauthorized. 403 Forbidden. 404 Client or Tenant not found. 500 Internal server error."
                                                                                    },
    "Content_Portal/Documentation/Identity/Identity_AutomationIdentity.html":  {
                                                                                   "href":  "Content_Portal/Documentation/Identity/Identity_AutomationIdentity.html",
                                                                                   "title":  "Automation Identity",
                                                                                   "keywords":  "Automation Identity APIs for automation identities. Properties For HTTP requests and responses, the AutomationIdentity object has the following properties and JSON-serialized body: Property Name Data Type Description Id Guid Automation identity id. Name string The automation identity name. TenantId string The automation identity tenant id. RoleIds Guid[] Role ids associated with this automation identity. RoleTypeIds Guid[] Role type ids associated with this automation identity. Tags string[] Tags associated with this automation identity. Serialized model { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"RoleTypeIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Create an Automation Identity Create an automation identity. A non-Administrator caller must have all roles being assigned to the new automation adentity. Request POST api/v1/Tenants/{tenantId}/AutomationIdentities api v1 Tenants {tenantId} AutomationIdentities Parameters [Required] string tenantId Id of tenant. [FromBody] [Required] AutomationIdentityCreate automationIdentityCreate New Automation Identity object. Property Name Data Type Required Description Name string Yes The automation identity name. RoleIds Guid[] Yes Role ids associated with this automation identity. Tags string[] No Tags associated with this automation identity. { \"Name\": \"Name\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 201 Created. Type: AutomationIdentity { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"RoleTypeIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } 400 Bad Request. 401 Unauthorized. 403 Forbidden. A non-Administrator caller must have all roles being assigned to the new automation identity. 404 Not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Already exists. 500 Internal server error. Get an Automation Identity Returns automation identity object. Request GET api/v1/Tenants/{tenantId}/AutomationIdentities/{automationIdentityId} api v1 Tenants {tenantId} AutomationIdentities {automationIdentityId} Parameters [Required] string tenantId Id of tenant. [Required] Guid automationIdentityId Id of automation identity. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: AutomationIdentity { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"RoleTypeIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 404 Not found. 500 Internal server error. Get Header for Automation Identity Validate that an automation identity exists in tenant. Request HEAD api/v1/Tenants/{tenantId}/AutomationIdentities/{automationIdentityId} api v1 Tenants {tenantId} AutomationIdentities {automationIdentityId} Parameters [Required] string tenantId Id of tenant. [Required] Guid automationIdentityId Id of automation identity. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Automation identity or tenant not found. 500 Internal server error. Get Automation Identities from a Tenant Returns automation identity objects. Request GET api/v1/Tenants/{tenantId}/AutomationIdentities api v1 Tenants {tenantId} AutomationIdentities Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] tag Only return automation identities that have at least one of these tags. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of automation identities to skip. Ignored if a list of ids is passed. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of automation identities to return. Ignored if a list of ids is passed. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"RoleTypeIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"RoleTypeIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } ] 401 Unauthorized. 403 Forbidden. 404 Not found. 500 Internal server error. Get Total Count of Automation Identities from Tenant Return total number of automation identities in tenant in the Total-Count header. Request HEAD api/v1/Tenants/{tenantId}/AutomationIdentities api v1 Tenants {tenantId} AutomationIdentities Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] tag Only count automation identities that have at least one of these tags. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Automation identity or tenant not found. 500 Internal server error. Delete an Automation Identity Delete an automation identity. A non-Administrator caller must have all roles belonging to the automation identity being deleted. Request DELETE api/v1/Tenants/{tenantId}/AutomationIdentities/{automationIdentityId} api v1 Tenants {tenantId} AutomationIdentities {automationIdentityId} Parameters [Required] string tenantId Id of tenant. [Required] Guid automationIdentityId Id of automation identity. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. A non-Administrator caller must have all roles belonging to the automation identity being deleted. 404 Automation identity or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Update Automation Identity Update a automation identity. A non-Administrator caller must have all roles belonging to the existing automation identity, as well as any roles being added. Request PUT api/v1/Tenants/{tenantId}/AutomationIdentities/{automationIdentityId} api v1 Tenants {tenantId} AutomationIdentities {automationIdentityId} Parameters [Required] string tenantId Id of tenant. [Required] Guid automationIdentityId Id of automation identity. [FromBody] [Required] AutomationIdentityUpdate automationIdentityUpdate Automation identity object. Properties that are not set or are null will not be changed. Property Name Data Type Required Description Name string No The automation identity name. RoleIds Guid[] No Role ids associated with this automation identity. Tags string[] No Tags associated with this automation identity. { \"Name\": \"Name\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: AutomationIdentity { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"RoleTypeIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. A non-Administrator caller must have all roles belonging to the existing automation identity, as well as any roles being added. 400 Missing or invalid inputs. 404 Automation identity or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error."
                                                                               },
    "Content_Portal/Documentation/Identity/Identity_AzureActiveDirectoryTenant.html":  {
                                                                                           "href":  "Content_Portal/Documentation/Identity/Identity_AzureActiveDirectoryTenant.html",
                                                                                           "title":  "Azure Active Directory Tenant",
                                                                                           "keywords":  "Azure Active Directory Tenant An Azure Active Directory tenant is used to map an existing Azure Active Directory . Tenant from Azure to OSIsoft Cloud Services. We only allow one Azure Active Directory tenant per OSIsoft Cloud Services tenant. Properties For HTTP requests and responses, the AzureActiveDirectoryTenant object has the following properties and JSON-serialized body: Property Name Data Type Description Id string Id of an Azure Active Directory tenant. ConsentState ConsentState Consent State of Azure Active Directory tenant. Can be: NotConsented (0), Consented (1). Serialized Model { \"Id\": \"Id\", \"ConsentState\": 0 } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Add Azure Active Directory Tenant to OCS Tenant Add an Azure Active Directory tenant to the OSIsoft Cloud Services tenant. Request POST api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants/{azureActiveDirectoryTenantId} api v1 Tenants {tenantId} AzureActiveDirectoryTenants {azureActiveDirectoryTenantId} Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. [Required] string azureActiveDirectoryTenantId Id or Domain Name of Azure Active Directory tenant. Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: AzureActiveDirectoryTenant { \"Id\": \"Id\", \"ConsentState\": 0 } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 OSIsoft Cloud Services tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Id of Azure Active Directory tenant. is already in use on the specified tenant. 500 Internal server error. Get all Azure Active Directory Tenants from OCS Tenant Get all Azure Active Directory tenants from an OSIsoft Cloud Services tenant. Request GET api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants api v1 Tenants {tenantId} AzureActiveDirectoryTenants Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of Azure Active Directory tenants to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of Azure Active Directory tenants to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"Id\", \"ConsentState\": 0 }, { \"Id\": \"Id\", \"ConsentState\": 0 } ] 401 Unauthorized. 403 Forbidden. 403 Forbidden. 500 Internal server error. Get Azure Active Directory Tenant from OCS Tenant Get Azure Active Directory tenant from an OSIsoft Cloud Services tenant. Request GET api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants/{azureActiveDirectoryTenantId} api v1 Tenants {tenantId} AzureActiveDirectoryTenants {azureActiveDirectoryTenantId} Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. [Required] string azureActiveDirectoryTenantId Id of Azure Active Directory tenant. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: AzureActiveDirectoryTenant { \"Id\": \"Id\", \"ConsentState\": 0 } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 OSIsoft Cloud Services tenant not found. 500 Internal server error. Remove Azure Active Directory Tenant from OCS Tenant Remove Azure Active Directory tenant from an OSIsoft Cloud Services tenant. Request DELETE api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants/{azureActiveDirectoryTenantId} api v1 Tenants {tenantId} AzureActiveDirectoryTenants {azureActiveDirectoryTenantId} Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. [Required] string azureActiveDirectoryTenantId Id of Azure Active Directory tenant to remove. Authorization Allowed for these roles: Tenant Administrator Response 204 Removed. 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 OSIsoft Cloud Services tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Send Consent Email for Azure Active Directory Tenant Send consent for an Azure Active Directory tenant. OSIsoft Cloud Services needs to be granted permission to interact with the Azure Active Directory tenant. Otherwise, users from this Azure Active Directory tenant cannot accept invitations from OSIsoft Cloud Services and log in. You can read more about this here . Request POST api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants/{azureActiveDirectoryTenantId}/SendConsent api v1 Tenants {tenantId} AzureActiveDirectoryTenants {azureActiveDirectoryTenantId} SendConsent Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. [Required] string azureActiveDirectoryTenantId Id of Azure Active Directory tenant. [FromBody] [Required] ConsentInformation consentInformation ConsentInformation object. Property Name Data Type Required Description AzureActiveDirectoryConsentEmail string Yes Address to email consent. Only Azure Active Directory Admins have permission to consent to being allowed to interact with the tenant. The email does not have to be sent to an Admin. AzureActiveDirectoryConsentGivenName string Yes Preferred name to use in the consent email. AzureActiveDirectoryConsentSurname string Yes Preferred surname to use in the consent email. AzureActiveDirectoryTenant string Yes Azure Active Directory Domain Name (for example: mydomain.onmicrosoft.com). { \"AzureActiveDirectoryConsentEmail\": \"user@company.com\", \"AzureActiveDirectoryConsentGivenName\": \"Name\", \"AzureActiveDirectoryConsentSurname\": \"Surname\", \"AzureActiveDirectoryTenant\": \"AzureActiveDirectoryTenant\" } Authorization Allowed for these roles: Tenant Administrator Response 204 Removed. 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 OSIsoft Cloud Services tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 500 Internal server error. Get Azure Active Directory Tenant in Tenant Validate that Azure Active Directory tenant exists in this OSIsoft Cloud Services tenant. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants/{azureActiveDirectoryTenantId} api v1 Tenants {tenantId} AzureActiveDirectoryTenants {azureActiveDirectoryTenantId} Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. [Required] string azureActiveDirectoryTenantId Id of Azure Active Directory tenant. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 OSIsoft Cloud Services tenant not found. 500 Internal server error. Get Total Count of Azure Active Directory Tenant in Tenant Return total number of Azure Active Directory tenants in a OSIsoft Cloud Services tenant. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/AzureActiveDirectoryTenants api v1 Tenants {tenantId} AzureActiveDirectoryTenants Parameters [Required] string tenantId Id of OSIsoft Cloud Services tenant. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 OSIsoft Cloud Services tenant not found. 500 Internal server error."
                                                                                       },
    "Content_Portal/Documentation/Identity/Identity_Claim.html":  {
                                                                      "href":  "Content_Portal/Documentation/Identity/Identity_Claim.html",
                                                                      "title":  "Claim",
                                                                      "keywords":  "Claim An identity provider claim provides a mechanism to map a claim from an identity provider to one or more Roles. Properties For HTTP requests and responses, the claim object has the following properties and JSON-serialized body: Property Name Data Type Description Issuer string The issuer of the claim. OriginalIssuer string The original issuer of the claim. Subject ClaimsIdentity The subject of the claim. Type string The type of the claim. Value string The value of the claim. ValueType string The value type of the claim. Serialized model { \"Issuer\": \"Issuer\", \"OriginalIssuer\": \"OriginalIssuer\", \"Properties\": null, \"Subject\": null, \"Type\": \"Type\", \"Value\": \"Value\", \"ValueType\": \"ValueType\" } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get all Identity Provider Claims Get all identity provider claims for an identity provider on a tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of identity providers to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of identity providers to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } ] 401 Unauthorized. 403 Forbidden. 404 Tenant or identity provider not found. 500 Internal server error. Get all Identity Provider Claims Header Get Header for all identity provider claims for an identity provider on a tenant. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Tenant or identity provider not found. 500 Internal server error. Get Identity Provider Claim Get an identity provider claim from an identity provider on a tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims/{identityProviderClaimId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims {identityProviderClaimId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid identityProviderClaimId Id of identity provider claim. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: IdentityProviderClaim { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, or identity provider claim not found. 500 Internal server error. Get Identity Provider Claim Header Get an identity provider claim Header from an identity provider on a tenant. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims/{identityProviderClaimId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims {identityProviderClaimId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid identityProviderClaimId Id of identity provider claim. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, or identity provider claim not found. 500 Internal server error. Create New Identity Provider Claim Create a new identity provider claim for an identity provider on a tenant. Request POST api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [FromBody] [Required] IdentityProviderClaimCreate identityProviderClaimCreate Identity provider claim to create. Property Name Data Type Required Description Value string Yes The value for this identity provider claim. IdentityProviderClaimTypeNameId Guid Yes The identity provider Claim Type Name Id for this IdentityProvider claim. RoleIds Guid[] Yes The list of Role Ids associated with this IdentityProviderClaim. { \"Value\": \"Value\", \"IdentityProviderClaimTypeNameId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: IdentityProviderClaim { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 302 Found. 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, or Roles not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Identity provider claim configuration already exists. 500 Internal server error. Update an Existing Identity Provider Claim Create a new identity provider claim for an identity provider on a tenant. Request PUT api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims/{identityProviderClaimId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims {identityProviderClaimId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid identityProviderClaimId Id of identity provider claim. [FromBody] [Required] IdentityProviderClaimUpdate identityProviderClaimUpdate Updated identity provider claim values. Property Name Data Type Required Description Value string No The value for this IdentityProvider claim. RoleIds Guid[] No The list of Role Ids associated with this IdentityProviderClaim. { \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } Authorization Allowed for these roles: Tenant Administrator Response 200 Updated. Type: IdentityProviderClaim { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, identity provider claim, or roles not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 identity provider claim configuration already exists. 500 Internal server error. Delete an Existing Identity Provider Claim Delete an identity provider claim for an identity provider on a tenant. Request DELETE api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims/{identityProviderClaimId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Claims {identityProviderClaimId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid identityProviderClaimId Id of identity provider claim. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, or identity provider claim not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error."
                                                                  },
    "Content_Portal/Documentation/Identity/Identity_ClaimTypeName.html":  {
                                                                              "href":  "Content_Portal/Documentation/Identity/Identity_ClaimTypeName.html",
                                                                              "title":  "Claim Type Name",
                                                                              "keywords":  "Claim Type Name An Identity Provider Claim Type Name is the field or type name in a claim that will be used to match to a value when creating an identity provider claim. Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get All Identity Provider Claim Type Names Get all Identity Provider Claim Type Names for an identity provider on a tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/ClaimTypeNames api v1 Tenants {tenantId} IdentityProviders {identityProviderId} ClaimTypeNames Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of identity providers to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of identity providers to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } ] 401 Unauthorized. 403 Forbidden. 404 Tenant or identity provider not found. 500 Internal server error. Get All Identity Provider Claim Type Names Header Get Header for all Identity Provider Claims Type Names for an identity provider on a tenant. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/ClaimTypeNames api v1 Tenants {tenantId} IdentityProviders {identityProviderId} ClaimTypeNames Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Tenant or identity provider not found. 500 Internal server error. Get Identity Provider Claim Type Name Get an Identity Provider Claim Type Name from an identity provider on a tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/ClaimTypeNames/{identityProviderClaimTypeNameId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} ClaimTypeNames {identityProviderClaimTypeNameId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid identityProviderClaimTypeNameId Id of Identity Provider Claim Type Name. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: IdentityProviderClaim { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"TypeName\": \"Name\", \"Value\": \"Value\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, or Identity Provider Claim Type Name not found. 500 Internal server error. Get Identity Provider Claim Type Name Header Get an Identity Provider Claim Type Name Header from an identity provider on a tenant. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/ClaimTypeNames/{identityProviderClaimTypeNameId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} ClaimTypeNames {identityProviderClaimTypeNameId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid identityProviderClaimTypeNameId Id of Identity Provider Claim Type Name. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Tenant, identity provider, or Identity Provider Claim Type Name not found. 500 Internal server error."
                                                                          },
    "Content_Portal/Documentation/Identity/Identity_ClientCredentialClient.html":  {
                                                                                       "href":  "Content_Portal/Documentation/Identity/Identity_ClientCredentialClient.html",
                                                                                       "title":  "Client Credential Client",
                                                                                       "keywords":  "Client Credential Client Client credential clients are used for machine-to-machine communication without the presence of a User. These clients are issued an Id and secret upon creation, which are later used for authentication against OSIsoft Cloud Services. More than one secret can be created for a client. You can read more about these clients here . Because they access resources on OSIsoft Cloud Services, and are not associated to users, these clients can be assigned any of the roles in the tenant. We suggest following a least privilege strategy when assigning roles to these clients, as they are more likely to operate in remote machines with a wider attack surface. Properties For HTTP requests and responses, the ClientCredentialClient object has the following properties and JSON-serialized body: Property Name Data Type Description RoleIds Guid[] List of Roles to be assigned to this client. Member role is always required. For security reasons we advise against assigning Admin roles to a client. Id string Secret Id. Name string Name of client. Enabled bool Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] For or OSIsoft internal use only. Serialized model { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Create Client Credential Client Create a Client credential client. A Client Id and Client Secret will be generated to perform authentication. Make sure to store the secret somewhere safe as we do not store the actual value after the creation step. If you do not have access to the secret value, we suggest deleting the secret and adding a new one for this client. Clients have unique Ids in a tenant. Currently there is a limit of 50000 clients (of all types) per tenant. Request POST api/v1/Tenants/{tenantId}/ClientCredentialClients api v1 Tenants {tenantId} ClientCredentialClients Parameters [Required] string tenantId Id of tenant. [FromBody] [Required] ClientCredentialClientCreate clientCredentialClientCreate ClientCredentialClientCreate object. Property Name Data Type Required Description SecretDescription string No Description for the initial secret for the client. Ensure that this is descriptive enough, as it will be the only way to distinguish between multiple secrets and their usage for a client. SecretExpirationDate DateTime No Expiration date for the initial secret for the client. If set to null the secret will never expire. We advise against such practice. RoleIds Guid[] Yes List of Roles to be assigned to this client. Member role is always required. For security reasons we advise against assigning Admin roles to a client. Id string No Client ID for this client. This ID should be a GUID. Name string Yes Name of client. Enabled bool No Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 No Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] No For OSIsoft internal use only. { \"SecretDescription\": \"description\", \"SecretExpirationDate\": \"2020-03-30T15:34:23.2980074-07:00\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: ClientCredentialClientCreateResponse { \"Secret\": \"Secret\", \"Id\": 0, \"Description\": \"description\", \"ExpirationDate\": \"2020-03-30T15:34:23.3017388-07:00\", \"Client\": { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } } 400 Missing or invalid inputs, or client limit exceeded. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Client Id already exists. 500 Internal server error. Update Client Credential Client Update a client credential client. It can take up to one hour for these values to manifest in the authentication process. Request PUT api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [FromBody] [Required] ClientCredentialClient updatedClientCredentialClient ClientCredentialClient object. Properties that are not set or are null will not be changed. Property Name Data Type Required Description RoleIds Guid[] No List of Roles to be assigned to this client. Member role is always required. For security reasons we advise against assigning Admin roles to a client. Id string No Client ID for this client. This ID should be a GUID. Name string Yes Name of client. Enabled bool No Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 No Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] No For OSIsoft internal use only. { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: ClientCredentialClient { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 400 Missing or invalid inputs. 404 Client or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Client Credential Client Get a client credential client. Request GET api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: ClientCredentialClient { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get all Client Credential Clients Get a list of client credential clients from a tenant. Optionally, get a list of requested clients. Total number of clients in the tenant set in the Total-Count header. Request GET api/v1/Tenants/{tenantId}/ClientCredentialClients api v1 Tenants {tenantId} ClientCredentialClients Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] id Unordered list of client credential client Ids. Empty, whitespace or null Ids will be ignored. [FromQuery] [Optional] [Default = \"\"] string[] tag Only return clients that have these tags. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of clients to skip. Will be ignored if a list of Ids is passed. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of clients to return. Will be ignored if a list of Ids is passed. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: List [ { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] }, { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } ] 207 Partial success. Type: ClientCredentialClientMultiStatusResponse { \"OperationId\": \"OperationId\", \"Error\": \"Error\", \"Reason\": \"Reason\", \"ChildErrors\": [ { \"StatusCode\": 0, \"ModelId\": \"ModelId\", \"OperationId\": \"OperationId\", \"Error\": \"Error\", \"Reason\": \"Reason\", \"Resolution\": \"Resolution\" }, { \"StatusCode\": 0, \"ModelId\": \"ModelId\", \"OperationId\": \"OperationId\", \"Error\": \"Error\", \"Reason\": \"Reason\", \"Resolution\": \"Resolution\" } ], \"Data\": [ { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] }, { \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ], \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } ] } 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Delete Client Credential Client Delete a client credential client. It can take up to one hour for deletion to manifest in the authentication process. Access tokens issued to this client will be valid until their expiration. Request DELETE api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for Client Credential Client Validate that a client credential client exists. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get Total Count of Clients Return total number of client credential clients in a tenant. Optionally, check based on a list of requested clients. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/ClientCredentialClients api v1 Tenants {tenantId} ClientCredentialClients Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] id Unordered list of client credential client Ids. Empty, whitespace or null Ids will be ignored. [FromQuery] [Optional] [Default = \"\"] string[] tag Only count clients that have these tags. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error."
                                                                                   },
    "Content_Portal/Documentation/Identity/Identity_HybridClient.html":  {
                                                                             "href":  "Content_Portal/Documentation/Identity/Identity_HybridClient.html",
                                                                             "title":  "Hybrid Client",
                                                                             "keywords":  "Hybrid Client Hybrid clients are used in typical, thick MVC clients with the presence of a User. These clients are issued an Id and secret upon creation, which are later used for authentication against OSIsoft Cloud Services. More than one secret can be created for a client. You can read more about these clients here . Hybrid clients can be issued refresh tokens, if requested, alongside access tokens. Refresh tokens typically have an longer lifetime than access tokens, and are used to request a new access token on behalf of the user without them having to sign-in. It is highly suggested that both the Client Secret and the refresh token be stored in a secure location. For some recommendations on least privilege for users and clients, refer to the Least Privilege topic. Hybrid clients can be issued refresh tokens, if requested, alongside access tokens. Refresh tokens typically have an longer lifetime than access tokens, and are used to request a new access token on behalf of the user without them having to sign-in. It is highly suggested that both the client secret and the refresh token be stored in a secure location. Properties For HTTP requests and responses, the HybridClient object has the following properties and JSON-serialized body: Property Name Data Type Description AllowOfflineAccess bool Whether this client can request refresh tokens, by providing the offline_access scope. AllowAccessTokensViaBrowser bool Whether this HybridClient is allowed to receive access tokens via the browser. This is useful to harden flows that allow multiple response types (for example, by disallowing a hybrid flow client that is supposed to use code id_token to add the token response type, thus leaking the token to the browser). RedirectUris string[] The allowed URIs to which return tokens or authorization codes can be returned. Wildcards are ignored. URIs must match exactly what you are redirecting to after login. If URIs do not match, the authentication process will fail with a bad_client error. Maximum 10 per client. PostLogoutRedirectUris string[] Allowed URIs to redirect to after logout. Wildcards are ignored. URIs must match exactly what you are redirecting to after logout. Maximum 10 for client. ClientUri string URI to a page with information about client (used on consent screen). LogoUri string URI to client logo (used on consent screen). Id string Secret Id. Name string Name of client. Enabled bool Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] For OSIsoft internal use only. Serialized model { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Create Hybrid Client Create a Hybrid Client. A Client Id and Client Secret will be generated to perform authentication. Make sure to store the secret somewhere safe as we do not store the actual value after the creation step. If you do not have access to the secret value, we suggest deleting the secret and adding a new one for this client. Clients have unique ids in a tenant. Currently there is a limit of 50000 clients (of all types) per tenant. Request POST api/v1/Tenants/{tenantId}/HybridClients api v1 Tenants {tenantId} HybridClients Parameters [Required] string tenantId Id of tenant. [FromBody] [Required] HybridClientCreate hybridClientCreate HybridClientCreate object. Property Name Data Type Required Description SecretDescription string No Description for the initial secret for the client. SecretExpirationDate DateTime No Expiration date for the initial secret for the client. If set to null the secret will never expire. We advise against such practice. AllowOfflineAccess bool No Whether this client can request refresh tokens, by providing the offline_access scope. AllowAccessTokensViaBrowser bool No Whether this HybridClient is allowed to receive access tokens via the browser. This is useful to harden flows that allow multiple response types (for example, by disallowing a hybrid flow client that is supposed to use code id_token to add the token response type, thus leaking the token to the browser). RedirectUris string[] No The allowed URIs to which return tokens or authorization codes can be returned. Wildcards are ignored. URIs must match exactly what you are redirecting to after login. If URIs do not match, the authentication process will fail with a bad_client error. Maximum 10 per client. PostLogoutRedirectUris string[] No Allowed URIs to redirect to after logout. Wildcards are ignored. URIs must match exactly what you are redirecting to after logout. Maximum 10 for client. ClientUri string No URI to a page with information about client (used on consent screen). LogoUri string No URI to client logo (used on consent screen). Id string No Client ID for this client. This ID should be a GUID. Name string Yes Name of Client. Enabled bool No Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 No Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] No For OSIsoft internal use only. { \"SecretDescription\": \"description\", \"SecretExpirationDate\": \"2020-03-30T15:34:23.0602036-07:00\", \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: HybridClientCreateResponse { \"Secret\": \"Secret\", \"Id\": 0, \"Description\": \"description\", \"ExpirationDate\": \"2020-03-30T15:34:23.0724603-07:00\", \"Client\": { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } } 400 Missing or invalid inputs, or Client limit exceeded. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Client Id already exists. 500 Internal server error. Update Hybrid Client Update a hybrid client. It can take up to one hour for these values to manifest in the authentication process. Request PUT api/v1/Tenants/{tenantId}/HybridClients/{clientId} api v1 Tenants {tenantId} HybridClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [FromBody] [Required] HybridClient hybridClient HybridClient object. Properties that are not set or are null will not be changed. Property Name Data type Required Description AllowOfflineAccess bool No Whether this client can request refresh tokens, by providing the offline_access scope. AllowAccessTokensViaBrowser bool No Whether this HybridClient is allowed to receive access tokens via the browser. This is useful to harden flows that allow multiple response types (for example, by disallowing a hybrid flow client that is supposed to use code id_token to add the token response type, thus leaking the token to the browser). RedirectUris string[] No The allowed URIs to which return tokens or authorization codes can be returned. Wildcards are ignored. URIs must match exactly what you are redirecting to after login. If URIs do not match, the authentication process will fail with a bad_client error. Maximum 10 per client. PostLogoutRedirectUris string[] No Allowed URIs to redirect to after logout. Wildcards are ignored. URIs must match exactly what you are redirecting to after logout. Maximum 10 for client. ClientUri string No URI to a page with information about client (used on consent screen). LogoUri string No URI to client logo (used on consent screen). Id string No Client ID for this client. This ID should be a GUID. Name string Yes Name of Client. Enabled bool No Whether client is enabled. Client can be used for authentication if set to true. Client cannot be used for authentication if set to false. AccessTokenLifetime int32 No Lifetime of access token issued for this client after authentication. Minimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds. Tags string[] No For OSIsoft internal use only. { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: HybridClient { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 400 Missing or invalid inputs. 404 Client or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Hybrid Client Get a Hybrid Client from a tenant. Request GET api/v1/Tenants/{tenantId}/HybridClients/{clientId} api v1 Tenants {tenantId} HybridClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: HybridClient { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get All Hybrid Client Get a list of Hybrid clients from a tenant. Optionally, get a list of requested clients. Total number of clients in the tenant set in the Total-Count header. Request GET api/v1/Tenants/{tenantId}/HybridClients api v1 Tenants {tenantId} HybridClients Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] id Unordered list of hybrid client Ids. Empty, whitespace or null Ids will be ignored. [FromQuery] [Optional] [Default = \"\"] string[] tag Only return clients that have these tags. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of clients to skip. Will be ignored if a list of Ids is passed. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of clients to return. Will be ignored if a list of Ids is passed. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] }, { \"AllowOfflineAccess\": false, \"AllowAccessTokensViaBrowser\": false, \"RedirectUris\": [ \"String\", \"String\" ], \"PostLogoutRedirectUris\": [ \"String\", \"String\" ], \"ClientUri\": \"ClientUri\", \"LogoUri\": \"LogoUri\", \"Id\": \"Id\", \"Name\": \"Name\", \"Enabled\": false, \"AccessTokenLifetime\": 0, \"Tags\": [ \"String\", \"String\" ] } ] 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Delete Hybrid Client Delete a hybrid client. It can take up to one hour for deletion to manifest in the authentication process. Access tokens issued to this client will be valid until their expiration. Refresh tokens issued to this will be valid up to one hour after deletion. Request DELETE api/v1/Tenants/{tenantId}/HybridClients/{clientId} api v1 Tenants {tenantId} HybridClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for Hybrid Client Validate that a hybrid client exists. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/HybridClients/{clientId} api v1 Tenants {tenantId} HybridClients {clientId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get Total Count of Hybrid Clients Return total number of hybrid clients in a tenant. Optionally, check based on a list of requested clients. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/HybridClients api v1 Tenants {tenantId} HybridClients Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string[] id Unordered list of hybrid client Ids. Empty, whitespace or null Ids will be ignored. [FromQuery] [Optional] [Default = \"\"] string[] tag Only count clients that have these tags. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error."
                                                                         },
    "Content_Portal/Documentation/Identity/Identity_IdentityProvider.html":  {
                                                                                 "href":  "Content_Portal/Documentation/Identity/Identity_IdentityProvider.html",
                                                                                 "title":  "Identity Provider",
                                                                                 "keywords":  "Identity Provider APIs for getting a list of all supported identity providers. Properties For HTTP requests and responses, the IdentityProvider object has the following properties and JSON-serialized body: Property Name Data Type Description Id Guid Id of an identity provider. DisplayName string Identity provider display name to use. Scheme string The name of the cookie handler that will temporarily store the outcome of the external authentication. UserIdClaimType string Type of claim. ClientId string The ClientId of the identity provider. IsConfigured bool A value indicating whether the identity provider has been configured. Capabilities object The capabilities of the identity provider. Serialized model { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": { \"User\": { \"SignIn\": true, \"Invitation\": true, \"Search\": false }, \"Group\": { \"Authorize\": false, \"Search\": false } } } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Identity Provider Returns an IdentityProvider object. Request GET api/v1/IdentityProviders/{identityProviderId} api v1 IdentityProviders {identityProviderId} Parameters [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: IdentityProvider { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": null } 401 Unauthorized. 403 Forbidden. 404 Identity provider not found. 500 Internal server error. Get Identity Providers by Scheme Returns a list of IdentityProvider objects that follow a scheme. Request GET api/v1/IdentityProviders/schemes/{scheme} api v1 IdentityProviders schemes {scheme} Parameters [Required] string scheme Scheme name. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: IdentityProvider { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": null } 401 Unauthorized. 403 Forbidden. 404 Identity provider not found. 500 Internal server error. Get Identity Providers Returns a list of IdentityProvider objects. Request GET api/v1/IdentityProviders api v1 IdentityProviders Parameters [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of identity providers to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of identity providers to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": null }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": null } ] 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 500 Internal server error. Get Identity Provider Based on Scheme Get header for a scheme to check its validity. Request HEAD api/v1/IdentityProviders/schemes/{scheme} api v1 IdentityProviders schemes {scheme} Parameters [Required] string scheme Scheme name. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Identity provider not found. 500 Internal server error. Get Identity Provider Based on Id Get header for an identity provider to check if the identity provider exists. Request HEAD api/v1/IdentityProviders/{identityProviderId} api v1 IdentityProviders {identityProviderId} Parameters [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Get Header for Identity Providers Get header for identity providers to get the total number of identity providers. Request HEAD api/v1/IdentityProviders api v1 IdentityProviders Parameters This API call does not have any parameters. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Get all Identity Providers from Tenant Get all identity providers from a tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders api v1 Tenants {tenantId} IdentityProviders Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = False] bool ignoreAadConsentState Return AAD identity provider if at least one AAD tenant exists, regardless of the consent state. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of identity providers to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of identity providers to return. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": { \"User\": { \"SignIn\": true, \"Invitation\": true, \"Search\": false }, \"Group\": { \"Authorize\": false, \"Search\": false } }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": { \"User\": { \"SignIn\": true, \"Invitation\": true, \"Search\": false }, \"Group\": { \"Authorize\": false, \"Search\": false } } ] 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Get Identity Provider from Tenant Get an identity provider from a tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: IdentityProvider { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": { \"User\": { \"SignIn\": true, \"Invitation\": true, \"Search\": false }, \"Group\": { \"Authorize\": false, \"Search\": false } } 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Add Identity Provider to Tenant Add an existing identity provider to a tenant. This identity provider will be available in the Home Realm Discovery Page for users to sign-in or sign-up. Request POST api/v1/Tenants/{tenantId}/IdentityProviders api v1 Tenants {tenantId} IdentityProviders Parameters [Required] string tenantId Id of tenant. [FromBody] [Required] IdentityProviderAdd identityProviderAdd IdentityProviderAdd object. Property Name Data Type Required Description IdentityProviderId Guid Yes Identity provider Id to Add. AzureActiveDirectorySendConsent bool No A value indicating whether send consent email for Azure Active Directory. AzureActiveDirectoryConsentEmail string Yes Address to email consent. Only Azure Active Directory Admins have permission to consent to being allowed to interact with the tenant. The email does not have to be sent to an Admin. AzureActiveDirectoryConsentGivenName string Yes Preferred name to use in the consent email. AzureActiveDirectoryConsentSurname string Yes Preferred surname to use in the consent email. AzureActiveDirectoryTenant string Yes Azure Active Directory Domain Name (for example, mydomain.onmicrosoft.com). AzureActiveDirectoryConsentTypes string No Azure Active Directory Consent Types (for example, SignIn or SignIn;ReadAllUsersGroups). { \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"AzureActiveDirectorySendConsent\": false, \"AzureActiveDirectoryConsentEmail\": \"user@company.com\", \"AzureActiveDirectoryConsentGivenName\": \"Name\", \"AzureActiveDirectoryConsentSurname\": \"Surname\", \"AzureActiveDirectoryTenant\": \"AzureActiveDirectoryTenant\", \"AzureActiveDirectoryConsentTypes\": \"AzureActiveDirectoryConsentTypes\" } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: IdentityProvider { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"DisplayName\": \"Name\", \"Scheme\": \"Scheme\", \"UserIdClaimType\": \"UserIdClaimType\", \"ClientId\": \"ClientId\", \"IsConfigured\": false, \"Capabilities\": null } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Identity provider already exists in tenant. 500 Internal server error. Remove Identity Provider from Tenant Remove an identity provider from a tenant. Users provisioned with this identity provider will remain in the tenant, but will not be able to authenticate. An administrator cannot remove the identity provider they are signed in with. Request DELETE api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Administrator Response 204 Removed. 401 Unauthorized. 403 Forbidden. 404 IdentityProvider or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for Identity Provider Validate that a identity provider exists in the tenant. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Get Total Count of Identity Providers Return total number of identity providers in a tenant. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders api v1 Tenants {tenantId} IdentityProviders Parameters [Required] string tenantId Id of tenant. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Get a List of All Users on an Identity Provider Get a list of users that matches the query string on an identity provider that supports advanced integration, such as Azure Active Directory. The prerequisite is that the identity provider must have already consented to sharing access to its directory with the OCS tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/{IdpId}/Users?query={user}\u0026count={count}\u0026skipToken={optional} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} {IdpId} Users?query={user}\u0026count={count}\u0026skipToken={optional} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of users to return. [FromQuery] [Optional] string skiptoken An encoded string that identifies the set of users that was not returned. For example, if you specify a count of the first 50 users matching your query, the skiptoken identifies the 51st user. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: \"Results\": [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"GivenName\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"Email\", }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"GivenName\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"Email\", } ], \"SkipToken\": SkipToken Get a List of All Groups on an Identity Provider Get a list of groups that matches the query string on an identity provider that supports advanced integration, such as Azure Active Directory. The prerequisite is that the identity provider must have already consented to sharing access to its directory with the OCS tenant. The consent grants User.Read.All and GroupMember.Read.all permissions to the OCS tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/{IdpId}/Groups?query={group}\u0026count={count}\u0026skipToken={optional} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} {IdpId} Groups?query={group}\u0026count={count}\u0026skipToken={optional} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of groups to return. [FromQuery] [Optional] string skiptoken An encoded string that identifies the set of groups that was not returned. For example, if you specify a count of the first 5 groups matching your query, the skiptoken identifies the 6th group. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: \"Results\": [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"Email\": \"Email\", }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"Email\": \"Email\", } ], \"SkipToken\": SkipToken 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Get a List of All Groups that a User Belongs to on an Identity Provider Get a list of all groups that the specified user belongs to on an identity provider that supports advanced integration, such as Azure Active Directory. The prerequisite is that the identity provider must have already consented to sharing access to its directory with the OCS tenant. The consent grants User.Read.All and GroupMember.Read.all permissions to the OCS tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/{IdpId}/Users/{userId}/Groups?count={count}\u0026skipToken={optional} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} {IdpId} Users {userId} Groups?count={count}\u0026skipToken={optional} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid userId Id of User. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of groups to return. [FromQuery] [Optional] string skiptoken An encoded string that identifies the set of groups that was not returned. For example, if you request a count of the first 3 groups matching your query, the skiptoken identifies the 4th user. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: \"Users\": [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"GivenName\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"Email\", } ], \"Groups\": Groups \"SkipToken\": SkipToken 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Get a List of All Users Belonging to Group on an Identity Provider Get a list of all users belonging to a specific group on an identity provider that supports advanced integration, such as Azure Active Directory. The prerequisite is that the identity provider must have already consented to sharing access to its directory with the OCS tenant. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/{IdpId}/Groups/{GroupId}/Members?count={count}\u0026skipToken={optional} api v1 Tenants {tenantId} IdentityProviders {identityProviderId} {IdpId} Groups {GroupId} Members?count={count}\u0026skipToken={optional} Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider. [Required] Guid GroupId Id of Group. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of users to return. [FromQuery] [Optional] string skiptoken An encoded string that identifies the set of users that was not returned. For example, if you request a count of the first 50 users matching your query, the skiptoken identifies the 51st user. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: \"Results\": [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"Name\": \"Name\", \"Email\": \"Email\", } ], \"SkipToken\": SkipToken 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Get an Identity Provider Consent from a Tenant Get the consent information for an identity provider for a tenant. The ConsentState property, if returned, determines whether an identity provider consents to sharing access to its directory with the OCS tenant. For example, the expected ConsentState\u0027s for Azure Active Directory (AAD) include (Pending_)SignIn and (Pending_)ReadAllUsersGroups. Request GET api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Consent api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Consent Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider to check for consent. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: IdentityProviderConsent Microsoft Accounts and Google { \"Scheme\": \"Scheme\", } Azure Active Directory { \"Scheme\": \"aad\", \"AadTenantId\": \"00000000-0000-0000-0000-000000000000\", \"AadDomain\": \"AadDomain\", \"ConsentState\": \"ConsentState\" } 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Get Header for Identity Provider Consent Validate that a identity provider consent exists in the tenant. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Consent api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Consent Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider to check for consent. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Identity provider or tenant not found. 500 Internal server error. Update Identity Provider Consent of a Tenant Update the identity provider consent of a tenant. Currently only support Azure Active Directory. The consent grants User.Read.All and GroupMember.Read.all permissions to the OCS tenant. Request POST api/v1/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Consent api v1 Tenants {tenantId} IdentityProviders {identityProviderId} Consent Parameters [Required] string tenantId Id of tenant. [Required] Guid identityProviderId Id of identity provider to activate consent [FromBody] [Required] IdentityProviderConsent identityProviderConsent IdentityProviderConsent object. Property Name Data Type Required Description Scheme string Yes The scheme of the identity provider. AadTenantId string No Azure Active Directory Tenant Id. AadDomain string No Azure Active Directory Domain Name (for example, mydomain.onmicrosoft.com). AadConsentTypes string Yes Azure Active Directory Consent Types (for example, SignIn or SignIn;ReadAllUsersGroups). ConsentEmail string Yes Address to email consent. Only Azure Active Directory Admins have permission to consent to being allowed to interact with the tenant. The email does not have to be sent to an Admin. ConsentFirstName string Yes Preferred name to use in the consent email. ConsentOverride bool No A value indicating whether force a consent email to be sent for the specified ConsentTypes. { \"Scheme\": \"aad\", \"AadTenantId\": \"00000000-0000-0000-0000-000000000000\", \"AadDomain\": \" AadDomain\", \"AadConsentTypes\": \"AadConsentTypes\", \"ConsentFirstName\": \"Name\", \"ConsentEmail\": \"user@company.com\", \"ConsentOverride\": true } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 408 Operation timed out. 500 Internal server error."
                                                                             },
    "Content_Portal/Documentation/Identity/Identity_Invitation.html":  {
                                                                           "href":  "Content_Portal/Documentation/Identity/Identity_Invitation.html",
                                                                           "title":  "Invitation",
                                                                           "keywords":  "Invitation Invitations are issued after the creation of a User object in OCS, to begin the provisioning process for a user with one of the identity providers in a tenant. There can only be one invitation for a User at a time. An invitation can expire, at which time the Admin can either delete it, or extend it. When creating an invitation a Tenant Administrator has the option to resend the invitation email to the ContactEmail configured for the user the invitation is attached to. The email can be re-sent by updating the invitation. When an invitation expires the User cannot accept it. If the expiration date is extended the User can accept an invitation. Invitations that are past of their expiration date by more than two weeks will be deleted. The only way to provision a User after this, is to send a new invitation. Invitations are issued after the creation of a User object in OCS, to begin the provisioning process for a user with one of the identity providers in a tenant. There can only be one invitation for a user at a time. An invitation can expire, at which time the admin can either delete it, or extend it. When creating an invitation an account admin has the option to resend the invitation email to the ContactEmail configured for the user the invitation is attached to. The email can be re-sent by updating the invitation. When an invitation expires the user cannot accept it. If the expiration date is extended the User can accept an invitation. Invitations that are past of their expiration date by more than two weeks will be deleted. The only way to provision a user after this, is to send a new invitation. Properties For HTTP requests and responses, the Invitation object has the following properties and JSON-serialized body: Property Name Data Type Description Id string Unique Invitation Id. Issued DateTime Invitation issuing timestamp. Expires DateTime Invitation expiration timestamp. Accepted DateTime Invitation accepted timestamp. State InvitationStates Invitation state. Can be None (0), InvitationEmailSent (1), InvitationAccepted (2). TenantId string ID of the Tenant the invitation belongs to. UserId Guid ID of the User whom the invitation was issued to. IdentityProviderId Guid ID of the identity provider that must be used to accept the invitation. Serialized model { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:23.8288839-07:00\", \"Expires\": \"2020-03-30T15:34:23.8289157-07:00\", \"Accepted\": \"2020-03-30T15:34:23.8289199-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Invitation Get an Invitation from tenant. Request GET api/v1/Tenants/{tenantId}/Invitations/{invitationId} api v1 Tenants {tenantId} Invitations {invitationId} Parameters [Required] string tenantId Id of tenant. [Required] string invitationId Id of invitation. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Invitation { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:23.9320633-07:00\", \"Expires\": \"2020-03-30T15:34:23.9320714-07:00\", \"Accepted\": \"2020-03-30T15:34:23.9320781-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } 401 Unauthorized. 403 Forbidden. 404 Invitation or tenant not found. 500 Internal server error. Get Invitations Get all non-expired invitations from a Tenant. Optionally include expired invitations. Request GET api/v1/Tenants/{tenantId}/Invitations api v1 Tenants {tenantId} Invitations Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of invitations to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of invitations to return. [FromQuery] [Optional] [Default = False] bool includeExpiredInvitations Specify whether to return expired invitations. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:23.9353876-07:00\", \"Expires\": \"2020-03-30T15:34:23.9353947-07:00\", \"Accepted\": \"2020-03-30T15:34:23.9353985-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" }, { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:23.9354121-07:00\", \"Expires\": \"2020-03-30T15:34:23.9354132-07:00\", \"Accepted\": \"2020-03-30T15:34:23.9354151-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } ] 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Update Invitation Update an Invitation. Expired invitations will not be extended. automatically upon updates. Request PUT api/v1/Tenants/{tenantId}/Invitations/{invitationId} api v1 Tenants {tenantId} Invitations {invitationId} Parameters [Required] string tenantId Id of tenant. [Required] string invitationId Id of invitation. [FromBody] [Required] InvitationCreateOrUpdate invitationCreateOrUpdate New InvitationCreateOrUpdate object. Properties that are not set or are null will not be changed. Property Name Data Type Required Description ExpiresDateTime DateTime No Invitation expiration date. Must be in the future. Maximum allowed is two month in the future. Defaults to 21 days on creation. It should be in ISO 8601 and either include a Z at the end to represent UTC timezone or include the offset in hours. If neither is present time will be treated in the local time zone of the server. State InvitationStates No Set the state of invitation. For OSISoft internal use only. SendInvitation bool No Send an invitation email. Invitation will be sent to the ContactEmail in the User this invitation is attached to. Default is true. IdentityProviderId Guid No Identity provider to use for accepting this invitation. Required when creating an invitation. { \"ExpiresDateTime\": \"2020-03-30T15:34:23.9384167-07:00\", \"State\": 0, \"SendInvitation\": false, \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Invitation { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:23.9420124-07:00\", \"Expires\": \"2020-03-30T15:34:23.9420203-07:00\", \"Accepted\": \"2020-03-30T15:34:23.9420268-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Invitation or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Delete Invitation Delete an Invitation. Users who already have an invitation email will not be able to sign-up once the invitation is deleted. Request DELETE api/v1/Tenants/{tenantId}/Invitations/{invitationId} api v1 Tenants {tenantId} Invitations {invitationId} Parameters [Required] string tenantId Id of tenant. [Required] string invitationId Id of invitation. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Invitation or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for an Invitation Validate that an invitation exists. This endpoint is identical to the GET one, but it does not return an object in the body. Request HEAD api/v1/Tenants/{tenantId}/Invitations/{invitationId} api v1 Tenants {tenantId} Invitations {invitationId} Parameters [Required] string tenantId Id of tenant. [Required] string invitationId Id of invitation. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Invitation or tenant not found. 500 Internal server error. Get Header for Invitations Return total number of non-expired Invitations in a tenant. Optionally include expired invitations. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/Invitations api v1 Tenants {tenantId} Invitations Parameters [Required] string tenantId Id of Tenant. [FromQuery] [Optional] [Default = False] bool includeExpiredInvitations Specify to return expired invitations. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Get User\u0027s Invitation Get Invitation for a user. Request GET api/v1/Tenants/{tenantId}/Users/{userId}/Invitation api v1 Tenants {tenantId} Users {userId} Invitation Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Invitation { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:24.0533293-07:00\", \"Expires\": \"2020-03-30T15:34:24.0533376-07:00\", \"Accepted\": \"2020-03-30T15:34:24.0533445-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } 401 Unauthorized. 403 Forbidden. 404 Invitation, user, or tenant not found. 500 Internal server error. Create Invitation Create an invitation for a User. Should use when no other invitation exists for the user. Request POST api/v1/Tenants/{tenantId}/Users/{userId}/Invitation api v1 Tenants {tenantId} Users {userId} Invitation Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. [FromBody] [Required] InvitationCreateOrUpdate invitationCreateOrUpdate InvitationCreateOrUpdate object. Property Name Data Type Required Description ExpiresDateTime DateTime No Invitation expiration date. Must be in the future. Maximum allowed is two month in the future. Defaults to 21 days on creation. It should be in ISO 8601 and either include a Z at the end to represent UTC timezone or include the offset in hours. If neither is present time will be treated in the local time zone of the server. State InvitationStates No Set the state of invitation. For OSISoft internal use only. SendInvitation bool No Send an invitation email. Invitation will be sent to the ContactEmail in the user this invitation is attached to. Default is true. IdentityProviderId Guid No Identity provider to use for accepting this invitation. Required when creating an invitation. { \"ExpiresDateTime\": \"2020-03-30T15:34:24.0562697-07:00\", \"State\": 0, \"SendInvitation\": false, \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: Invitation { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:24.0564446-07:00\", \"Expires\": \"2020-03-30T15:34:24.0564479-07:00\", \"Accepted\": \"2020-03-30T15:34:24.0564518-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Invitation already exists. 500 Internal server error. Create or Update Invitation Create or update an invitation for a User. Request PUT api/v1/Tenants/{tenantId}/Users/{userId}/Invitation api v1 Tenants {tenantId} Users {userId} Invitation Parameters [Required] string tenantId Id of Tenant. [Required] Guid userId Id of User. [FromBody] [Required] InvitationCreateOrUpdate invitationCreateOrUpdate InvitationCreateOrUpdate object. Property Name Data Type Required Description ExpiresDateTime DateTime No Invitation expiration date. Must be in the future. Maximum allowed is two month in the future. Defaults to 21 days on creation. It should be in ISO 8601 and either include a Z at the end to represent UTC timezone or include the offset in hours. If neither is present time will be treated in the local time zone of the server. State InvitationStates No Set the state of invitation. For OSISoft internal use only. SendInvitation bool No Send an invitation email. Invitation will be sent to the ContactEmail in the User this invitation is attached to. Default is true. IdentityProviderId Guid No Identity provider to use for accepting this invitation. Required when creating an invitation. { \"ExpiresDateTime\": \"2020-03-30T15:34:24.0592464-07:00\", \"State\": 0, \"SendInvitation\": false, \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } Authorization Allowed for these roles: Tenant Administrator Response 200 Updated. Type: Invitation { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:24.059429-07:00\", \"Expires\": \"2020-03-30T15:34:24.0594334-07:00\", \"Accepted\": \"2020-03-30T15:34:24.059438-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } 201 Created. Type: Invitation { \"Id\": \"Id\", \"Issued\": \"2020-03-30T15:34:24.0594899-07:00\", \"Expires\": \"2020-03-30T15:34:24.0594924-07:00\", \"Accepted\": \"2020-03-30T15:34:24.0594966-07:00\", \"State\": 0, \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"UserId\": \"00000000-0000-0000-0000-000000000000\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\" } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 409 Invitation already exists. 500 Internal server error. Delete Invitation Delete an invitation for a user. Request DELETE api/v1/Tenants/{tenantId}/Users/{userId}/Invitation api v1 Tenants {tenantId} Users {userId} Invitation Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. 404 Invitation or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for User\u0027s Invitation Validate that Invitation exist for a user. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/Users/{userId}/Invitation api v1 Tenants {tenantId} Users {userId} Invitation Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. [FromQuery] [Optional] [Default = False] bool includeExpiredInvitations Specify whether to include expired invitations. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error."
                                                                       },
    "Content_Portal/Documentation/Identity/Identity_PersistedGrant.html":  {
                                                                               "href":  "Content_Portal/Documentation/Identity/Identity_PersistedGrant.html",
                                                                               "title":  "Persisted Grant",
                                                                               "keywords":  "Persisted Grant Persisted grants, such as refresh tokens or authorization codes, are used by OSIsoft Cloud Services to maintain some state about User authentication with regards to a client. For instance, refresh tokens, which are issued to hybrid clients, make it possible to determine when the client can be issued a new access token on behalf of the user without the users themselves being present. Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Client Ids of Persisted Grants for User Get enumerable of client IDs that have been issued an authorization code (not the same as the client type) on behalf of a user. Request GET api/v1/Tenants/{tenantId}/Users/{userId}/PersistedGrants api v1 Tenants {tenantId} Users {userId} PersistedGrants Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: List [ \"String\", \"String\" ] 401 Unauthorized. 403 Forbidden. 404 User not found. 500 Internal server error. Get Total Count of Persisted Grants for a User Validate whether there are any authorization code persisted grants for user. Request HEAD api/v1/Tenants/{tenantId}/Users/{userId}/PersistedGrants api v1 Tenants {tenantId} Users {userId} PersistedGrants Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 User not found. 500 Internal server error. Remove Persisted Grants Remove authorization code persisted grants for the user with the specified User Id in the tenant. Request DELETE api/v1/Tenants/{tenantId}/Users/{userId}/PersistedGrants api v1 Tenants {tenantId} Users {userId} PersistedGrants Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 204 Removed. 401 Unauthorized. 403 Forbidden. 404 User not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error."
                                                                           },
    "Content_Portal/Documentation/Identity/Identity_Secret.html":  {
                                                                       "href":  "Content_Portal/Documentation/Identity/Identity_Secret.html",
                                                                       "title":  "Secret",
                                                                       "keywords":  "Secret Secrets are used to authenticate both client credential clients and hybrid clients. A secret has an expiration date or can be created to never expire. We advise to avoid creating secrets that do not expire. After a secret expires it can no longer be used to authenticate the client. Any access token issued while a secret is still valid will be active until the token itself expires. The same applies to refresh tokens, which are issued to hybrid clients. Safe storage of secrets is your responsibility. OSIsoft Cloud Services does not store secret values, so once lost there is no way to retrieve the value of a secret. For some guidelines on use of secrets, refer to the Credential Management topic. Secrets are used to authenticate both client credential clients and hybrid clients. A secret has an expiration date or can be created to never expire. We advise to avoid creating secrets that do not expire. After a secret expires it can no longer be used to authenticate the client. Any access token issued while a secret is still valid will be active until the token itself expires. The same applies to refresh tokens, which are issued to hybrid clients. Safe storage of secrets is your responsibility. OSIsoft Cloud Services does not store secret values, so once lost there is no way to retrieve the value of a secret. Properties For HTTP requests and responses, the secret object has the following properties and JSON-serialized body: Property Name Data Type Description Id int32 The Id for the secret. Note: This is currently an auto-incremented integer. Description string The description. Value string The secret value. Expiration DateTime The expiration date. Type string The type of the client secret. Serialized model { \"Id\": 0, \"Description\": \"description\", \"Value\": \"Value\", \"Expiration\": \"2020-03-30T15:34:23.1822657-07:00\", \"Type\": \"Type\" } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Hybrid Client Secrets Get all secrets for a Hybrid Client. Total number of secrets in the client set in the Total-Count header. Request GET api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets api v1 Tenants {tenantId} HybridClients {clientId} Secrets Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of clients to skip. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of clients to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.188507-07:00\", \"Expires\": false, \"Description\": \"description\" }, { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.1888317-07:00\", \"Expires\": false, \"Description\": \"description\" } ] 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get Hybrid Client Secret Get a hybrid client secret. Request GET api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} HybridClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: ClientSecret { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.1933632-07:00\", \"Expires\": false, \"Description\": \"description\" } 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 500 Internal server error. Add Hybrid Client Secret Add a new secret to a hybrid client. A client can have a maximum of 10 secrets. We advise against creating secrets that do not expire. Request POST api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets api v1 Tenants {tenantId} HybridClients {clientId} Secrets Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [FromBody] [Required] ClientSecretCreateOrUpdate clientSecretCreateOrUpdate ClientSecretCreateOrUpdate object. Property Name Data Type Required Description Expiration DateTime No Expiration date for the client secret. Will be null if the secret does not expire. Expires bool No Determines if the secret expires. Defaults to true. If Expires is set to true (or null) and Expiration is not null, expiration of this secret will be enforced. If Expires is set to true (or null) and Expiration is null, a 400 error will be returned. If Expires is set to false and Expiration is not null, a 400 error will be returned. If Expires is set to false and Expiration is null, there will be no expiration of this secret. Description string No Description for the client secret. We suggest being as descriptive as possible. This field will make identifying secrets easier. { \"Expiration\": \"2020-03-30T15:34:23.1969711-07:00\", \"Expires\": false, \"Description\": \"description\" } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: ClientSecretResponse { \"Secret\": \"Secret\", \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.2004265-07:00\", \"Expires\": false, \"Description\": \"description\" } 401 Unauthorized. 403 Forbidden. 404 Client or Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Update Hybrid Client Secret Update a hybrid client secret. It can take up to one hour for the update to manifest in the authentication process. Request PUT api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} HybridClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. [FromBody] [Required] ClientSecretCreateOrUpdate clientSecretCreateOrUpdate ClientSecretCreateOrUpdate object. Properties that are not set or are null will not be changed. Property Name Data Type Required Description Expiration DateTime No Expiration date for the client secret. Will be null if the secret does not expire. Expires bool No Determines if the secret expires. Defaults to true. If Expires is set to true (or null) and Expiration is not null, expiration of this secret will be enforced. If Expires is set to true (or null) and Expiration is null, a 400 error will be returned. If Expires is set to false and Expiration is not null, a 400 error will be returned. If Expires is set to false and Expiration is null, there will be no expiration of this secret. Description string No Description for the client secret. We suggest being as descriptive as possible. This field will make identifying secrets easier. { \"Expiration\": \"2020-03-30T15:34:23.2055482-07:00\", \"Expires\": false, \"Description\": \"description\" } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: ClientSecret { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.2057205-07:00\", \"Expires\": false, \"Description\": \"description\" } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Delete Hybrid Client Secret Delete a secret from a hybrid client. It can take up to one hour for deletion to manifest in the authentication process. Access tokens issued using this secret will be valid until their expiration. Request DELETE api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} HybridClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. Authorization Allowed for these roles: Tenant Administrator Response 204 Success. 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for Hybrid Client Secret Validate that a secret with given Id exists in the client. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} HybridClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 500 Internal server error. Get Total Count of Hybrid Client Secrets Return total number of secrets in a hybrid client. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/HybridClients/{clientId}/Secrets api v1 Tenants {tenantId} HybridClients {clientId} Secrets Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get Client Credential Client Secrets Get all secrets for a client credential client. Total number of secrets in the client set in the Total-Count header. Request GET api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of clients to skip. From query. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of clients to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.421257-07:00\", \"Expires\": false, \"Description\": \"description\" }, { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.421273-07:00\", \"Expires\": false, \"Description\": \"description\" } ] 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error. Get Client Credential Client Secret Get a client credential client secret. Request GET api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: ClientSecret { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.423542-07:00\", \"Expires\": false, \"Description\": \"description\" } 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 500 Internal server error. Add Client Credential Client Secret Add a new secret to a client credential client. A client can have a maximum of 10 secrets. We advise against creating secrets that do not expire. Request POST api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [FromBody] [Required] ClientSecretCreateOrUpdate clientSecretCreateOrUpdate ClientSecretCreateOrUpdate object. Property Name Data Type Required Description Expiration DateTime No Expiration date for the client secret. Will be null if the secret does not expire. Expires bool No Determines if the secret expires. Defaults to true. If Expires is set to true (or null) and Expiration is not null, expiration of this secret will be enforced. If Expires is set to true (or null) and Expiration is null, a 400 error will be returned. If Expires is set to false and Expiration is not null, a 400 error will be returned. If Expires is set to false and Expiration is null, there will be no expiration of this secret. Description string No Description for the client secret. We suggest being as descriptive as possible. This field will make identifying secrets easier. { \"Expiration\": \"2020-03-30T15:34:23.4255715-07:00\", \"Expires\": false, \"Description\": \"description\" } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: ClientSecretResponse { \"Secret\": \"Secret\", \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.4256863-07:00\", \"Expires\": false, \"Description\": \"description\" } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Update Client Credential Client Secret Update a client credential client secret. It can take up to one hour for the update to manifest in the authentication process. Request PUT api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of Tenant. [Required] string clientId Id of Client. [Required] int32 secretId Id of Secret. [FromBody] [Required] ClientSecretCreateOrUpdate clientSecretCreateOrUpdate ClientSecretCreateOrUpdate object. Properties that are not set or are null will not be changed. Property Name Data Type Required Description Expiration DateTime No Expiration date for the client secret. Will be null if the secret does not expire. Expires bool No Determines if the secret expires. Defaults to true. If Expires is set to true (or null) and Expiration is not null, expiration of this secret will be enforced. If Expires is set to true (or null) and Expiration is null, a 400 error will be returned. If Expires is set to false and Expiration is not null, a 400 error will be returned. If Expires is set to false and Expiration is null, there will be no expiration of this secret. Description string No Description for the client secret. We suggest being as descriptive as possible. This field will make identifying secrets easier. { \"Expiration\": \"2020-03-30T15:34:23.4279471-07:00\", \"Expires\": false, \"Description\": \"description\" } Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: ClientSecret { \"Id\": 0, \"Expiration\": \"2020-03-30T15:34:23.4280505-07:00\", \"Expires\": false, \"Description\": \"description\" } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Delete Client Credential Client Secret Delete a Secret from a client credential client. It can take up to one hour for deletion to manifest in the authentication process. Access tokens issued using this secret will be valid until their expiration. Request DELETE api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. Authorization Allowed for these roles: Tenant Administrator Response 204 Success. 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for Client Credential Client Secret Validate that a secret with given Id exists in the client. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets/{secretId} api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets {secretId} Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. [Required] int32 secretId Id of secret. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Secret, client, or tenant not found. 500 Internal server error. Get Total Count of Client Credential Client Secrets Return total number of secrets in a client. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets api v1 Tenants {tenantId} ClientCredentialClients {clientId} Secrets Parameters [Required] string tenantId Id of tenant. [Required] string clientId Id of client. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 Client or tenant not found. 500 Internal server error."
                                                                   },
    "Content_Portal/Documentation/Identity/Identity_User.html":  {
                                                                     "href":  "Content_Portal/Documentation/Identity/Identity_User.html",
                                                                     "title":  "User",
                                                                     "keywords":  "User Users consume resources in a tenant. They are invited by the Admin of the tenant and should already have a tenant in one of the configured identity providers for this tenant. A User is fully provisioned in OSIsoft Cloud Services only after they have accepted the invitation and successfully logged with an identity provider. OSIsoft Cloud Services does not maintain user credentials, but it delegates authentication to the identity provider the user logged in with at first. Once logged in the user cannot change the identity provider it signed up with. A tenant can only have one user with a given email to an identity provider. If a user has multiple aliases in the same identity provider, they will not be able to create multiple corresponding OSIsoft Cloud Services users. Users have roles associated with them. These roles determine what a user is authorized to do in the tenant. Roles are assigned to a user upon creation and can be modified by an Admin. We allow the change of some User fields and the complete deletion of a user. For some recommendations on least privilege for users and clients, refer to the Least Privilege topic. Users consume resources in a tenant. They are invited by the admin of the tenant and should already have an account in one of the configured identity providers for this tenant. A user is fully provisioned in OSIsoft Cloud Services only after they have accepted the invitation and successfully logged with an identity provider. OSIsoft Cloud Services does not maintain user credentials, but it delegates authentication to the identity provider the user logged in with at first. Once logged in the user cannot change the identity provider it signed up with. A tenant can only have one user with a given email to an identity provider. If a user has multiple aliases in the same identity provider, they will not be able to create multiple corresponding OSIsoft Cloud Services users. Users have roles associated with them. These roles determine what a user is authorized to do in the tenant. Roles are assigned to a user upon creation and can be modified by an Admin. We allow the change of some User fields and the complete deletion of a user. Properties For HTTP requests and responses, the User object has the following properties and JSON-serialized body: Property Name Data Type Description Id Guid Unique User ID. GivenName string Given name of user. Surname string Surname of user. Name string Nname of user. Email string Email of user. ContactEmail string Contact email for user. User will only be contacted through this email. ContactGivenName string Preferred contact name for user. ContactSurname string Preferred contact surname for user. ExternalUserId string Provider id for user. This is the unique ID we get from the identity provider. IdentityProviderId Guid Identity Provider Id used to authenticate user. Will be set once the user accepts an invitation. If not specified when sending the invitation to the User, it can be any of the Identity Provider Ids configured for this tenant. RoleIds Guid[] List of strings of RoleIds. Serialized model { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieve after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read here on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will look as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Users from a Tenant Get a list of users from a tenant. Optionally, get a list of requested users. Total number of users in the Tenant set in the Total-Count header. Request GET api/v1/Tenants/{tenantId}/Users api v1 Tenants {tenantId} Users Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] Guid[] id Unordered list of User Ids to get. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of users to skip. Ignored if a list of Ids is passed. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of users to return. Ignored if a list of Ids is passed. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: List [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } ] 207 Partial success. Type: UserMultiStatusResponse { \"OperationId\": \"OperationId\", \"Error\": \"Error\", \"Reason\": \"Reason\", \"ChildErrors\": [ { \"StatusCode\": 0, \"ModelId\": \"ModelId\", \"OperationId\": \"OperationId\", \"Error\": \"Error\", \"Reason\": \"Reason\", \"Resolution\": \"Resolution\" }, { \"StatusCode\": 0, \"ModelId\": \"ModelId\", \"OperationId\": \"OperationId\", \"Error\": \"Error\", \"Reason\": \"Reason\", \"Resolution\": \"Resolution\" } ], \"Data\": [ { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] }, { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } ] } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 500 Internal server error. Get Users\u0027 Invitation Status Get invitation statuses for multiple users. Optionally restrict it only to users of a specific invitation status. The user status can be: InvitationAccepted (0), NoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4). Request GET api/v1/Tenants/{tenantId}/Users/Status api v1 Tenants {tenantId} Users Status Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] Guid[] id Unordered list of User Ids to get. [FromQuery] [Optional] [Default = \"\"] string query Query to execute. Currently not supported. [FromQuery] [Optional] [Default = 0] int32 skip Number of users to skip. Ignored if a list of Ids is passed. [FromQuery] [Optional] [Default = 100] int32 count Maximum number of users to return. Ignored if a list of Ids is passed. [FromQuery] [Optional] [Default = \"\"] string[] status Only return statuses that match these values. Possible User statuses are: InvitationAccepted, NoInvitation, InvitationNotSent, InvitationSent, InvitationExpired. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: List [ { \"InvitationStatus\": 0, \"User\": { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } }, { \"InvitationStatus\": 0, \"User\": { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } } ] 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 500 Internal server error. 404 Tenant not found. Get User from a Tenant Get a User from tenant. Request GET api/v1/Tenants/{tenantId}/Users/{userId} api v1 Tenants {tenantId} Users {userId} Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of User. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: User { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 500 Internal server error. Get User\u0027s Invitation Status Get invitation status for a User. It can be: InvitationAccepted (0), NoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4). Request GET api/v1/Tenants/{tenantId}/Users/{userId}/Status api v1 Tenants {tenantId} Users {userId} Status Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: UserStatus { \"InvitationStatus\": 0, \"User\": { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } } 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 500 Internal server error. Get User\u0027s Preferences Get preferences from a user. User preferences can be any valid JSON object. A common use case is to store UI preferences for the user. Request GET api/v1/Tenants/{tenantId}/Users/{userId}/Preferences api v1 Tenants {tenantId} Users {userId} Preferences Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: JObject {} 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 500 Internal server error. Update User\u0027s Preferences Update preferences for a user. Request PUT api/v1/Tenants/{tenantId}/Users/{userId}/Preferences api v1 Tenants {tenantId} Users {userId} Preferences Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. [FromBody] [Required] JObject preferences JSON object preferences. {} Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: JObject {} 400 Missing preferences. 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Create User Create a User in the tenant. This endpoint does not create an invitation for the user. You will need to create an invitation in the respective endpoint for this user, otherwise they will not be able to finish the sign-up process. Users have unique Ids in a tenant. Currently there is a limit of 50000 users per tenant. For Windows Active Directory users, the externalUserId must be specified. Request POST api/v1/Tenants/{tenantId}/Users api v1 Tenants {tenantId} Users Parameters [Required] string tenantId Id of tenant. [FromBody] [Required] UserCreateOrUpdate userCreateOrUpdate UserCreateOrUpdate object. Property Name Data Type Required Description Id Guid No User Id for the user. When creating a user, if User ID is not specified, one will be generated. ExternalUserId string No User ExternalUserId for the user. Must be specified if identity provider is Windows Active Directory. ContactGivenName string No Preferred name to be used when contacting user. ContactSurname string No Preferred surname to be used when contacting user. ContactEmail string No Preferred contact email to be used. This does not have to be the same as the user\u0027s identity provider email. IdentityProviderId Guid No Identity provider this user will be required to use to login. If null, the identity provider Id will be set when creating the invitation. RoleIds Guid[] No List of strings of RoleIds. { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"ExternalUserId\": \"ExternalUserId\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ContactEmail\": \"user@company.com\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } Authorization Allowed for these roles: Tenant Administrator Response 201 Created. Type: User { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 400 Missing or invalid inputs, or the User limit exceeded for tenant. 401 Unauthorized. 403 Forbidden. 404 Tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Update User in a Tenant Update a user in a tenant. The Id of a user cannot be changed. Request PUT api/v1/Tenants/{tenantId}/Users/{userId} api v1 Tenants {tenantId} Users {userId} Parameters [Required] string tenantId Id of Tenant. [Required] Guid userId Id of User. [FromBody] [Required] UserCreateOrUpdate userCreateOrUpdate UserCreateOrUpdate object. Properties that are not set or are null will not be changed. Property Name Data Type Required Description Id Guid No User Id for the user. When creating a user, if User ID is not specified, one will be generated. ExternalUserId string No User ExternalUserId for the user. Must be specified if identity provider is Windows Active Directory. ContactGivenName string No Preferred name to be used when contacting user. ContactSurname string No Preferred surname to be used when contacting user. ContactEmail string No Preferred contact email to be used. This does not have to be the same as the user\u0027s identity provider email. IdentityProviderId Guid No Identity provider this user will be required to use to login. If null, the Identity Provider Id will be set when creating the invitation. RoleIds Guid[] No List of strings of RoleIds. { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"ExternalUserId\": \"ExternalUserId\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ContactEmail\": \"user@company.com\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } Authorization Allowed for these roles: Tenant Administrator Response 200 Updated User. Type: User { \"Id\": \"00000000-0000-0000-0000-000000000000\", \"GivenName\": \"Name\", \"Surname\": \"Surname\", \"Name\": \"Name\", \"Email\": \"user@company.com\", \"ContactEmail\": \"user@company.com\", \"ContactGivenName\": \"Name\", \"ContactSurname\": \"Surname\", \"ExternalUserId\": \"ExternalUserId\", \"IdentityProviderId\": \"00000000-0000-0000-0000-000000000000\", \"RoleIds\": [ \"00000000-0000-0000-0000-000000000000\", \"00000000-0000-0000-0000-000000000000\" ] } 400 Missing or invalid inputs. 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Delete User in a Tenant Delete a user. Admins cannot delete themselves. Deleting a user does not invalidate any of the existing access tokens, but it prevents this user from being able to authenticate in the future. Existing access tokens for the user will be valid until their expiration date. Refresh tokens on behalf of the user will no longer be valid after the user has been deleted. Request DELETE api/v1/Tenants/{tenantId}/Users/{userId} api v1 Tenants {tenantId} Users {userId} Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Administrator Response 204 Deleted. 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 405 Method not allowed at this base URL. Try the request again at the Global base URL. 408 Operation timed out. 500 Internal server error. Get Header for User Validate that a user exists. This endpoint is identical to the GET one, but it does not return an object in the body. Request HEAD api/v1/Tenants/{tenantId}/Users/{userId} api v1 Tenants {tenantId} Users {userId} Parameters [Required] string tenantId Id of tenant. [Required] Guid userId Id of user. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 User exists. Type: Void 401 Unauthorized. 403 Forbidden. 404 User does not exist. 500 Internal server error. Get Total Count of Users Return total number of users in a tenant. Optionally, check based on a list of requested users. The value will be set in the Total-Count header. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/Users api v1 Tenants {tenantId} Users Parameters [Required] string tenantId Id of tenant. [FromQuery] [Optional] [Default = \"\"] Guid[] id Unordered list of User Ids. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 User not found. 500 Internal server error. Get Header for User\u0027s Preferences Validate that there are preferences for a user. This endpoint is identical to the GET one but it does not return any objects in the body. Request HEAD api/v1/Tenants/{tenantId}/Users/{userId}/Preferences api v1 Tenants {tenantId} Users {userId} Preferences Parameters [Required] string tenantId Id of Tenant. [Required] Guid userId Id of User. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success. Type: Void 401 Unauthorized. 403 Forbidden. 404 User or tenant not found. 500 Internal server error."
                                                                 },
    "Content_Portal/Documentation/Management/Account_ClientRole_1.html":  {
                                                                              "href":  "Content_Portal/Documentation/Management/Account_ClientRole_1.html",
                                                                              "title":  "Client roles",
                                                                              "keywords":  "Client roles Client roles authorize API requests made by clients to various OCS features. Clients can be assigned more than one role , but all clients have the Tenant Member role. The following are currently available client Roles : Tenant Administrator: Can add, edit, and remove data using APIs. Tenant Member: Can read data using most APIs. Properties For HTTP requests and responses, the ClientRole object has the following properties and JSON-serialized body: Property Name Data Type Description ClientId string String value that identifies the client. RoleId string String value that identifies the role. { \"ClientId\": \"clientid\", \"RoleId\": \"roleid\" } Replace Client Roles Replaces the Roles of a client with a new list of roles. Request PUT api/v1/Tenants/{tenantId}/Clients/{clientId}/Roles api v1 Tenants {tenantId} Clients {clientId} Roles Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to which the client belongs. [Required] [FromRoute] string clientId The identifier of the client whose Roles will be replaced. [Required] [FromBody] [Role] roleList List of Role objects to set as the Roles for the specified client. Authorization Roles of a client can only be replaced by a Tenant Administrator. Response Status Code Return Type Description 200 [Role] Returns a list of all Role objects assigned to the user specified by clientId after the replacement operation is complete. 400 Nothing is returned Could not replace Roles due to missing or invalid input. 403 Nothing is returned Unauthorized to replace Roles of this client. 404 Nothing is returned The client was not found in the specified Tenant . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Find Client Roles Retrieves all Roles from a client. Request GET api/v1/Tenants/{tenantId}/Clients/{clientId}/Roles api v1 Tenants {tenantId} Clients {clientId} Roles Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to which the client belongs. [Required] [FromRoute] string clientId The identifier of the client whose Roles will be retrieved. [Optional] [Default = \"0\"] [FromQuery] int32 skip Number of Roles to ignore. [Optional] [Default = \"100\"] [FromQuery] int32 count Number of Roles to return. [Optional] [Default = \"\"] [FromRoute] string query Unsupported parameter. Authorization Roles can be retrieved by a Tenant Administrator. Response Status Code Return Type Description 200 [Role] Returns a list of Role objects belonging to the client with the specified clientId. 400 Nothing is returned Could not retrieve Roles from the client due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve Roles from this client. 404 Nothing is returned The client was not found in the specified Tenant ."
                                                                          },
    "Content_Portal/Documentation/Management/Account_Namespace_1.html":  {
                                                                             "href":  "Content_Portal/Documentation/Management/Account_Namespace_1.html",
                                                                             "title":  "Namespaces",
                                                                             "keywords":  "Namespaces A namespace is a logical unit of organization for data within a tenant. It is a collection of types, streams, and stream views. Each tenant may contain more than one namespace. Before you can put any data into OCS for a given tenant, a namespace must be created within the scope of that tenant. Namespace identifiers are unique within an account. Requirements for namespace Ids are the following: Must contain 100 characters or fewer Must only contain alphanumeric characters, underscores, dashes, spaces, and periods Must not contain two consecutive periods Must not start or end with a period Must not start with two consecutive underscores In practice, namespaces may correspond to a specific set of infrastructure assets, but more commonly correspond to virtual partitions within a single set of assets. You can create one or more namespaces within an SDS tenant. Each namespace is effectively an instance of SDS, within which you create SDS types and streams, stream views, data views, and metadata. Properties For HTTP requests and responses, the Namespace object has the following properties and JSON-serialized body: Property Name Data Type Description Id string Nme of this Namespace; unique within a tenant\u0027s namespaces. Region string The region that the namespace is provisioned in. Self string The namespace\u0027s URI. Description string Description of this namespace. State NamespaceProvisioningState Current state of this namespace. { \"Id\": \"id\", \"Region\": \"region\", \"Self\": \"self\", \"Description\": \"description\", \"State\": 0, } Region When a namespace is created, all resources are created in the namespace\u0027s region. Resources created in this namespace (for example: SDS types, streams, and stream views) will be created in the region of the namespace, and any data stored in the namespace will be stored in that region. Read and write operations at the namespace level and within a namespace utilize the base URL of the region in which the namespace resides. The Self property on each namespace provides the complete URL for all operations within that namespace. Get All Namespaces Returns all Namespaces owned by the specified Tenant that the caller has access to. Request GET api/v1/Tenants/{tenantId}/Namespaces api v1 Tenants {tenantId} Namespaces Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. Authorization A Namespace can only be retrieved if the current principal has Read access. Response Status Code Return Type Description 200 [Namespace] Returns a list of all Namespace objects for the specified tenantId that the caller has access to. 400 Nothing is returned Could not retrieve Namespaces due to missing or invalid input. 403 Nothing is returned Unauthorized to access the tenant\u0027s Namespaces . Get Namespace by Id Returns a Namespace with the specified Id. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId} api v1 Tenants {tenantId} Namespaces {namespaceId} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to return. Authorization A Namespace can only be retrieved if the current principal has Read access. Response Status Code Return Type Description 200 Namespace Returns a Namespace object with the specified namespaceId. 400 Nothing is returned Could not retrieve the Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to access this Namespace . 404 Nothing is returned Namespace not found in the specified tenant. Create New Namespace Creates a new Namespace in the specified Tenant . Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId?} api v1 Tenants {tenantId} Namespaces {namespaceId?} Parameters [Required] [FromRoute] string tenantId The tenant identifier where the Namespace will be created. [Required] [FromBody] Namespace namespaceToCreate The new Namespace to be created. [Optional] [Default = \"\"] [FromRoute] string namespaceId The Id of the new Namespace . The Id can also be specified in the namespaceToCreate. If it is omitted in both, the Id will be generated. Authorization A Namespace can only be created if the current principal has Write access. Response Status Code Return Type Description 201 Namespace Returns the created Namespace object. 302 Nothing is returned Returns the location of the existing Namespace object. 400 Nothing is returned Could not create the Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to create a Namespace in this tenant. 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. 409 Nothing is returned A Namespace already exists with different values. Update Namespace Updates Namespace information: Description and TierId. The AccessControlList and Owner\u0027s Trustee can only be updated through their own routes. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId} api v1 Tenants {tenantId} Namespaces {namespaceId} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to update. [Required] [FromBody] Namespace newProperties The new details to store for the Namespace . Authorization A Namespace can only be updated if the current principal has Write access. Response Status Code Return Type Description 200 Namespace Returns the updated Namespace . 400 Nothing is returned Could not update the Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to update the Namespace . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Delete Namespace Deletes a Namespace in the specified Tenant . Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId} api v1 Tenants {tenantId} Namespaces {namespaceId} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to delete. Authorization A Namespace can only be deleted if the current principal has Delete access. Response Status Code Return Type Description 204 Nothing is returned The Namespace was deleted. 400 Nothing is returned Could not delete the Namespace due to an invalid state. 403 Nothing is returned Unauthorized to delete the Namespace . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Get Namespace AccessControlList Returns the AccessControlList that is used to authorize access to a Namespace . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/accesscontrol api v1 Tenants {tenantId} Namespaces {namespaceId} accesscontrol Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to access. Authorization An AccessControlList can only be retrieved if the current principal has Read access. Response Status Code Return Type Description 200 AccessControlList Returns the AccessControlList for the specified Namespace . 400 Nothing is returned Could not retrieve the AccessControlList of the specified Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to get the AccessControlList for the specified Namespace . Set Namespace AccessControlList Updates the AccessControlList that is used to authorize access to a Namespace . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/accesscontrol api v1 Tenants {tenantId} Namespaces {namespaceId} accesscontrol Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to access. [Required] [FromBody] AccessControlList newAccessControlList The updated AccessControlList for the Namespace . Authorization An AccessControlList can only be updated if the current principal has ManageAccessControl access. Response Status Code Return Type Description 200 AccessControlList Returns the updated AccessControlList . 400 Nothing is returned Could not update the AccessControlList of the specified Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to update the AccessControlList for the specified Namespace . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Get Namespace Owner Returns the Owner\u0027s Trustee for a given Namespace . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/owner api v1 Tenants {tenantId} Namespaces {namespaceId} owner Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to access. Authorization An Owner\u0027s Trustee can only be retrieved if the current principal has Read access. Response Status Code Return Type Description 200 Trustee Returns the Owner\u0027s Trustee of the specified Namespace . 400 Nothing is returned Could not retrieve the Owner\u0027s Trustee of the specified Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to get the Owner\u0027s Trustee of the specified Namespace . Set Namespace Owner Changes the Owner\u0027s Trustee for a given Namespace . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/owner api v1 Tenants {tenantId} Namespaces {namespaceId} owner Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string namespaceId The identifier of the Namespace to access. [Required] [FromBody] Trustee newOwner The new Owner\u0027s Trustee of the Namespace . Authorization An Owner\u0027s Trustee can only be changed if the current principal has ManageAccessControl access. Response Status Code Return Type Description 200 Trustee Returns the new Owner\u0027s Trustee of the specified Namespace . 400 Nothing is returned Could not change the Owner\u0027s Trustee of the specified Namespace due to missing or invalid input. 403 Nothing is returned Unauthorized to change the Owner\u0027s Trustee of the specified Namespace . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL."
                                                                         },
    "Content_Portal/Documentation/Management/Account_Role_1.html":  {
                                                                        "href":  "Content_Portal/Documentation/Management/Account_Role_1.html",
                                                                        "title":  "Roles",
                                                                        "keywords":  "Roles A Role is a representation of a user???s job that is used to authorize access to resources necessary to accomplish that job. A user may have multiple roles assigned to it. All users are assigned the Tenant Member role by default. There are two predefined Roles for OCS accounts. Check the user or client role APIs for more information. Tenant Administrator Tenant Member Properties For HTTP requests and responses, the Role object has the following properties and JSON-serialized body: Property Name Data Type Description Id string Unique identifier for this role. Generated by the server upon Creation. Name string Name of this role. Description string Description of this role. RoleScope RoleScope Scope of this role. CommunityId string Unique identifier of Community for this role, if this is a Community Role, null otherwise. RoleTypeId string Unique identifier of Role Type for this role, if this is a tenant Role and is not a customer defined Role. { \"Id\": \"id\", \"Name\": \"name\", \"Description\": \"description\", \"RoleScope\": 0, \"CommunityId\": \"communityid\", \"RoleTypeId\": \"roletypeid\" } Create Tenant Role Creates a new tenant Role . Request POST api/v1/Tenants/{tenantId}/Roles api v1 Tenants {tenantId} Roles Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromBody] Role role The new Role to be created. Authorization Authorized for Tenant Administrators of the specified tenant. Response Status Code Return Type Description 201 Role Returns the new Role . 302 Nothing is returned Returns the location of the existing Role object. 400 Nothing is returned Could not create a new Role due to missing or invalid input. 403 Nothing is returned Unauthorized to create the new Role in the specified tenant. 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. 409 Nothing is returned A Role already exists with different values. Delete Tenant Role Deletes any tenant scoped, non built-in Role by its Role Id. Request DELETE api/v1/Tenants/{tenantId}/Roles/{roleId} api v1 Tenants {tenantId} Roles {roleId} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string roleId The identifier of the Role to delete. Authorization Authorized for Tenant Administrators of the specified tenant. Response Status Code Return Type Description 204 Nothing is returned The Role was deleted. 400 Nothing is returned Could not delete specified Role due to missing or invalid input. 403 Nothing is returned Unauthorized to delete the specified Role . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Get Tenant Role Retrieves a tenant Role based on the specified tenant Id and role Id. Request GET api/v1/Tenants/{tenantId}/Roles/{roleId} api v1 Tenants {tenantId} Roles {roleId} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string roleId The identifier of the Role to return. Authorization Authorized for Tenant Administrators of the specified tenant. Response Status Code Return Type Description 200 Role Returns the Role with with specified Id roleId. 400 Nothing is returned Could not retrieve the specified Role due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve tenant Roles from this tenant. Get Tenant Roles Retrieves all tenant Roles for the specified tenant Id. Request GET api/v1/Tenants/{tenantId}/Roles api v1 Tenants {tenantId} Roles Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Optional] [Default = \"0\"] [FromQuery] int32 skip Number of Roles to ignore. [Optional] [Default = \"100\"] [FromQuery] int32 count Number of Roles to be returned. [Optional] [Default = \"\"] [FromRoute] string query Unsupported parameter. Authorization Authorized for Tenant Members of the specified tenant. Response Status Code Return Type Description 200 [Role] Returns a list of Roles . 400 Nothing is returned Could not retrieve tenant Roles due to missing or invalid input. Update Tenant Role Updates a Role by its Role Id. Request PUT api/v1/Tenants/{tenantId}/Roles/{roleId} api v1 Tenants {tenantId} Roles {roleId} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string roleId The identifier of the Role to update. [Required] [FromBody] Role role The updated Role for this request. Authorization Authorized for Tenant Administrators of the specified tenant. Response Status Code Return Type Description 200 Role Returns the updated Role with Id roleId. 400 Nothing is returned Could not update specified Role due to missing or invalid input. 403 Nothing is returned Unauthorized to update the Role in the specified tenant. 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL."
                                                                    },
    "Content_Portal/Documentation/Management/Account_RootAccessControl_1.html":  {
                                                                                     "href":  "Content_Portal/Documentation/Management/Account_RootAccessControl_1.html",
                                                                                     "title":  "Root Access Control",
                                                                                     "keywords":  "Root Access Control APIs to manage default access to entities governed by an AccessControlList . Get Root Namespace AccessControlList Retrieves the AccessControlList that is used to authorize access to a Namespace if none is specified during creation. HTTP GET api/v1/Tenants/{tenantId}/AccessControl/Namespaces api v1 Tenants {tenantId} AccessControl Namespaces Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. Authorization A root AccessControlList can only be retrieved if the current principal has Read access. Response Status Code Return Type Description 200 AccessControlList Returns the root AccessControlList for Namespaces . 400 Nothing is returned Could not retrieve the root AccessControlList for Namespaces due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve the root AccessControlList for Namespaces . Set Root AccessControlList Modifies the AccessControlList that is used to authorize access to a Namespace if none is specified during creation. Request PUT api/v1/Tenants/{tenantId}/AccessControl/Namespaces api v1 Tenants {tenantId} AccessControl Namespaces Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to modify. [Required] [FromBody] AccessControlList newAccessControlList The new root AccessControlList for Namespaces . Authorization A root AccessControlList can only be modified if the current principal has ManageAccessControl access. Response Status Code Return Type Description 200 AccessControlList Returns the modified root AccessControlList for Namespaces . 400 Nothing is returned Could not modify the root AccessControlList for Namespaces due to missing or invalid input. 403 Nothing is returned Unauthorized to change the root AccessControlList for Namespaces . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL."
                                                                                 },
    "Content_Portal/Documentation/Management/Account_ServiceBlog.html":  {
                                                                             "href":  "Content_Portal/Documentation/Management/Account_ServiceBlog.html",
                                                                             "title":  "Service Blog",
                                                                             "keywords":  "Service Blog API\u0027s for reading entries posted on the Service Blog. Get Service Blog Entries Returns blog entries ordered by time posted. Request GET api/v1/ServiceBlog/Entries api v1 ServiceBlog Entries Parameters [Optional] [Default = \"0\"] [FromQuery] int32 skip Number of blogs to skip for paging purposes. [Optional] [Default = \"100\"] [FromQuery] int32 count Number of blogs to count after skip for paging purposes. Authorization Any identity, including anonymous, can retrieve service blog entries. Response Status Code Return Type Description 200 [SdsServiceBlogEntry] Returns a list of blog entries. Get Service Blog Entry Returns a blog entry specified by ID. Request GET api/v1/ServiceBlog/Entries/{id} api v1 ServiceBlog Entries {id} Parameters [Required] [FromRoute] string id Identifier of the blog entry to retrieve. Authorization Any identity, including anonymous, can retrieve service blog entries. Response Status Code Return Type Description 200 SdsServiceBlogEntry Returns the specified blog entry."
                                                                         },
    "Content_Portal/Documentation/Management/Account_Tenant.html":  {
                                                                        "href":  "Content_Portal/Documentation/Management/Account_Tenant.html",
                                                                        "title":  "Tenants",
                                                                        "keywords":  "Tenants APIs to manage an OCS Customer tenant account. A tenant represents the set of services, applications, data, and configuration state available to a customer. Users are associated with a tenant via at least one configured identity provider and access to resources can be managed for those users via the assignment of roles. Data and services provided by a tenant may also span geographical regions. A tenant has APIs to manage an OCS customer tenant. Unlike namespaces, tenants are not scoped to a region. Tenant level information, such as users and clients, is stored in all supported regions for read-only purposes. Write operations for tenant management and identity and access management are only supported through the global base URL. Unsupported requests return a status of Method Not Allowed (405). The resolution is to utilize the global base URL ( https://dat-b.osisoft.com/ https:  dat-b.osisoft.com  ) for write operations that are not scoped to a namespace. Name (was Company Name) ??? official customer name. May not be unique. Alias (was Company Alias) ??? used during user sign-in to uniquely identify tenant. Account level information, such as users and clients, is stored in all supported regions for read-only purposes. Write operations for account management and identity management are only supported through the global base URL. Unsupported requests return a status of Method Not Allowed (405). The resolution is to utilize the global base URL ( https://dat-b.osisoft.com/ https:  dat-b.osisoft.com  ) for write operations that are not scoped to a namespace. Properties For HTTP requests and responses, the Tenant object has the following properties and JSON-serialized body: Property Name Data Type Description Id string GUID for this Tenant. Generated by the server upon Creation. Same as AAD Id. CompanyName string Company Name of this tenant. State TenantProvisioningState Current Tenant Provisioning State for this tenant. Created DateTime Date and time this tenant was added to OCS. LastUpdated DateTime Date this tenant was last updated. Alias string Specifies a unique alias for this tenant Features [FeatureState] List of Feature States for this Tenant. Returned during get calls. { \"Id\": \"id\", \"CompanyName\": \"companyname\", \"State\": 0, \"Created\": \"0001-01-01T00:00:00\", \"LastUpdated\": \"0001-01-01T00:00:00\", \"Alias\": \"alias\", \"Features\": [] } Get Tenant Retrieves a specific Tenant by ID. Request GET api/v1/Tenants/{tenantId} api v1 Tenants {tenantId} Parameters [Required] [FromRoute] string tenantId The identifier of the Tenant to retrieve. Authorization Authorized for Tenant Members of the specified Tenant . Response Status Code Return Type Description 200 Tenant Returns the Tenant with the specified tenant ID. 400 Nothing is returned Could not retrieve the specified Tenant due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve this Tenant . Tenant Exists Checks if a Tenant with a specific ID exists. Request HEAD api/v1/Tenants/{tenantId} api v1 Tenants {tenantId} Parameters [Required] [FromRoute] string tenantId The identifier of the Tenant for this request. Authorization Authorized for Tenant Members of the specified Tenant . Response Status Code Return Type Description 204 Nothing is returned A Tenant with the specified ID exists. 400 Nothing is returned Could not check if the specified Tenant exists due to missing or invalid input. 404 Nothing is returned A Tenant with the specified ID was not found. Update Tenant Updates a specified Tenant object. Request PUT api/v1/Tenants/{tenantId} api v1 Tenants {tenantId} Parameters [Required] [FromRoute] string tenantId The identifier of the Tenant to update. [Required] [FromBody] Tenant tenant The updated details of the Tenant . Authorization Authorized for Tenant Administrators of the specified Tenant . Response Status Code Return Type Description 200 Tenant Returns the updated Tenant . 400 Nothing is returned Could not update the Tenant due to missing or invalid input. 403 Nothing is returned Unauthorized to update the specified Tenant . 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Get Tenant Icon Returns an icon specified by its Tenant ID. Request GET api/v1/Tenants/{tenantId}/Icon api v1 Tenants {tenantId} Icon Parameters [Required] [FromRoute] string tenantId The identifier of the Tenant for this request. Authorization Authorized for Tenant Members of the specified Tenant . Response Status Code Return Type Description 200 string Returns the Base64 encoded PNG icon string of the specified Tenant . 400 Nothing is returned Could not retrieve the Tenant icon due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve the specified Tenant icon. Create or Update Tenant Icon Creates or updates the icon for a Tenant . Note that the icon size must be less than 65536 bytes. Request PUT api/v1/Tenants/{tenantId}/Icon api v1 Tenants {tenantId} Icon Parameters [Required] [FromRoute] string tenantId The Tenant identifier for this request. [Required] [FromBody] string icon The Base64 encoded PNG icon for the Tenant . Authorization Authorized for Tenant Administrators of the specified Tenant . Response Status Code Return Type Description 200 string Returns the new/updated new updated Base64 encoded PNG icon string specified in the request. 400 Nothing is returned Could not create/update create update the Tenant icon due to missing or invalid input. 403 Nothing is returned Unauthorized to create/update create update the specified Tenant icon. 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL. Delete Tenant Icon Deletes the icon for a Tenant . Request DELETE api/v1/Tenants/{tenantId}/Icon api v1 Tenants {tenantId} Icon Parameters [Required] [FromRoute] string tenantId The Tenant identifier for this request. Authorization Authorized for Tenant Administrators of the specified Tenant . Response Status Code Return Type Description 204 string The Tenant icon was deleted. 400 Nothing is returned Could not delete the Tenant icon due to missing or invalid input. 403 Nothing is returned Unauthorized to delete the specified Tenant icon. 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL."
                                                                    },
    "Content_Portal/Documentation/Management/Account_TenantFeatureState.html":  {
                                                                                    "href":  "Content_Portal/Documentation/Management/Account_TenantFeatureState.html",
                                                                                    "title":  "Tenant feature states",
                                                                                    "keywords":  "Tenant feature states APIs for managing the feature states of an OCS Tenant . Properties For HTTP requests and responses, the TenantFeatureState object has the following properties and JSON-serialized body: Property Name Data Type Description TenantId string The identifier of the tenant that the TenantFeatureState corresponds to. FeatureId string The identifier of the Service that the TenantFeatureState corresponds to. State int32 Current state of this TenantFeatureState. { \"TenantId\": \"tenantid\", \"FeatureId\": \"featureid\", \"State\": 0 } Get All Tenant Feature States Retrieves all instances of FeatureState for the specified Tenant . Request GET api/v1/Tenants/{tenantId}/Features api v1 Tenants {tenantId} Features Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. Authorization Authorized for Tenant Members of the specified tenant. Response Status Code Return Type Description 200 [FeatureState] Returns a list of FeatureState for the specified Tenant . 400 Nothing is returned Unable to retrieve FeatureState instances due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve FeatureState instances for the specified Tenant . Get Tenant Feature State Retrieves a FeatureState with the specified ID from a Tenant . Request GET api/v1/Tenants/{tenantId}/Features/{id} api v1 Tenants {tenantId} Features {id} Parameters [Required] [FromRoute] string tenantId The identifier of the tenant to access. [Required] [FromRoute] string id The identifier of the FeatureState to retrieve. Authorization Authorized for Tenant Members of the specified tenant. Response Status Code Return Type Description 200 FeatureState Returns the FeatureState of the specified tenant. 400 Nothing is returned Unable to retrieve the FeatureState due to missing or invalid input. 403 Nothing is returned Unauthorized to retrieve the FeatureState of the specified tenant."
                                                                                },
    "Content_Portal/Documentation/Management/Account_UserRole_1.html":  {
                                                                            "href":  "Content_Portal/Documentation/Management/Account_UserRole_1.html",
                                                                            "title":  "User Roles",
                                                                            "keywords":  "User Roles User Roles authorize API requests made by users to various OCS features. Users can be assigned more than one Role , but all users have the Tenant Member role. The following are currently available User Roles : Tenant Administrator: Can add, edit, and remove users. Can also edit the permissions of existing users. Tenant Member: Can log in and access the OCS portal. Properties For HTTP requests and responses, the UserRole object has the following properties and JSON-serialized body: Property Name Data Type Description UserId string String value that identifies the user. RoleId string String value that identifies the role. { \"UserId\": \"userid\", \"RoleId\": \"roleid\" } Get Roles for User Retrieves all Roles for the specified user. Request GET api/v1/Tenants/{tenantId}/Users/{userId}/Roles api v1 Tenants {tenantId} Users {userId} Roles Parameters [Required] [FromRoute] string tenantId The identifier of the tenant in which the user belongs. [Required] [FromRoute] string userId The identifier of the user whose roles will be retrieved. [Optional] [Default = \"0\"] [FromQuery] int32 skip Number of Roles to ignore. [Optional] [Default = \"100\"] [FromQuery] int32 count Number of Roles to return. [Optional] [Default = \"\"] [FromRoute] string query Unsupported parameter. Authorization Authorized for Tenant Administrators of the specified tenant and a Tenant Member\u0027s own Roles within the specified tenant. Response Status Code Return Type Description 200 [Role] Returns a list of Role objects belonging to the user with the specified userId. 400 Nothing is returned Could not retrieve Roles due to missing or invalid input. 403 Nothing is returned Unauthorized to get Roles for the specified user. 404 Nothing is returned User not found in the specified Tenant . Replace User Roles Replaces the Roles of a user with a new list of roles. Request PUT api/v1/Tenants/{tenantId}/Users/{userId}/Roles api v1 Tenants {tenantId} Users {userId} Roles Parameters [Required] [FromRoute] string tenantId The identifier for the tenant in which the user belongs. [Required] [FromRoute] string userId The identifier of the user whose roles will be replaced. [Required] [FromBody] [Role] roleList A list of Role objects to set as the roles for the specified user. Authorization Authorized for Tenant Administrators of the specified tenant. Response Status Code Return Type Description 200 Nothing is returned Returns the new list of all Role objects assigned to the specified user. 400 Nothing is returned Could not replace the Roles of the specified user due to missing or invalid input. 403 Nothing is returned Unauthorized to replace the Roles of the specified user. 404 Nothing is returned A user with the specified userId was not found. 405 Nothing is returned Method not allowed at this base URL. Try the request again at the Global base URL."
                                                                        },
    "Content_Portal/Documentation/Management/Management_Overview.html":  {
                                                                             "href":  "Content_Portal/Documentation/Management/Management_Overview.html",
                                                                             "title":  "Tenant management",
                                                                             "keywords":  "Tenant management The Tenant Management API allows users to create, manage, and administer OSIsoft Cloud Services (OCS) tenants by assigning users, roles, and namespaces to their tenants. Through the API, users can manage access control that is used in the OCS infrastructure. Generally, only administrators should have access to the tenant management features. Administration functionality is also available from the OCS portal."
                                                                         },
    "Content_Portal/Documentation/Metadata/Metadata_Rules_Overview.html":  {
                                                                               "href":  "Content_Portal/Documentation/Metadata/Metadata_Rules_Overview.html",
                                                                               "title":  "Metadata rules",
                                                                               "keywords":  "Metadata rules Metadata, or data about data, is a collection of properties that asset instances of an asset type are expected to provide. The type and units of measure for the value can be defined. Metadata enriches sequential data in OCS and it logically segregates and contextualizes data. It supports data analysis, visualization, organization, and search capabilities. A metadata rule is a user-defined stream name pattern in which each part is assigned a metadata type. Metadata rules capture any streams currently stored in an OCS namespace, as well as matching streams that are subsequently added to the namespace. The metadata rules feature The Metadata Rules feature in the OCS Portal simplifies the process of assigning metadata to streams. The user interface guides users through the process of designating metadata types for a stream name pattern. Metadata rules example Users base metadata rules on an existing stream name in the OCS Portal. Stream name parts are ???delimited,??? or separated, by non-alphanumeric characters placed within the name, typically to separate meaningful sections of the name. An example metadata rule stream name pattern follows: UFL.DS1:InternalPumpLeakage In the above example, a metadata rule is based on the stream name UFL.DS1:InternalPumpLeakage. A period delimits ???UFL??? and ???DS1,??? the first two parts of the stream name. A colon delimits ???DS1??? and ???InternalPumpLeakage,??? the second and third parts of the stream name. The three parts of the stream name have the following meanings: UFL = facility location DS1 = a specific device InternalPumpLeakage = the data provided by the stream Each part of the example stream name is assigned a query condition: UFL, the facility location, is assigned string literal, which captures only stream names exactly matching ???UFL??? in the first part of the stream name. DS1, the device identifier, is assigned wildcard, which captures streams with any value in the second part of the stream name. InternalPumpLeakage, the data provided by the example stream, is assigned metadata, expressed as a key-value pair. This metadata rule identifies all stream names beginning with ???UFL,??? with any value for the device identifier, and creates a key-value pair for InternalPumpLeakage. This rule provides a way to quickly search for every stream containing Internal Pump Leakage data for every device in the UFL facility location. The defined metadata is assigned to every stream that matches the stream name pattern. When users edit a metadata rule, the modified rule may capture a different set of streams. Users can choose whether to keep or delete metadata previously assigned by the original metadata rule. Metadata rules enable the bulk creation and maintenance of stream metadata, which can then be used across OSIsoft Cloud Services. Other services and applications, such as OCS data views, leverage stream metadata to simplify finding data and to provide context about stream data. Key-value pairs Stream name parts designated as metadata are defined as key-value pairs. Each value occupying a part designated as metadata is categorized under a key defined for it. This typically takes the form of values recorded at different timestamp intervals for a particular object or device, or key. The fundamental key-value data structure facilitates analytical processing of stream data returned by a metadata rule."
                                                                           },
    "Content_Portal/Documentation/Operations/Operations_Billing Cycles.html":  {
                                                                                   "href":  "Content_Portal/Documentation/Operations/Operations_Billing Cycles.html",
                                                                                   "title":  "Billing Cycles",
                                                                                   "keywords":  "Billing Cycles APIs related to querying Billing Cycles Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieved after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read OCS Authentication documentation on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will appear as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Tenant Billing Cycles Gets the billing cycles for a tenant inferred from the subscription of the tenant. Request GET api/v1/tenants/{tenantId}/subscriptionterm/billingcycles api v1 tenants {tenantId} subscriptionterm billingcycles Parameters [Required] string tenantId Id of the Tenant Authorization Allowed for these roles: Tenant Administrator Response 200 Success Type: List [ { \"StartDate\": \"2020-03-25T12:06:06.0581584-07:00\", \"EndDate\": \"2020-03-25T12:06:06.0582375-07:00\" }, { \"StartDate\": \"2020-03-25T12:06:06.0583031-07:00\", \"EndDate\": \"2020-03-25T12:06:06.0583052-07:00\" } ] 400 Missing or invalid inputs 401 Unauthorized 403 Forbidden 500 Internal server error"
                                                                               },
    "Content_Portal/Documentation/Operations/Operations_Health.html":  {
                                                                           "href":  "Content_Portal/Documentation/Operations/Operations_Health.html",
                                                                           "title":  "Health",
                                                                           "keywords":  "Health APIs related to querying OCS Service health states. Authentication All endpoints referenced in this documentation require authenticated access. You must set the Authorization header to the access token you retrieved from a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read OCS Authentication documentation to learn how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will appear as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Tenant Health Get tenant health data containing an aggregated health state and a list of services related to the tenant. Request GET api/v1/tenants/{tenantId}/health api v1 tenants {tenantId} health Parameters [Required] string tenantId Id of the Tenant Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success Type: Health { \"HealthState\": \"Ok\", \"Namespaces\": [ { \"NamespaceId\": \"MyNamespace\", \"Region\": \"WestUS\", \"HealthState\": \"Ok\", \"Services\": [ { \"Name\": \"OMF Ingress\", \"HealthState\": \"Ok\" }, { \"Name\": \"PI to OCS\", \"HealthState\": \"Ok\" }, { \"Name\": \"Sequential Data Store\", \"HealthState\": \"Ok\" } ] } ] } 400 Missing or invalid inputs 401 Unauthorized 403 Forbidden 500 Internal server error"
                                                                       },
    "Content_Portal/Documentation/Operations/Operations_Logs.html":  {
                                                                         "href":  "Content_Portal/Documentation/Operations/Operations_Logs.html",
                                                                         "title":  "Logs",
                                                                         "keywords":  "Logs APIs related to querying logs. A log is a record of events that occur in operation of OCS. Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieved after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read OCS Authentication documentation on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will appear as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Tenant Logs Get customer facing logs for a tenant . Request GET api/v1/tenants/{tenantId}/logs api v1 tenants {tenantId} logs Parameters [Required] string tenantId Id of the tenant. [FromQuery] [Optional] [Default = \"\"] DateTime start Start timestamp of logs. [FromQuery] [Optional] [Default = \"\"] DateTime end End timestamp of logs. [FromQuery] [Optional] [Default = \"\"] string[] source Filter the logs by one or more sources. This parameter can be repeated multiple times. Valid sources are: Account Management and Identity Management . Omit this parameter to retrieve all sources. [FromQuery] [Optional] [Default = \"\"] SeverityLevel[] severity Filter the logs by one or more severities. This parameter can be repeated multiple times. Valid severities are: Critical , Error , Warning , Information , and Verbose . Omit this parameter to retrieve all severities. [FromQuery] [Optional] [Default = 0] int32 skip Number of logs to skip. [FromQuery] [Optional] [Default = 1000] int32 count Maximum number of logs to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Message\": \"Message\", \"Timestamp\": \"2020-03-25T12:03:15.041014-07:00\", \"Severity\": 0, \"Source\": \"Source\", \"OperationId\": \"OperationId\", \"EventId\": 0 }, { \"Message\": \"Message\", \"Timestamp\": \"2020-03-25T12:03:15.0436848-07:00\", \"Severity\": 0, \"Source\": \"Source\", \"OperationId\": \"OperationId\", \"EventId\": 0 } ] 400 Missing or invalid inputs. 401 Unauthorized 403 Forbidden. 500 Internal server error. Get Namespace Logs Get logs for a Namespace . Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/logs api v1 tenants {tenantId} namespaces {namespaceId} logs Parameters [Required] string tenantId Id of the tenant. [Required] string namespaceId Id of the namespace. [FromQuery] [Optional] [Default = \"\"] DateTime start Start timestamp of logs. [FromQuery] [Optional] [Default = \"\"] DateTime end End timestamp of logs. [FromQuery] [Optional] [Default = \"\"] string[] source Filter the logs by one or more sources. This parameter can be repeated multiple times. Valid sources are: Data Ingress , Data Storage , Data Views , Metadata , PI to OCS . Omit this parameter to retrieve all sources. [FromQuery] [Optional] [Default = \"\"] SeverityLevel[] severity Filter the logs by one or more severities. This parameter can be repeated multiple times. Valid severities are: Critical , Error , Warning , Information , and Verbose . Omit this parameter to retrieve all severities. [FromQuery] [Optional] [Default = 0] int32 skip Number of logs to skip. [FromQuery] [Optional] [Default = 1000] int32 count Maximum number of logs to return. Authorization Allowed for these roles: Tenant Administrator Response 200 Success. Type: List [ { \"Message\": \"Message\", \"Timestamp\": \"2020-03-25T12:03:15.5643366-07:00\", \"Severity\": 0, \"Source\": \"Source\", \"OperationId\": \"OperationId\", \"EventId\": 0 }, { \"Message\": \"Message\", \"Timestamp\": \"2020-03-25T12:03:15.564347-07:00\", \"Severity\": 0, \"Source\": \"Source\", \"OperationId\": \"OperationId\", \"EventId\": 0 } ] 400 Missing or invalid inputs. 401 Unauthorized 403 Forbidden. 500 Internal server error."
                                                                     },
    "Content_Portal/Documentation/Operations/Operations_Metrics.html":  {
                                                                            "href":  "Content_Portal/Documentation/Operations/Operations_Metrics.html",
                                                                            "title":  "Metrics",
                                                                            "keywords":  "Metrics APIs related to querying tenant metrics. Authentication All endpoints referenced in this documentation require authenticated access. You must set the Authorization header to the access token you retrieved from a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read OCS Authentication documentation to learn how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will appear as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Stream Metrics Retrieves metrics related to streams ingress and egress rates for a given namespace. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/metrics/streams/{metricId} api v1 tenants {tenantId} namespaces {namespaceId} metrics streams {metricId} Parameters [Required] string tenantId Id of the tenant for this metric. [Required] string namespaceId Id of the namespace for this metric. [Required] string metricId EgressEvents for events egressed over time, or IngressEvents for incoming events over time. [FromQuery] [Required] DateTime start Start date of the metric results to return. [FromQuery] [Required] DateTime end End date of the metric results to return. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success Type: List [ { \"Timestamp\": \"2020-05-15T14:38:55.989531-07:00\", \"Value\": 0.0 }, { \"Timestamp\": \"2020-05-15T14:38:55.9925501-07:00\", \"Value\": 0.0 } ] 400 Missing or invalid inputs 401 Unauthorized 404 Metric Not Found 403 Forbidden 500 Internal server error Get OMF Connection Metrics \u003c!--Get OMF Metrics--\u003e Retrieves metrics related to OMF ingress rates for a given namespace. \u003c!--Or, Retrieves metrics related to OMF data collection for a given namespace--\u003e Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/metrics/topics/{metricId} api v1 tenants {tenantId} namespaces {namespaceId} metrics topics {metricId} Parameters [Required] string tenantId Id of the tenant for this metric. [Required] string namespaceId Id of the namespace for this metric. [Required] string metricId MessagesReceived for received messages over time, or MessagesRejected for rejected messages over time. [FromQuery] [Required] DateTime start Start date of the metric results to return. [FromQuery] [Required] DateTime end End date of the metric results to return. Authorization Allowed for these roles: Tenant Member Tenant Administrator Response 200 Success Type: List [ { \"Timestamp\": \"2020-05-15T14:38:55.989531-07:00\", \"Value\": 0.0 }, { \"Timestamp\": \"2020-05-15T14:38:55.9925501-07:00\", \"Value\": 0.0 } ] 400 Missing or invalid inputs 401 Unauthorized 404 Metric Not Found 403 Forbidden 500 Internal server error"
                                                                        },
    "Content_Portal/Documentation/Operations/Operations_Overview.html":  {
                                                                             "href":  "Content_Portal/Documentation/Operations/Operations_Overview.html",
                                                                             "title":  "OSIsoft Operations Service",
                                                                             "keywords":  "OSIsoft Operations Service The Operations service provides operational information such as logs , usage , and OCS service health data."
                                                                         },
    "Content_Portal/Documentation/Operations/Operations_Resource Usage Data.html":  {
                                                                                        "href":  "Content_Portal/Documentation/Operations/Operations_Resource Usage Data.html",
                                                                                        "title":  "Resource Usage Data",
                                                                                        "keywords":  "Resource Usage Data APIs related to querying Resource Usage Data Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieved after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read OCS Authentication documentation on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will appear as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Tenant Resource Usage Gets the current resource usage vs the entitled resource usage. Request GET api/v1/tenants/{tenantId}/resources/usage api v1 tenants {tenantId} resources usage Parameters [Required] string tenantId Id of the Tenant Authorization Allowed for these roles: Tenant Member Response 200 Success Type: ResourceUsage { \"StreamCount\": 0, \"EntitledStreamCount\": 0, \"NamespaceCount\": 0, \"EntitledNamespaceCount\": 0, \"EntitledStreamAccessCount\": 0 } 400 Missing or invalid inputs 401 Unauthorized 403 Forbidden 500 Internal server error"
                                                                                    },
    "Content_Portal/Documentation/Operations/Operations_Usage Data.html":  {
                                                                               "href":  "Content_Portal/Documentation/Operations/Operations_Usage Data.html",
                                                                               "title":  "Usage Data",
                                                                               "keywords":  "Usage Data APIs related to querying Usage data. Authentication All endpoints referenced in this documentation require authenticated access. Authorization header must be set to the access token you retrieved after a successful authentication request. Authorization: Bearer \u003ctoken\u003e Requests made without an access token or an invalid/expired invalid expired token will fail with a 401 Unauthorized response. Requests made with an access token which does not have the correct permissions (see security subsection on every endpoint) will fail with a 403 Forbidden. Read OCS Authentication documentation on how to authenticate against OCS with the various clients and receive an access token in response. Error handling All responses will have an error message in the body. The exceptions are 200 responses and the 401 Unauthorized response. The error message will appear as follows: { \"OperationId\": \"1b2af18e-8b27-4f86-93e0-6caa3e59b90c\", \"Error\": \"Error message.\", \"Reason\": \"Reason that caused error.\", \"Resolution\": \"Possible solution for the error.\" } If and when contacting OSIsoft support about this error, please provide the OperationId. Get Tenant Usage Gets Tenant usage data calculated based on active /   completed billing cycles, when the start and end parameters are omitted. When start is provided and end is omitted, a single day of usage data is returned. When both start and end are provided, daily usage data is returned from the provided range. Request GET api/v1/tenants/{tenantId}/usage api v1 tenants {tenantId} usage Parameters [Required] string tenantId Id of the Tenant [FromQuery] [Optional] [Default = \"\"] DateTime start Start date of the usage for daily usage data. [FromQuery] [Optional] [Default = \"\"] DateTime end End date of the daily usage data, if there is no end date only one summary is returned [FromQuery] [Optional] [Default = False] bool groupByNamespace When true the usage data is grouped by namespaces. Authorization Allowed for these roles: Tenant Member Response 200 Success Type: List [ { \"Date\": \"2020-03-25T12:06:05.8756765-07:00\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"NamespaceId\": \"Name\", \"ClusterRegion\": 0, \"IngressEvents\": 0, \"IngressStreamsAccessed\": 0, \"EgressEvents\": 0, \"EgressStreamsAccessed\": 0 }, { \"Date\": \"2020-03-25T12:06:05.8803637-07:00\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"NamespaceId\": \"Name\", \"ClusterRegion\": 0, \"IngressEvents\": 0, \"IngressStreamsAccessed\": 0, \"EgressEvents\": 0, \"EgressStreamsAccessed\": 0 } ] 400 Missing or invalid inputs 401 Unauthorized 403 Forbidden 500 Internal server error Get Namespace Usage Gets Namespace usage data calculated based on active /   completed billing cycles, when the start and end parameters are omitted. When start is provided and end is omitted, a single day of usage data is returned. When both start and end are provided, daily usage data is returned from the provided range. Request GET api/v1/tenants/{tenantId}/namespaces/{namespaceId}/usage api v1 tenants {tenantId} namespaces {namespaceId} usage Parameters [Required] string tenantId Id of the Tenant [Required] string namespaceId Id of the Namespace [FromQuery] [Optional] [Default = \"\"] DateTime start Start date of the usage for daily usage data. [FromQuery] [Optional] [Default = \"\"] DateTime end End date of the daily usage data, if there is no end date only one summary is returned Authorization Allowed for these roles: Tenant Member Response 200 Success Type: List [ { \"Date\": \"2020-03-25T12:06:06.0532268-07:00\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"NamespaceId\": \"Name\", \"ClusterRegion\": 0, \"IngressEvents\": 0, \"IngressStreamsAccessed\": 0, \"EgressEvents\": 0, \"EgressStreamsAccessed\": 0 }, { \"Date\": \"2020-03-25T12:06:06.0532393-07:00\", \"TenantId\": \"00000000-0000-0000-0000-000000000000\", \"NamespaceId\": \"Name\", \"ClusterRegion\": 0, \"IngressEvents\": 0, \"IngressStreamsAccessed\": 0, \"EgressEvents\": 0, \"EgressStreamsAccessed\": 0 } ] 400 Missing or invalid inputs 401 Unauthorized 403 Forbidden 500 Internal server error"
                                                                           },
    "Content_Portal/Documentation/OSIsoft_Cloud_Services.html":  {
                                                                     "href":  "Content_Portal/Documentation/OSIsoft_Cloud_Services.html",
                                                                     "title":  "OSIsoft Cloud Services",
                                                                     "keywords":  "OSIsoft Cloud Services The information in the sections that follow document the APIs and usage for each of the following: Tenant Management - Use the information in this section to create, manage, and administer your account by assigning users, roles, and namespaces to your tenant. Identity and Access Management - Use the information in this section to create, manage and administer users and clients. Sequential Data Store (SDS) - Use the information in this section to learn about the OSIsoft Cloud Services Sequential Data Store. The SDS is optimized for sequential data operations. Data Collection and OSIsoft Message Format - You use OSIsoft Message Format (OMF) to achieve high-throughput asynchronous data ingress into the OCS Sequential Data Store. Metadata Rules - The metadata rules feature in the OCS Portal simplifies the process of assigning metadata to streams. Data Views - Use the information in this section to create user-selected subsets of data stored in OSIsoft Cloud Services which are mapped into customizable table formats. Operations - Use the information in this section to get metrics on OCS operation. Access to OCS You must acquire an account before interacting with the OCS. Go to the OCS page on OSIsoft website , click Contact Us and request an OCS account. Architecture A tenant represents the set of services, applications, data, and configuration states available to a customer in OSIsoft Cloud Services (OCS). Users are associated with a tenant via at least one configured identity provider, a database of user records that allows for authentication, and access to resources can be managed for those users via the assignment of roles. Tenants are divided into one or more logical units called Namespaces. Each Namespace is distinct and separate from other Namespaces with its own instances of the various OSIsoft Cloud Services and data stores. Namespaces provide isolation of resources. Namespaces are provisioned within a region. The Namespace\u0027s services and data stores all exist in the Namespace\u0027s region. Resources allocated to a Namespace are isolated to the Namespace\u0027s region. For more information on regions see the Namespace documentation. Isolation provided by Tenants and Namespaces prevents accidental or malicious data access. OSIsoft Cloud Services provides data residency via namespaces in the following regions: Supported Regions Geographic Area Location WestUS Americas California WestEurope Europe Netherlands Tenant account information is stored in all regions for read-only purposes. Write operations are only supported through the global base URL. See the Tenant documentation for information on how to access this data. OCS API Versioning New versions of the API are released when major changes occur in the OCS API. When a newer version of the API is released, the legacy version of the API will only be supported for a period of time. We encourage all users to switch to the newer version as soon as possible. Versions are inline in the routes, following the host: api/v{version}/Tenants/{tenantId}/Namespaces/{namespaceId}/... api v{version} Tenants {tenantId} Namespaces {namespaceId} ... Where: version is an incrementally (singular) increasing integer value v{version}-preview will be used to expose beta functionality The currently supported versions are: v1 v1-preview"
                                                                 },
    "Content_Portal/Documentation/samples.html":  {
                                                      "href":  "Content_Portal/Documentation/samples.html",
                                                      "title":  "Samples",
                                                      "keywords":  "Samples The OCS-Samples illustrate several ways for applications to interact with the OCS REST API. The examples cover the basics of interacting with OCS, such as: Connecting to OCS Creating SdsTypes and instances of SdsStreams Sending data to and retrieving data from SdsStreams Performing queries against SdsStreams Removing SdsStreams and SdsTypes Currently, the samples are available in these languages: .NET Java Python NodeJs Angular Because the examples are intended for demonstration purposes, they represent some example practices. The patterns may change as OCS continues to develop. Be sure to follow the OSI-Samples repository on GitHub for updates."
                                                  },
    "Content_Portal/Documentation/SequentialDataStore/Compression.html":  {
                                                                              "href":  "Content_Portal/Documentation/SequentialDataStore/Compression.html",
                                                                              "title":  "Compression",
                                                                              "keywords":  "Compression To use network bandwidth efficiently, the OCS Sequential Data Store supports compression for reading and writing data through the REST API. Supported compression schemes gzip deflate Request compression for writing data The body content of an HTTP request can be compressed using the supported compression schemes allowing you to send stream values to the REST API more efficiently. The Content-Encoding HTTP header must be used to specify the compression scheme of compressed-content requests. This header provides context to the API to properly decode the request content. Response compression for reading data Compressed responses can be requested from the REST API by specifying one of the supported compression schemes using the Accept-Encoding HTTP header. Compressed responses from the REST API will include a Content-Encoding HTTP header indicating the compression scheme used to compress the response content. Note: Specifying a compression scheme through the use of the Accept-Encoding HTTP header does not guarantee a compressed response. Always refer to the presence and value of the Content-Encoding HTTP header of the response to properly decode the response content."
                                                                          },
    "Content_Portal/Documentation/SequentialDataStore/Data_Store_and_SDS.html":  {
                                                                                     "href":  "Content_Portal/Documentation/SequentialDataStore/Data_Store_and_SDS.html",
                                                                                     "title":  "Sequential Data Store",
                                                                                     "keywords":  "Sequential Data Store The Sequential Data Store (SDS) is a streaming database optimized for storing sequential data, typically time-series data. It can store any data that is indexed by an ordered sequence. For each namespace that is created, an SDS instance or SDS resources, is created. The services and storage are scoped to a particular region. Data is written into the SDS using REST APIs. You use SDS to store, retrieve, and analyze data. An SdsType (used interchangeably with type throughout documentation) defines the shape of a single measured event or object. A type gives structure to your data. For example, if you\u0027re measuring three things (longitude, latitude, speed) from a device at the same time, then you want those three properties to be included in your type. An SdsStream (used interchangeably with stream throughout documentation) is a collection of ordered events, or a series of events, where each event is an instance of the type you have defined. You create and write data to streams using a simple REST ( Representational State Transfer ) API ( Application Programming Interface ). The streams you create can be used to store simple or complex data types to suit your application needs. You can define simple or complex indexes to arrange and relate your data. An assortment of methods with customizable behaviors are available to read data and easily obtain needed information. Samples The best way to get started with SDS is to run one or more of the code samples. Code samples are provided in a number of different programming languages to illustrate how to easily and effectively interact with SDS. The code samples can be found in the OSI-Samples repository on GitHub. Obtain SDS REST API access keys from https://cloud.osisoft.com https:  cloud.osisoft.com before running the sample code. Each sample includes a README file which describes the steps required to run the sample and a brief description that highlights some of the sample\u0027s functionality. Be sure to read the README file to understand how the sample works. After you have finished the introduction and worked with one of the samples, refer to the Quick start section, which describes the interaction of various SDS objects and helps you get started with your own application."
                                                                                 },
    "Content_Portal/Documentation/SequentialDataStore/Filter_Expressions.html":  {
                                                                                     "href":  "Content_Portal/Documentation/SequentialDataStore/Filter_Expressions.html",
                                                                                     "title":  "Filter expressions for SDS values",
                                                                                     "keywords":  "Filter expressions for SDS values Filter expressions can be applied to read operations such as Get Values and Get Summaries that return Sequential Data Store (SDS) values. SdsTypeCodes The table below lists supported and unsupported types within a filter expression: Supports Does not support Boolean Array Byte IEnumerable Char IDictionary DateTime IList DateTimeOffset Decimal Double Nullable Types Guid Int16 Int32 Int64 Sbyte String Timespan UInt16 UInt32 UInt64 The following types are supported for use within a filter expression: Logical operators The following logical operators are supported for use within a filter expression: Operator Description eq Equal to ne Not equal ge Greater than or equal to le Less than or equal to lt Less than gt Greater than ( ) Parenthesis can be used to affect the order of the operation or Or logical operator and And logical operator not Not logical operator - Negation Examples of logical operators The examples below assume that the SdsType event includes a field named Value of type double : Value eq 1.0 Value ne 15.6 Value ge 5.0 Value le 8.0 Value gt 5.0 Value lt 4.0 Value gt 2.0 and Value lt 9.0 Value gt 6.0 or Value lt 2.0 not (Value eq 1.0) Math functions The following math functions are supported for use within a filter expression: Function Description add Addition sub Subtraction mul Multiplication div Division mod Modulo round Rounds to the nearest numeric component without a decimal, with the midpoint rounded away from 0. For example, 0.5 rounds to 1; -0.5 rounds to -1) floor Rounds down to the nearest numeric component without a decimal ceiling Rounds up to the nearest numeric component without a decimal Examples of math functions The examples below assume that the SdsType event includes a field named Value of type double : Value eq (6.0 add 3.0) Value eq (6.0 sub 3.0) Value eq (6.0 mul 3.0) Value eq (6.0 div 3.0) Value eq (7.0 mod 3.0) round(Value) eq 16 floor(Value) eq 15 ceiling(Value) eq 16 String functions String operations are case sensitive. The character index in a string is zero-based. The following string functions are supported for use within a filter expression: Function Description endswith Compare the character at the end of the input string startswith Compare the character at the start of the input string length Examines the string length indexof Examines the character starting at a given index substring Examine characters within another string at a specific location contains Search for characters anywhere in another string tolower Convert characters to lowercase toupper Convert characters to uppercase trim Remove whitespace from front and end of a string concat Concatenate strings together replace Replace one set of characters with another Examples of string functions The examples below assume that the SdsType event includes a field named sValue of type string : Example Result endswith(sValue, \u0027XYZ\u0027) True if sValue ends with the characters ???XYZ??? startswith(sValue, \u0027Val\u0027 True if sValue starts with the characters ???Val??? length(sValue) eq 11 True if sValue is 11 characters indexof(sValue, \u0027ab\u0027) eq 4 True if the 5th and 6th characters are ???ab??? contains(sValue, \u0027ab\u0027) True if characters ???ab??? are found anywhere in sValue substring(sValue, 10) eq \u0027a b\u0027 True if ???a b??? is found in sValue at index 10 tolower(sValue) eq \u0027val5\u0027 Change sValue to lowercase and compare to ???val5??? toupper(sValue) eq \u0027ABC\u0027 Change sValue to uppercase and compare to ???ABC??? trim(sValue) eq \u0027vall22\u0027 Trim whitespace from front and end of sValue and compare to ???val22??? concat(sValue,\u0027xyz\u0027) eq \u0027dataValue_7xyz\u0027 Add characters to sValue and compare to ???dataValue_7xyz??? replace(sValue,\u0027L\u0027,\u0027D\u0027) eq \u0027Dog1\u0027 Replace any ???L??? in sValue with ???D??? and compare to ???Dog1??? DateTime functions The following DateTime functions are supported for use within a filter expression: Function Description year Get year value from DateTime month Get month value from DateTime day Get day value from DateTime hour Get hour value from DateTime minute Get minute value from DateTime second Get second value from DateTime Examples of DateTime functions The examples below assume that the SdsType event includes a field named TimeId of type DateTime : year(TimeId) eq 2015 month(TimeId) eq 11 day(TimeId) eq 3 hour(TimeId) eq 1 minute(TimeId) eq 5 second(TimeId) eq 3 TimeSpan functions The following TimeSpan functions are supported for use within a filter expression: Function Description years Get year value from TimeSpan days Get day value from TimeSpan hours Get hour value from TimeSpan minutes Get minute value from TimeSpan seconds Get second value from TimeSpan Examples of TimeSpan functions The examples below assume that the SdsType event includes a field named TimeSpanValue of type TimeSpan : years(TimeSpanValue) eq 1 days(TimeSpanValue) eq 22 hours(TimeSpanValue) eq 1 minutes(TimeSpanValue) eq 1 seconds(TimeSpanValue) eq 2"
                                                                                 },
    "Content_Portal/Documentation/SequentialDataStore/indexes.html":  {
                                                                          "href":  "Content_Portal/Documentation/SequentialDataStore/indexes.html",
                                                                          "title":  "Indexes",
                                                                          "keywords":  "Indexes Indexes speed up and order the results of searches. A key uniquely identifies a record within a collection of records. Keys are unique within the collection. In SDS, the key of type is also an index. The key is often referred to as the primary index, while all other indexes are referred to as secondary indexes or secondaries . A type that is used to define a stream must specify a key. When you add data to a stream, every key value must be unique. SDS will not store more than a single event for a given key; an event with a particular key may be deleted or updated, but two events with the same key cannot exist. In .NET, the SdsType properties that define the primary index are identified using an OSIsoft.Sds.SdsMemberAttribute and setting its IsKey field to true. If the key consists of only a single property, you can use the System.ComponentModel.DataAnnotations.KeyAttribute . Property or properties representing the primary index of a type have their SdsTypeProperty.IsKey field set to true. Secondary indexes are defined on streams and are applied to a single property. You can define several secondary indexes. Secondary index values need not be unique. Supported types for an index Type SdsTypeCode Boolean 3 Byte 6 Char 4 DateTime 16 DateTimeOffset 20 Decimal 15 Double 14 Guid 19 Int16 7 Int32 9 Int64 11 SByte 5 Single 13 String 18 TimeSpan 21 UInt16 8 UInt32 10 UInt64 12 Compound indexes A single property (such as DateTime ) is adequate for defining an index most of the time. But for more complex scenarios, SDS allows you to define multiple properties. Indexes defined by multiple properties are known as compound indexes . Only the primary index (or key) supports compound indexes. When defining a compound index within .NET framework, you should apply the OSIsoft.Sds.SdsMemberAttribute on each property field of the SdsType that is combined to define the index. Set the property IsKey to true and give the Order field a zero-based index value. The Order field defines the precedence of the property when sorting. A property with an order of 0 has highest precedence. When defining compound indexes outside of .NET framework, specify the IsKey and Order fields on the SdsTypeProperty object. You can specify a maximum of three properties to define a compound index. In read and write data operations, specify compound indexes in the URI by ordering each property that composes the index separated by the pipe character, ???|???. To help those using compound indexes, .NET client libraries methods also allow the use of tuples for indexes. Notes: Compound indexing only applies to types. In other words, there is no compound indexing for secondary indexes that are on streams. For more information, see Streams . The examples below are for compound indexes on types and not of secondary indexes on streams. REST API //    Read data located between two compound indexes: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data?startIndex={firstIndex|secondIndex|thirdIndex}\u0026endIndex={firstIndex|secondIndex|thirdIndex} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data?startIndex={firstIndex|secondIndex|thirdIndex}\u0026endIndex={firstIndex|secondIndex|thirdIndex} GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data?startIndex={firstIndex|secondIndex}\u0026endIndex={firstIndex|secondIndex} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data?startIndex={firstIndex|secondIndex}\u0026endIndex={firstIndex|secondIndex} //    Delete data with a compound index: DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data?index={firstIndex|secondIndex} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data?index={firstIndex|secondIndex} DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data?startIndex={firstIndex|secondIndex|thirdIndex}\u0026endIndex={firstIndex|secondIndex|thirdIndex} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data?startIndex={firstIndex|secondIndex|thirdIndex}\u0026endIndex={firstIndex|secondIndex|thirdIndex} .NET examples //    Read data located between two compound indexes: IEnumerable\u003cDerivedCompoundIndex\u003e compoundValues = await client.GetWindowValuesAsync\u003cDerivedCompoundIndex\u003e(compoundStream.Id, 1/20/2017 1 20 2017 01:00|1/20/2017 01:00|1 20 2017 00:00, 1/20/2017 1 20 2017 02:00|1/20/2017 02:00|1 20 2017 14:00); //    Remove data with a compound index: Task RemoveValueAsync(compoundStream.Id, 1/20/2017 1 20 2017 01:00|1/20/2017 01:00|1 20 2017 00:00); Work with indexes Indexes in .NET framework Simple indexes When working in .NET, use the SdsTypeBuilder together with either the OSIsoft.Sds.SdsMemberAttribute (preferred) or the System.ComponentModel.DataAnnotations.KeyAttribute to identify the property that defines the simple index. Using the SdsTypeBuilder eliminates potential errors that might occur when working with SdsTypes manually. public enum State { Ok, Warning, Alarm } public class Simple { [SdsMember(IsKey = true, Order = 0) ] public DateTime Time { get; set; } public State State { get; set; } public Double Measurement { get; set; } } SdsType simpleType = SdsTypeBuilder.CreateSdsType\u003cSimple\u003e(); To read data that is located between two indexes, define both a start index and an end index. For DateTime , use the ISO 8601 representation of dates and times. For example, to query for a window of simple values between January 1, 2010 and February 1, 2010, you can define indexes and query as follows: IEnumerable\u003cSimple\u003e values = await client.GetWindowValuesAsync\u003cSimple\u003e(simpleStream.Id, \"2010-01-01T08:00:00.000Z\",\"2010-02-01T08:00:00.000Z\"); For more information about querying data, see Read data . Secondary indexes Secondary indexes are defined at the stream level. To add indexes to a stream, you add them to the stream Indexes field. For example, to add a second index on Measurement , use the following code: SdsStreamIndex measurementIndex = new SdsStreamIndex() { SdsTypePropertyId = simpleType.Properties.First(p =\u003e p.Id.Equals(\"Measurement\")).Id }; SdsStream secondary = new SdsStream() { Id = \"Simple with Secondary\", TypeId = simpleType.Id, Indexes = new List\u003cSdsStreamIndex\u003e() { measurementIndex } }; secondary = await config.GetOrCreateStreamAsync(secondary); To read data indexed by a secondary index, use a filtered GET method, as in the following: await client.UpdateValuesAsync\u003cSimple\u003e(secondary.Id, new List\u003cSimple\u003e() { new Simple() { Time = time, State = State.Ok, Measurement = 5 }, new Simple() { Time = time + TimeSpan.FromSeconds(1), State = State.Ok, Measurement = 4 }, new Simple() { Time = time + TimeSpan.FromSeconds(2), State = State.Ok, Measurement = 3 }, new Simple() { Time = time + TimeSpan.FromSeconds(3), State = State.Ok, Measurement = 2 }, new Simple() { Time = time + TimeSpan.FromSeconds(4), State = State.Ok, Measurement = 1 }, }); IEnumerable\u003cSimple\u003e orderedByKey = await client.GetWindowValuesAsync\u003cSimple\u003e(secondary.Id, time.ToString(\"o\"), time.AddSeconds(4).ToString(\"o\")); foreach (Simple value in orderedByKey) Console.WriteLine(\"{0}: {1}\", value.Time, value.Measurement); Console.WriteLine(); IEnumerable\u003cSimple\u003e orderedBySecondary = await client.GetFilteredValuesAsync\u003cSimple\u003e(secondary.Id, \"Measurement gt 0 and Measurement lt 6\"); foreach (Simple value in orderedBySecondary) Console.WriteLine(\"{0}: {1}\", value.Time, value.Measurement); Console.WriteLine(); //    Output: //    1/20/2017 1 20 2017 12:00:00 AM: 5 //    1/20/2017 1 20 2017 12:00:01 AM: 4 //    1/20/2017 1 20 2017 12:00:02 AM: 3 //    1/20/2017 1 20 2017 12:00:03 AM: 2 //    1/20/2017 1 20 2017 12:00:04 AM: 1 //    //    1/20/2017 1 20 2017 12:00:04 PM: 1 //    1/20/2017 1 20 2017 12:00:03 PM: 2 //    1/20/2017 1 20 2017 12:00:02 PM: 3 //    1/20/2017 1 20 2017 12:00:01 PM: 4 //    1/20/2017 1 20 2017 12:00:00 PM: 5 Compound indexes Compound indexes are defined using the SdsMemberAttribute as follows: public class Simple { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public State State { get; set; } public Double Measurement { get; set; } } public class DerivedCompoundIndex : Simple { [SdsMember(IsKey = true, Order = 1)] public DateTime Recorded { get; set; } } Events of type DerivedCompoundIndex are sorted first by the Time parameter and then by the Recorded parameter. A collection of times would be sorted as follows: Time Recorded Measurement 01:00 00:00 0 01:00 01:00 2 01:00 14:00 5 02:00 00:00 1 02:00 01:00 3 02:00 02:00 4 02:00 14:00 6 If the Order parameter was reversed, with Recorded set to 0 and Time set to 1, the results would be sorted as follows: Time Recorded Measurement 01:00 00:00 0 02:00 00:00 1 01:00 01:00 2 02:00 01:00 3 02:00 02:00 4 01:00 14:00 5 02:00 14:00 6 //    estimates at 1/20/2017 1 20 2017 00:00 await client.UpdateValuesAsync(compoundStream.Id, new List\u003cDerivedCompoundIndex\u003e() { new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 01:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 00:00\"), State = State.Ok, Measurement = 0 }, new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 02:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 00:00\"), State = State.Ok, Measurement = 1 }, }); //    measure and estimates at 1/20/2017 1 20 2017 01:00 await client.UpdateValuesAsync(compoundStream.Id, new List\u003cDerivedCompoundIndex\u003e() { new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 01:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 01:00\"), State = State.Ok, Measurement = 2 }, new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 02:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 01:00\"), State = State.Ok, Measurement = 3 }, }); //    measure at 1/20/2017 1 20 2017 02:00 await client.UpdateValuesAsync(compoundStream.Id, new List\u003cDerivedCompoundIndex\u003e() { new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 02:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 02:00\"), State = State.Ok, Measurement = 4 }, }); //    adjust earlier values at 1/20/2017 1 20 2017 14:00 await client.UpdateValuesAsync(compoundStream.Id, new List\u003cDerivedCompoundIndex\u003e() { new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 01:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 14:00\"), State = State.Ok, Measurement = 5 }, new DerivedCompoundIndex() { Time = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 02:00\"), Recorded = DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 14:00\"), State = State.Ok, Measurement = 6 }, }); var from = new Tuple\u003cDateTime, DateTime\u003e(DateTime.Parse(\"1/20/2017 DateTime\u003e(DateTime.Parse(\"1 20 2017 01:00\"), DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 00:00\")); var to = new Tuple\u003cDateTime, DateTime\u003e(DateTime.Parse(\"1/20/2017 DateTime\u003e(DateTime.Parse(\"1 20 2017 02:00\"), DateTime.Parse(\"1/20/2017 DateTime.Parse(\"1 20 2017 14:00\")); var compoundValues = await client.GetWindowValuesAsync\u003cDerivedCompoundIndex, DateTime, DateTime\u003e(compoundStream.Id, from, to); foreach (DerivedCompoundIndex value in compoundValues) Console.WriteLine(\"{0}:{1} {2}\", value.Time, value.Recorded, value.Measurement); //    Output: //    1/20/2017 1 20 2017 1:00:00 AM:1/20/2017 AM:1 20 2017 12:00:00 AM 0 //    1/20/2017 1 20 2017 1:00:00 AM:1/20/2017 AM:1 20 2017 1:00:00 AM 2 //    1/20/2017 1 20 2017 1:00:00 AM:1/20/2017 AM:1 20 2017 2:00:00 PM 5 //    1/20/2017 1 20 2017 2:00:00 AM:1/20/2017 AM:1 20 2017 12:00:00 AM 1 //    1/20/2017 1 20 2017 2:00:00 AM:1/20/2017 AM:1 20 2017 1:00:00 AM 3 //    1/20/2017 1 20 2017 2:00:00 AM:1/20/2017 AM:1 20 2017 2:00:00 AM 4 //    1/20/2017 1 20 2017 2:00:00 AM:1/20/2017 AM:1 20 2017 2:00:00 PM 6 Note that the GetWindowValuesAsync() call specifies an expected return type and the index types as generic parameters. Indexes outside of .NET framework Simple indexes When the .NET SdsTypeBuilder is unavailable, indexes must be built manually. Below, SdsTypes defined in the Python and Java Script samples are shown. For samples in other languages, go to OCS code samples in GitHub . To build an SdsType representation of sample classes in Python and Java Script, see Sample below: Python JavaScript class State(Enum): Ok = 0 Warning = 1 Alarm = 2 class Simple(object): Time = property(getTime, setTime) def getTime(self): return self.__time def setTime(self, time): self.__time = time State = property(getState, setState) def getState(self): return self.__state def setState(self, state): self.__state = state Measurement = property(getValue, setValue) def getValue(self): return self.__measurement def setValue(self, measurement): self.__measurement = measurement var State = { Ok: 0, Warning: 1, Alarm: 2 } var Simple = function () { this.Time = null; this.State = null; this.Value = null; } Sample The following code is used to build an SdsType representation of the sample class above: Python JavaScript # Create the properties # Time is the primary index time = SdsTypeProperty() time.Id = \"Time\" time.Name = \"Time\" time.IsKey = True time.SdsType = SdsType() time.SdsType.Id = \"DateTime\" time.SdsType.Name = \"DateTime\" time.SdsType.SdsTypeCode = SdsTypeCode.DateTime # State is not a pre-defined type. An SdsType must be defined to represent the enum stateTypePropertyOk = SdsTypeProperty() stateTypePropertyOk.Id = \"Ok\" stateTypePropertyOk.Measurement = State.Ok stateTypePropertyWarning = SdsTypeProperty() stateTypePropertyWarning.Id = \"Warning\" stateTypePropertyWarning.Measurement = State.Warning stateTypePropertyAlarm = SdsTypeProperty() stateTypePropertyAlarm.Id = \"Alarm\" stateTypePropertyAlarm.Measurement = State.Alarm stateType = SdsType() stateType.Id = \"State\" stateType.Name = \"State\" stateType.Properties = [ stateTypePropertyOk, stateTypePropertyWarning,\\ stateTypePropertyAlarm ] state = SdsTypeProperty() state.Id = \"State\" state.Name = \"State\" state.SdsType = stateType # Measurement property is a simple non-indexed, pre-defined type measurement = SdsTypeProperty() measurement.Id = \"Measurement\" measurement.Name = \"Measurement\" measurement.SdsType = SdsType() measurement.SdsType.Id = \"Double\" measurement.SdsType.Name = \"Double\" # Create the Simple SdsType simple = SdsType() simple.Id = str(uuid.uuid4()) simple.Name = \"Simple\" simple.Description = \"Basic sample type\" simple.SdsTypeCode = SdsTypeCode.Object simple.Properties = [ time, state, measurement ] //    Time is the primary key var timeProperty = new SdsObjects.SdsTypeProperty({ \"Id\": \"Time\", \"IsKey\": true, \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"dateType\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.DateTime }) }); //    State is not a pre-defined type. SdsType must be defined to represent the enum var stateTypePropertyOk = new SdsObjects.SdsTypeProperty({ \"Id\": \"Ok\", \"Value\": State.Ok }); var stateTypePropertyWarning = new SdsObjects.SdsTypeProperty({ \"Id\": \"Warning\", \"Value\": State.Warning }); var stateTypePropertyAlarm = new SdsObjects.SdsTypeProperty({ \"Id\": \"Alarm\", \"Value\": State.Alarm }); var stateType = new SdsObjects.SdsType({ \"Id\": \"State\", \"Name\": \"State\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Int32Enum, \"Properties\": [stateTypePropertyOk, stateTypePropertyWarning, stateTypePropertyAlarm, stateTypePropertyRed] }); //    Value property is a simple non-indexed, pre-defined type var valueProperty = new SdsObjects.SdsTypeProperty({ \"Id\": \"Value\", \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"doubleType\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Double }) }); //    Create the Simple SdsType var simpleType = new SdsObjects.SdsType({ \"Id\": \"Simple\", \"Name\": \"Simple\", \"Description\": \"This is a simple Sds type\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Object, \"Properties\": [timeProperty, stateProperty, valueProperty] }); The Time property is identified as the primary index by defining its SdsTypeProperty as follows: Python JavaScript # Time is the primary index time = SdsTypeProperty() time.Id = \"Time\" time.Name = \"Time\" time.IsKey = True time.SdsType = SdsType() time.SdsType.Id = \"DateTime\" time.SdsType.Name = \"DateTime\" time.SdsType.SdsTypeCode = SdsTypeCode.DateTime //    Time is the primary index var timeProperty = new SdsObjects.SdsTypeProperty({ \"Id\": \"Time\", \"IsKey\": true, \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"dateType\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.DateTime }) }); Note that the time.IsKey field is set to true. To read data using the index, you define a start index and an end index. For DateTime , use the ISO 8601 representation of dates and times. To query for a window of values between January 1, 2010 and February 1, 2010, you would define indexes as ???2010-01-01T08:00:00.000Z??? and ???2010-02-01T08:00:00.000Z???, respectively. For additional information, see Read data . Secondary indexes Secondary indexes are defined at the stream level. To create a stream using the Simple class and adding a secondary index on the Measurement , you use the previously defined type. Then you create SdsStreamIndex specifying the Measurement property and define a stream identifying the Measurement as the secondary index as shown below: Python JavaScript # Create the properties measurementIndex = SdsStreamIndex() measurementIndex.SdsTypePropertyId = measurement.Id stream = SdsStream() stream.Id = str(uuid.uuid4()) stream.Name = \"SimpleWithSecond\" stream.Description = \"Simple with secondary index\" stream.TypeId = simple.Id stream.Indexes = [ measurementIndex ] var measurementIndex = new SdsObjects.SdsStreamIndex({ \"SdsTypePropertyId\": valueProperty.Id }); var stream = new SdsObjects.SdsStream({ \"Id\": \"SimpleWithSecond\", \"Name\": \"SimpleWithSecond\", \"Description\": \"Simple with secondary index\", \"TypeId\": simpleTypeId, \"Indexes\": [ measurementIndex ] }); Compound indexes Consider the following Python and JavaScript types: Python JavaScript class Simple(object): # First-order index property Time = property(getTime, setTime) def getTime(self): return self.__time def setTime(self, time): self.__time = time State = property(getState, setState) def getState(self): return self.__state def setState(self, state): self.__state = state Measurement = property(getValue, setValue) def getValue(self): return self.__measurement def setValue(self, measurement): self.__measurement = measurement class DerivedCompoundIndex(Simple): # Second-order index property @property def Recorded(self): return self.__recorded @Recorded.setter def Recorded(self, recorded): self.__recorded = recorded var Simple = function () { this.Time = null; this.State = null; this.Value = null; } var DerivedCompoundIndex = function() { Simple.call(this); this.Recorded = null; } To turn the simple type shown in the example into a type supporting the DerivedCompoundIndex type with a compound index based on the Simple.Time and DerivedCompoundIndex.Recorded , extend the type as follows: Python JavaScript # We set the order for this property. The order of the first property defaulted to 0 recorded = SdsTypeProperty() recorded.Id = \"Recorded\" recorded.Name = \"Recorded\" recorded.IsKey = True recorded.Order = 1 recorded.SdsType = SdsType() recorded.SdsType.Id = \"DateTime\" recorded.SdsType.Name = \"DateTime\" recorded.SdsType.SdsTypeCode = SdsTypeCode.DateTime # Create the Derived SdsType derived = SdsType() derived.Id = str(uuid.uuid4()) derived.Name = \"Compound\" derived.Description = \"Derived compound index sample type\" derived.BaseType = simple derived.SdsTypeCode = SdsTypeCode.Object derived.Properties = [ recorded ] //    We set the order for this property. The order of the first property defaulted to 0 var recordedProperty = new SdsObjects.SdsTypeProperty({ \"Id\": \"Recorded\", \"Name\": \"Recorded\", \"IsKey\": true, \"Order\": 1, \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"DateTime\", \"Name\": \"DateTime\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.DateTime }) }); //    Create the Derived SdsType var derivedType = new SdsObjects.SdsTyp({ \"Id\": \"Compound\", \"Name\": \"Compound\", \"Description\": \"Derived compound index sample type\", \"BaseType\": simpleType, \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Object, \"Properties\": [recordedProperty] }); Data in the stream will be ordered as follows: Time Recorded Measurement 01:00 00:00 0 01:00 01:00 2 01:00 14:00 5 02:00 00:00 1 02:00 01:00 3 02:00 02:00 4 02:00 14:00 6 If the Order parameters were reversed with Recorded set to 0 and Time set to 1, the results would be sorted as follows: Time Recorded Measurement 01:00 00:00 0 02:00 00:00 1 01:00 01:00 2 02:00 01:00 3 02:00 02:00 4 01:00 14:00 5 02:00 14:00 6"
                                                                      },
    "Content_Portal/Documentation/SequentialDataStore/Quick_Start.html":  {
                                                                              "href":  "Content_Portal/Documentation/SequentialDataStore/Quick_Start.html",
                                                                              "title":  "Quick Start: Sequential Data Store",
                                                                              "keywords":  "Quick Start: Sequential Data Store Sequential Data Store (SDS) is a sophisticated data store. The steps described here show a very simple interaction with SDS. To follow along with the steps in this section, you need a tenant, a user account and associated security credentials. Email OCS support at OSIsoft Cloud Services to get access. You will be mainly working on the OSIsoft Cloud Services portal . Sign into the portal using the credentials associated with the tenant. You will also need a namespace and administrative client keys. Before you get started To work with SDS, you must first acquire a client identity, secret and authentication token. Acquire client identity and secret The application acts as a confidential client ??? an application that is capable of securely maintaining a secret. OSIsoft Cloud Services supports confidential client authentication flow with a client identifier (Client Id) and a client secret. To acquire a client identity from the portal, open the navigation menu and select Security \u003e Clients . You can either select an existing client or create a new one. For a new client, select Add Client and follow the prompts for creating a client identity and client secret. Be sure to keep a record of the client secret. For an existing client, highlight the desired client and select Client Details to see configuration information. You need the tenant identity, client identity, and client secret to proceed. The tenant identity, client identity, and client secret are used to acquire a security token from an identity provider, Azure Active Directory in this case. Acquire authentication token You use the tenant identity, client identity, and client secret to acquire an access token from Azure Active Directory. Select one of the clients from the list to see configuration information and code samples in various languages which are shown on tabs in the right panel. Step 1: Acquire namespace In the portal, open the navigation menu and select Data Management \u003e Namespaces . You can use an existing namespace or create a new one. Step 2: Create data types A type describes the structure of a single measured event or object. A stream has an associated type and stores a stream of events or objects that take the shape of that type. A type consists of one or more data properties, one of which must represent an index. Indexes can be simple (a single integer property, for example) or compound (represented by multiple properties). DateTime is a common index for time-series stores. SDS supports a wide variety of property types, both simple (integers, strings and floats, for example) and complex (lists, arrays and enumerations, for example). Properties can be of any complex type. See Types for a detailed list of supported data types. The type is defined in JSON and is posted on OSIsoft Cloud Services (OCS) endpoint. POST /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}  api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} HTTP/1.1 HTTP 1.1 Authorization: Bearer \u003cbearer-token\u003e Content-Length: 1562 Content-Type: application/json application json Host: dat-b.osisoft.com { \"Id\": \"Simple\", \"Name\": \"Simple\", \"Description\": null, \"SdsTypeCode\": 1, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"Description\": null, \"Order\": 0, \"IsKey\": true, \"FixedSize\": 0, \"SdsType\": { \"Id\": \"19a87a76-614a-385b-ba48-6f8b30ff6ab2\", \"Name\": \"DateTime\", \"Description\": null, \"SdsTypeCode\": 16, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": null, \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 }, \"Value\": null, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"State\", \"Name\": \"State\", \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": { \"Id\": \"e20bdd7e-590b-3372-ab39-ff61950fb4f3\", \"Name\": \"State\", \"Description\": null, \"SdsTypeCode\": 609, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": [ { \"Id\": \"Ok\", \"Name\": null, \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": null, \"Value\": 0, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"Warning\", \"Name\": null, \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": null, \"Value\": 1, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"Alarm\", \"Name\": null, \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": null, \"Value\": 2, \"Uom\": null, \"InterpolationMode\": null } ], \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 }, \"Value\": null, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": { \"Id\": \"6fecef77-20b1-37ae-aa3b-e6bb838d5a86\", \"Name\": \"Double\", \"Description\": null, \"SdsTypeCode\": 14, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": null, \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 }, \"Value\": null, \"Uom\": null, \"InterpolationMode\": null } ], \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 } To help users develop .NET client applications for SDS, OSIsoft provides OCS client libraries through NuGet packages, OCSClients . OCSClients consists of necessary libraries to connect to OCS and manage data. Note that SDS client libraries are only available in .NET. You can use SdsTypeBuilder in .NET client libraries to create types: public enum State { Ok, Warning, Alarm } public class Simple { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public State State { get; set; } public Double Measurement { get; set; } } SdsType simpleType = SdsTypeBuilder.CreateSdsType\u003cSimple\u003e(); simpleType.Id = \"Simple\"; simpleType.Name = \"Simple\"; simpleType.Description = \"Basic sample type\"; await config.CreateTypeAsync(simpleType); Step 3: Create stream A stream has an associated type and stores a stream of events or objects that take the shape of that type. For more information, see Streams . Define and post a JSON representation of stream to OCS endpoint. POST /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}  api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} HTTP/1.1 HTTP 1.1 Authorization: Bearer \u003cbearer-token\u003e Content-Length: 139 Content-Type: application/json application json Host: dat-b.osisoft.com { \"Id\": \"Simple\", \"Name\": \"Simple\", \"Description\": null, \"TypeId\": \"Simple\", \"Indexes\": null, \"InterpolationMode\": null, \"ExtrapolationMode\": null, \"PropertyOverrides\": null } You can create a stream for simple events also by using .NET client libraries method: SdsStream simpleStream = new SdsStream() { Id = \"Simple\", Name = \"Simple\", TypeId = simpleType.Id }; simpleStream = config.CreateStreamAsync(simpleStream); Step 4: Write data SDS supports a number of methods for adding and updating data. In this section, you will insert data. Inserts fail if events with the same index already exist in the database. Update adds new events and replaces existing events. For more information, see Write data . Add data to SDS by posting a JSON serialized event to OCS endpoint: POST /api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data  api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data HTTP/1.1 HTTP 1.1 Authorization: Bearer \u003cbearer-token\u003e Content-Length: 57 Content-Type: application/json application json Host: dat-b.osisoft.com [ { \"Time\":\"2017-08-17T17:21:36.3494129Z\", \"State\":0, \"Measurement\":123.45 } ] You can alternatively use .NET client libraries method InsertValueAsync : Simple value = new Simple() { Time = DateTime.UtcNow, State = State.Ok, Measurement = 123.45 }; await client.InsertValueAsync(simpleStream.Id, value); Step 5: Read data SDS includes different read methods for retrieving data from streams. For more information, see Read data . The examples below are of reading value that was recently written. You need an index or indexes in a read data call, a timestamp of that value in this case. Read a value from SDS at a distinct index by making a REST API call to OCS: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data?index=2017-08-17T17:21:36.3494129Z api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data?index=2017-08-17T17:21:36.3494129Z HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-08-17T17:21:36.3494129Z\", \"State\": 0, \"Measurement\": 20 } ] One or more indexes are needed in most read calls to determine which data to read. The simplest way to supply an index is as a string. A DateTime is used as an index below in .NET: string index = DateTime.Parse(\"2017-08-17T17:21:36.3494129Z\") .ToUniversalTime().ToString(\"o\"); To read a value at a distinct index, you can use the SDS .NET client libraries method. Time is the index here, which is a property of a type named Simple : value = await client.GetDistinctValueAsync\u003cSimple\u003e(simpleStream.Id, index); Error handling To deal with common errors you encounter, refer to the following sections: Handling transient service interruptions All applications that communicate with remote systems must manage transient faults. Temporary service interruptions are a fact of life in real-world cloud applications. If you access SDS with .NET client libraries methods, transient fault handling is built in; the SDS client automatically retries error codes identified as transient. If you are directly calling into the OCS through SDS REST APIs (not using .NET), you should consider creating your own retry logic to handle errors identified as transient. In this case, we recommend a logic which returns HTTP status code 503: Service Unavailable : an immediate first retry followed by an exponential backoff. SDS client error If you access SDS using the .NET client libraries methods, note that any non-success responses returned to the client are packaged in an SdsHttpClientException , which is an exception with the following additional properties: string ReasonPhrase HttpStatusCode StatusCode Dictionary\u003cstring, object\u003e Errors The StatusCode provides the HttpStatusCode from the response. The ReasonPhrase might provide additional information regarding the cause of the exception. You should always evaluate the ReasonPhrase in addition to the StatusCode to determine the cause of the exception. The errors collection may provide additional specific error information based on the response. For example, if an InsertValues call failed because it conflicted with an existing event in the stream, the index of the conflicting event will be included in this dictionary. SDS timeout request header Handling timeout issues can be difficult and confusing in a distributed programming environment. When a client times out, for example, the request is terminated before the client receives a response from the server. Meanwhile, the application is unaware of the state of the server. One solution is to use the Request-Timeout header, which is recognized by many services in OCS. Using the header, you can tell the server how long to spend on a particular request before timing out. If possible, the server terminates the request if the time it takes to process the request exceeds the timeout value set in the header. To specify the request timeout value, include the Request-Timeout header and specify the value in seconds."
                                                                          },
    "Content_Portal/Documentation/SequentialDataStore/Reading_Data.html":  {
                                                                               "href":  "Content_Portal/Documentation/SequentialDataStore/Reading_Data.html",
                                                                               "title":  "Read data",
                                                                               "keywords":  "Read data The .NET and REST APIs provide programmatic access to read and write data. This section identifies and describes the APIs used to read SdsStreams data. Results are influenced by SdsTypes , SdsStreamViews , filter expressions , and table format . If you are working in a .NET environment, convenient SDS Client Libraries are available. The ISdsDataService interface, which is accessed using the SdsService.GetDataService() helper, defines the functions that are available. Single stream reads The following methods for reading a single value are available: Get First Value returns the first value in the stream. Get Last Value returns the last value in the stream. Find Distinct Value returns a value based on a starting index and search criteria. In addition, the following methods support reading multiple values: Get Values retrieves a collection of stored values based on the request parameters. Get Interpolated Values retrieves a collection of stored or calculated values based on the request parameters. Get Summaries retrieves a collection of evenly spaced summary intervals based on a count and specified start and end indexes. Get Sampled Values retrieves a collection of sampled data based on the request parameters. All single stream reads are HTTP GET actions. Reading data involves getting events from streams. The base reading URI from a single stream is as follows: api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Bulk reads SDS supports reading from multiple streams in one request. The following method for reading data from multiple streams is available: Join Values retrieves a collection of events across multiple streams and joins the results based on the request parameters. Multi-stream reads can be HTTP GET or POST actions. The base reading URI for reading from multiple streams is as follows: api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response format Supported response formats include JSON, verbose JSON, and SDS. The default response format for SDS is JSON, which is used in all examples in this document. Default JSON responses do not include any values that are equal to the default value for their type. Verbose JSON responses include all values, including defaults, in the returned JSON payload. To specify verbose JSON return, add the header Accept-Verbosity with a value of verbose to the request. To specify SDS format, set the Accept header in the request to application/sds application sds . Indexes and reading data Most read operations take at least one index as a parameter. Indexes may be specified as strings, or using the SDS Client libraries, the index may be passed as-is to read methods that take the index type as a generic argument. For more information, see Indexes . For information on compound indexes, see Compound indexes . Read characteristics When data is requested at an index for which no stored event exists, the read characteristics determine whether the result is an error, no event, interpolated event, or extrapolated event. The combination of the type of the index and the interpolation and extrapolation modes of the SdsType and the SdsStream determine the read characteristics. *Notes: Use the ISO 8601 representation of dates and times in SDS, 2020-02-20T08:30:00-08:00 for February 20, 2020 at 8:30 AM PST, for example. SDS returns timestamps in UTC if the timestamp is of property DateTime and in local time if it is of DateTimeOffset . Interpolation Interpolation determines how a stream behaves when asked to return an event at an index between two existing events. InterpolationMode determines how the returned event is constructed. SDS provides multiple ways to set the interpolation mode to get the desired behavior. The table below lists InterpolationModes: Mode Enumeration value Operation Default 0 The default InterpolationMode is Continuous Continuous 0 Returns interpolated data using previous and next index values StepwiseContinuousLeading 1 Returns the data from the previous index StepwiseContinuousTrailing 2 Returns the data from the next index Discrete 3 No event is returned ContinuousNullableLeading 4 Returns interpolated data or data from the previous index if either of the surrounding indexes has a null value ContinuousNullableTrailing 5 Returns interpolated data or data from the trailing index if either of the surrounding indexes has a null value Note that Continuous cannot return values for type properties that cannot be interpolated, such as when the type property is not numeric. The table below describes how the Continuous InterpolationMode affects properties that occur between data in a stream: InterpolationMode = Continuous or Default Property Type Result for a property for an index between data in a stream Comment Numeric Types Interpolated* Rounding is done as needed for integer types Time-related Types Interpolated DateTime, DateTimeOffset, TimeSpan Nullable Types Interpolated** Limited support for nullable numeric types Array and List Types Default value String Type Default value Boolean Type Returns value of nearest index Enumeration Types Returns Enum value at 0 This may have a value for the enumeration GUID Default value Version Default value IDictionary or IEnumerable Default value Dictionary, Array, List, and so on. Empty Type Not supported Object Type Not supported *When extreme values are involved in an interpolation (for example Decimal.MaxValue) the call might result in a BadRequest exception. **For the Continuous interpolation mode, Nullable types are interpolated in the same manner as their non-nulllable equivalents as long as the values surrounding the desired interpolation index are non-null. If either of the values are null, the interpolated value will be null. If the InterpolationMode is not assigned, the events are interpolated in the default manner, unless the interpolation mode is overridden in the SdsTypeProperty or the SdsStream. For more information on overriding the interpolation mode on a specific type property see SdsTypeProperty . For more information on overriding the interpolation mode for a specific stream see Sds Streams . Extrapolation Extrapolation defines how a stream responds to requests with indexes that precede or follow all data in the steam. ExtrapolationMode acts as a master switch to determine whether extrapolation occurs and at which end of the data. ExtrapolationMode works with the InterpolationMode to determine how a stream responds. The following tables show how ExtrapolationMode affects returned values for each InterpolationMode value: ExtrapolationMode with InterpolationMode = Default (or Continuous), StepwiseContinuousLeading, and StepwiseContinuousTrailing ExtrapolationMode Enumeration value Index before data Index after data All 0 Returns first data value Returns last data value None 1 No event is returned No event is returned Forward 2 No event is returned Returns last data value Backward 3 Returns first data value No event is returned ExtrapolationMode with InterpolationMode = Discrete ExtrapolationMode Enumeration value Index before data Index after data All 0 No event is returned No event is returned None 1 No event is returned No event is returned Forward 2 No event is returned No event is returned Backward 3 No event is returned No event is returned ExtrapolationMode with InterpolationMode = ContinuousNullableLeading and ContinuousNullableTrailing ExtrapolationMode Enumeration value Index before data Index after data All 0 Returns the default value Returns the default value None 1 No event is returned No event is returned Forward 2 No event is returned Returns the default value value Backward 3 Returns the default value No event is returned For additional information about the effect of read characteristics, see the documentation on the read method you are using. Filter expressions Filter expressions can be applied to any read that returns multiple values, including Get Values, Get Range Values, Get Window Values, and Get Intervals. The filter expression is applied to the collection events conditionally filtering events that do not meet the filter conditions. Filter expressions are covered in detail in the Filter expressions section. Table format Results of a query can be organized into tables by directing the form parameter to return a table. Two forms of table are available: table and header table. When the form parameter is specified as table, ?form=table , events are returned in row column form. Results include a collection named Columns that lists column name and type and a collection named Rows containing a collection of rows matching the order of the columns. Specifying a form of type table-headers , ?form=tableh , results in a collection where the Rows collection contains a column header list. Table formats are covered in detail in the Table format section. SdsBoundaryType The SdsBoundaryType enum defines how data on the boundary of queries is handled: around the start index for range value queries, and around the start and end index for window values. The following are valid values for SdsBoundaryType : Boundary Enumeration value Operation Exact 0 Results include the event at the specified index boundary if a stored event exists at that index. Inside 1 Results include only events within the index boundaries Outside 2 Results include up to one event that falls immediately outside of the specified index boundary. ExactOrCalculated 3 Results include the event at the specified index boundary. If no stored event exists at that index, one is calculated based on the index type and interpolation and extrapolation settings. SdsSearchMode The SdsSearchMode enum defines search behavior when seeking a stored event near a specified index. The following are valid values for SdsSearchMode : Mode Enumeration value Operation Exact 0 If a stored event exists at the specified index, that event is returned. Otherwise no event is returned. ExactOrNext 1 If a stored event exists at the specified index, that event is returned. Otherwise the next event in the stream is returned. Next 2 Returns the stored event after the specified index. ExactOrPrevious 3 If a stored event exists at the specified index, that event is returned. Otherwise the previous event in the stream is returned. Previous 4 Returns the stored event before the specified index. Transforming data SDS provides the ability to transform data upon reads. The supported data transformations are: Reading with SdsStreamViews : Changing the shape of the returned data Unit of Measure Conversions : Converting the unit of measure of the data Data transformations are supported for all single stream reads, but transformations have specific endpoints. The following are the base URIs for the tranformation endpoints: api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform/First api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform First api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform/Last api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform Last api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform/Interpolated api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform Interpolated api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform/Summaries api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform Summaries api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform/Sampled api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform Sampled Reading with SdsStreamViews When transforming data with an SdsStreamView, the data read is converted to the target type specified in the SdsStreamView. Working with stream views is covered in detail in the Stream Views section. All stream view transformations are HTTP GET requests. Specify the stream view ID ( streamViewId={streamViewId} ) at the end of the transformation endpoint in the request as shown below. For example, the following request returns the first event of the stream transformed to the target type (per stream view definition specified by streamViewId ): GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform/First?streamViewId={streamViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform First?streamViewId={streamViewId} All single stream data reads support stream view transformations. When data is requested with an SdsStreamView, the read characteristics defined by the target type of the SdsStreamView determine what is returned. The read characteristics are discussed in the code samples. Unit conversion of data SDS supports assigning Units of Measure (UOM) to stream data. If stream data has UOM information associated, SDS supports reading data with unit conversions applied. On each read data request, unit conversions are specified by a user defined collection of SdsStreamPropertyOverride objects in read requests. The SdsStreamPropertyOverride object has the following structure: Property Type Optionality Details SdsTypePropertyId String Required Identifier for an SdsTypeProperty with a UOM assigned Uom String Required Target unit of measure InterpolationMode SdsInterpolationMode N/A N A Currently not supported in context of data reads This is supported in the .NET client libraries methods via overloads that accept a collection of SdsStreamPropertyOverride objects, and in the REST API via HTTP POST calls with a request body containing a collection of SdsStreamPropertyOverride objects. All unit conversions are POST HTTP requests. The unit conversion transformation URI is as follows: POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Transform api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Transform Request body The Request Body contains a collection of SdsStreamPropertyOverride objects. The following code defines a Simple Type with one index, Time , and one additional property, Measurement . Measurement has an assigned unit of measure, meter. public class SimpleType { [SdsMember(IsKey = true, Order = 0) ] public DateTime Time { get; set; } [SdsMember(Uom = \"meter\")] public Double Measurement { get; set; } } This type is assigned to a stream, and the example request body below requests SDS to convert the Measurement property of the returned data from meter to centimeter. [ { \"SdsTypePropertyId\" : \"Measurement\", \"Uom\" : \"centimeter\" } ] All single stream data reads with streams that have specified UOMs support UOM conversions."
                                                                           },
    "Content_Portal/Documentation/SequentialDataStore/Reading_Data_API.html":  {
                                                                                   "href":  "Content_Portal/Documentation/SequentialDataStore/Reading_Data_API.html",
                                                                                   "title":  "API calls for reading data",
                                                                                   "keywords":  "API calls for reading data Example type, stream, and data Many of the API methods described below contain example requests and responses in JSON to highlight usage and specific behaviors. The following type, stream, and data are used in the examples. Example type SimpleType is an SdsType with a single index. This type is defined below in .NET, Python, and Javascript: .NET Python JavaScript public enum State { Ok, Warning, Alarm } public class SimpleType { [SdsMember(IsKey = true, Order = 0) ] public DateTime Time { get; set; } public State State { get; set; } [SdsMember(Uom = \"meter\")] public Double Measurement { get; set; } } class State(Enum): Ok = 0 Warning = 1 Alarm = 2 class SimpleType(object): Time = property(getTime, setTime) def getTime(self): return self.__time def setTime(self, time): self.__time = time State = property(getState, setState) def getState(self): return self.__state def setState(self, state): self.__state = state Measurement = property(getValue, setValue) def getValue(self): return self.__measurement def setValue(self, measurement): self.__measurement = measurement var State = { Ok: 0, Warning: 1, Alarm: 2, } var SimpleType = function () { this.Time = null; this.State = null; this.Value = null; } Example Stream Simple is an SdsStream of type SimpleType . Example Data Simple has stored values as follows: 11/23/2017 11 23 2017 12:00:00 PM: Ok 0 11/23/2017 11 23 2017 1:00:00 PM: Ok 10 11/23/2017 11 23 2017 2:00:00 PM: Ok 20 11/23/2017 11 23 2017 3:00:00 PM: Ok 30 11/23/2017 11 23 2017 4:00:00 PM: Ok 40 All times are represented at offset 0, GMT. Get First Value Returns the first value in the stream. If no values exist in the stream, null is returned. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/First api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data First Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body containing a serialized event. .NET client libraries method Task\u003cT\u003e GetFirstValueAsync\u003cT\u003e(string streamId, string streamViewId = null); Get Last Value Returns the last value in the stream. If no values exist in the stream, null is returned. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Last api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Last Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body containing a serialized event. .NET client libraries method Task\u003cT\u003e GetLastValueAsync\u003cT\u003e(string streamId, string streamViewId = null); Find Distinct Value Returns a stored event based on the specified index and searchMode . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?index={index}\u0026searchMode={searchMode} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string index The index string searchMode The SdsSearchMode , the default is exact Response The response includes a status code and a response body containing a serialized collection with one event. Depending on the request index and searchMode , it is possible to have an empty collection returned. Example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?index=2017-11-23T13:00:00Z\u0026searchMode=Next The request has an index that matches the index of an existing event, but since a SdsSearchMode of next was specified, the response contains the next event in the stream after the specified index: Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 } ] Example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?index=2017-11-23T13:30:00Z\u0026searchMode=Next The request specifies an index that does not match an index of an existing event. The next event in the stream is retrieved. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 } ] .NET client libraries methods Task\u003cT\u003e FindDistinctValueAsync\u003cT\u003e(string streamId, string index, SdsSearchMode searchMode = SdsSearchMode.Exact, string streamViewId = null); Task\u003cT\u003e FindDistinctValueAsync\u003cT, T1\u003e(string streamId, Tuple\u003cT1\u003e index, SdsSearchMode searchMode = SdsSearchMode.Exact, string streamViewId = null); Task\u003cT\u003e FindDistinctValueAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e index, SdsSearchMode searchMode = SdsSearchMode.Exact, string streamViewId = null); Get Values Returns a collection of stored values at indexes based on request parameters. SDS supports three ways of specifying which stored events to return: Filtered : A filtered request accepts a filter expression . Range : A range request accepts a start index and a count. Window : A window request accepts a start index and end index. This request has an optional continuation token for large collections of events. Filtered Returns a collection of stored values as determined by a filter . The filter limits results by applying an expression against event fields. Filter expressions are explained in detail in the Filter expressions section. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?filter={filter} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string filter The filter expression (see Filter expressions ) Response The response includes a status code and a response body containing a serialized collection of events. Example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?filter=Measurement gt 10 The events in the stream with Measurement greater than 10 are returned. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 } ] Note that State is not included in the JSON as its value is the default value. .NET client libraries method Task\u003cIEnumerable\u003cT\u003e\u003e GetFilteredValuesAsync\u003cT\u003e(string streamId, string filter, string streamViewId = null); Range Returns a collection of stored values as determined by a startIndex and count . Additional optional parameters specify the direction of the range, how to handle events near or at the start index, whether to skip a certain number of events at the start of the range, and how to filter the data. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026count={count}[\u0026skip={skip}\u0026reversed={reversed} \u0026boundaryType={boundaryType}\u0026filter={filter}] Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string startIndex Index identifying the beginning of the series of events to return int count The number of events to return int skip Optional value specifying the number of events to skip at the beginning of the result bool reversed Optional specification of the direction of the request. By default, range requests move forward from startIndex, collecting events after startIndex from the stream. A reversed request will collect events before startIndex from the stream. SdsBoundaryType boundaryType Optional SdsBoundaryType specifies the handling of events at or near startIndex string filter Optional filter expression Response The response includes a status code and a response body containing a serialized collection of events. Example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T13:00:00Z\u0026count=100 This request will return a response with up to 100 events starting at 13:00 and extending forward toward the end of the stream: Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 } ] Note that State is not included in the JSON as its value is the default value. Example request To reverse the direction of the request, set reversed to true. The following request will return up to 100 events starting at 13:00 and extending back toward the start of the stream: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T13:00:00Z\u0026count=100\u0026reversed=true Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T12:00:00Z\" } ] Note that State is not included in the JSON as its value is the default value. Further, Measurement is not included in the second, 12:00:00, event as zero is the default value for numbers. The following request specifies a boundary type of Outside for a reversed-direction range request. The response will contain up to 100 events. The boundary type Outside indicates that up to one event outside the boundary will be included in the response. For a reverse direction range request, this means one event forward of the specified start index. In a default direction range request, it would mean one event before the specified start index. Example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T13:00:00Z\u0026count=100\u0026reversed=true \u0026boundaryType=2 Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 }, { \"Time\": \"2017-11-23T13:00:00Z\", \"State\": 0, \"Measurement\": 10 }, { \"Time\": \"2017-11-23T12:00:00Z\", \"State\": 0, \"Measurement\": 0 } ] The event outside of the index is the next event or the event at 14:00 because the request operates in reverse. Example request Adding a filter to the request means only events that meet the filter criteria are returned: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T13:00:00Z\u0026count=100\u0026reversed=true \u0026boundaryType=2\u0026filter=Measurement gt 10 Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 } ] .NET client libraries methods Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT\u003e(string streamId, string startIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT\u003e(string streamId, string startIndex, int count, bool reversed, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, int count, bool reversed, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, int count, bool reversed, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT\u003e(string streamId, string startIndex, int count, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, int count, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, int count, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT\u003e(string streamId, string startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeFilteredValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetRangeFilteredValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Window Returns a collection of stored events based on the specified startIndex and endIndex . For handling events at and near the boundaries of the window, a single SdsBoundaryType that applies to both the start and end indexes can be passed with the request, or separate boundary types may be passed for the start and end individually. Paging is supported for window requests with a large number of events. To retrieve the next page of values, include the continuationToken from the results of the previous request. For the first request, specify a null or empty string for the continuationToken . Requests GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026endIndex={endIndex} GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026endIndex={endIndex}\u0026boundaryType={boundaryType} GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026startBoundaryType={startBoundaryType} \u0026endIndex={endIndex}\u0026endBoundaryType={endBoundaryType} GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026endIndex={endIndex} \u0026count={count}\u0026continuationToken={continuationToken} GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026startBoundaryType={startBoundaryType} \u0026endIndex={endIndex}\u0026endBoundaryType={endBoundaryType}\u0026filter={filter}\u0026count={count} \u0026continuationToken={continuationToken} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string startIndex Index bounding the beginning of the series of events to return string endIndex Index bounding the end of the series of events to return int count Optional maximum number of events to return. If count is specified, a continuationToken must also be specified. SdsBoundaryType boundaryType Optional SdsBoundaryType specifies handling of events at or near the start and end indexes SdsBoundaryType startBoundaryType Optional SdsBoundaryType specifies the first value in the result in relation to the start index. If startBoundaryType is specified, endBoundaryType must be specified. SdsBoundaryType endBoundaryType Optional SdsBoundaryType specifies the last value in the result in relation to the end index. If startBoundaryType is specified, endBoundaryType must be specified. string filter Optional filter expression string continuationToken Optional token used to retrieve the next page of data. If count is specified, a continuationToken must also be specified. Response The response includes a status code and a response body containing a serialized collection of events. A continuation token can be returned if specified in the request. Example request The following requests all stored events between 12:30 and 15:30: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T12:30:00Z\u0026endIndex=2017-11-23T15:30:00Z The response will contain the event stored at the specified index: Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 30 } ] Note that State is not included in the JSON as its value is the default value. Example request When the request is modified to specify a boundary type of Outside, the value before 13:30 and the value after 15:30 are included: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T12:30:00Z\u0026endIndex=2017-11-23T15:30:00Z \u0026boundaryType=2 Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T12:00:00Z\" }, { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 } ] Note that State is not included in the JSON as its value is the default value. Further, Measurement is not included in the second event (12:00:00) as zero is the default value for numbers. Example request With a start boundary of Inside, only values inside the start boundary (after 13:30) are included in the result. With an end boundary of Outside, one value outside the end index (after 15:30) is included: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T12:30:00Z\u0026\u0026startBoundaryType=1 \u0026endIndex=2017-11-23T15:30:00Z\u0026endBoundaryType=2 Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"State\": 0, \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"State\": 0, \"Measurement\": 30 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"State\": 0, \"Measurement\": 40 } ] Example request In order to page the results of the request, a continuation token may be specified. This requests the first page of the first two stored events between start index and end index by indicating count is 2 and continuationToken is an empty string: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T12:30:00Z\u0026endIndex=2017-11-23T15:30:00Z \u0026count=2\u0026continuationToken= Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Results\": [ { \"Time\": \"2017-11-23T13:00:00Z\", \"State\": 0, \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 } ], \"ContinuationToken\": \"2017-11-23T14:00:00.0000000Z\" } Example request This request uses the continuation token from the previous page to request the next page of stored events: GET api/v1/Tenants/{tenantId}}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId}} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-11-23T12:30:00Z\u0026endIndex=2017-11-23T15:30:00Z \u0026count=2\u0026continuationToken=2017-11-23T14:00:00Z Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Results\": [ { \"Time\": \"2017-11-23T15:00:00Z\", \"State\": 0, \"Measurement\": 30 } ], \"ContinuationToken\": null } In this case, the results contain the final event. The returned continuation token is null. .NET client libraries methods Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, SdsBoundaryType startBoundaryType, T1 endIndex, SdsBoundaryType endBoundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, SdsBoundaryType startBoundaryType, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType endBoundaryType, string filter, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, SdsBoundaryType boundaryType, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, SdsBoundaryType boundaryType, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType boundaryType, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, SdsBoundaryType boundaryType, string filter, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType boundaryType, string filter, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowValuesAsync\u003cT\u003e(string streamId, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, SdsBoundaryType startBoundaryType, T1 endIndex, SdsBoundaryType endBoundaryType, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, SdsBoundaryType startBoundaryType, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType endBoundaryType, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, string filter, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, SdsBoundaryType startBoundaryType, T1 endIndex, SdsBoundaryType endBoundaryType, string filter, int count, string continuationToken, string streamViewId = null); Task\u003cSdsResultPage\u003cT\u003e\u003e GetWindowFilteredValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, SdsBoundaryType startBoundaryType, Tuple\u003cT1, T2\u003e endIndex, SdsBoundaryType endBoundaryType, string filter, int count, string continuationToken, string streamViewId = null); Get Interpolated Values Returns a collection of values based on request parameters. The stream\u0027s read characteristics determine how events are calculated for indexes at which no stored event exists. For more information, see Interpolation and Extrapolation . Interpolation is not supported for streams with compound indexes. SDS supports two ways of specifying which interpolated events to return: Index Collection : One or more indexes can be passed to the request in order to retrieve events at specific indexes. Interval : An interval can be specified with a start index, end index, and count. This will return the specified count of events evenly spaced from start index to end index. Index collection Returns events at the specified indexes. If no stored event exists at a specified index, the stream\u0027s read characteristics determine how the returned event is calculated. For more information, see Interpolation and Extrapolation . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data  Interpolated?index={index}[\u0026index={index}...] Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string index One or more indexes Response The response includes a status code and a response body containing a serialized collection of events. Depending on the specified indexes and read characteristics of the stream, it is possible to have less events returned than specified indexes. An empty collection can also be returned. Example request Consider a stream of type Simple with the default InterpolationMode of Continuous and ExtrapolationMode of All . In the following request, the specified index matches an existing stored event: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data  Interpolated?index=2017-11-23T13:00:00Z The response will contain the event stored at the specified index. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"State\": 0, \"Measurement\": 10 } ] Example request The following request specifies an index for which no stored event exists: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data  Interpolated?index=2017-11-23T13:30:00Z Because the index is a valid type for interpolation and the stream has a InterpolationMode of Continuous , this request receives a response with an event interpolated at the specified index: Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:30:00Z\", \"State\": 0, \"Measurement\": 15 } ] Example request Consider a stream of type Simple with an InterpolationMode of Discrete and ExtrapolationMode of All . In the following request, the specified indexes only match two existing stored events: GET api/v1/Tenants/{tenantId}}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId}} Namespaces {namespaceId} Streams Simple Data Interpolated?index=2017-11-23T12:30:00Z\u0026index=2017-11-23T13:00:00Z\u0026index=2017-11-23T14:00:00Z For this request, the response contains events for two of the three specified indexes. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"State\": 0, \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 } ] .NET client libraries methods Task\u003cT\u003e GetValueAsync\u003cT\u003e(string streamId, string index, string streamViewId = null); Task\u003cT\u003e GetValueAsync\u003cT, T1\u003e(string streamId, Tuple\u003cT1\u003e index, string streamViewId = null); Task\u003cT\u003e GetValueAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e index, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetValuesAsync\u003cT\u003e(string streamId, IEnumerable\u003cstring\u003e index, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetValuesAsync\u003cT, T1\u003e(string streamId, IEnumerable\u003cT1\u003e index, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetValuesAsync\u003cT, T1, T2\u003e(string streamId, IEnumerable\u003cTuple\u003c T1, T2\u003e\u003e index, string streamViewId = null); Interval Returns events at evenly spaced intervals based on the specified start index, end index, and count. If no stored event exists at an index interval, the stream\u0027s read characteristics determine how the returned event is calculated. For more information, see Interpolation and Extrapolation . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data  Interpolated?startIndex={startIndex}\u0026endIndex={endIndex}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string startIndex The index defining the beginning of the window string endIndex The index defining the end of the window int count The number of events to return. Read characteristics of the stream determine how the events are constructed. Response The response includes a status code and a response body containing a serialized collection of events. Depending on the read characteristics and input parameters, it is possible for a collection to be returned with less events than specified in the count. Example request For a stream, named Simple, of type Simple for the following request: GET api/v1/Tenants/{tenantId}}/Namespaces/{namespaceId}/Streams/Simple/Data/ api v1 Tenants {tenantId}} Namespaces {namespaceId} Streams Simple Data  Interpolated?startIndex=2017-11-23T13:00:00Z\u0026endIndex=2017-11-23T15:00:00Z\u0026count=3 the start and end fall exactly on event indexes, and the number of events from start to end match the count of three (3). Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T13:00:00Z\", \"State\": 0, \"Measurement\": 10 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"State\": 0, \"Measurement\": 30 } ] .NET client libraries methods Task\u003cIEnumerable\u003cT\u003e\u003e GetValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetValuesAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetValuesAsync\u003cT, T1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex, int count, string streamViewId = null); Get Summaries Returns summary intervals between a specified start and end index. Index types that cannot be interpolated do not support summary requests. Strings are an example of indexes that cannot be interpolated. Summaries are not supported for streams with compound indexes. Interpolating between two indexes that consist of multiple properties is not defined and results in non-determinant behavior. Summary values supported by SdsSummaryType enum: Summary Enumeration value Count 1 Minimum 2 Maximum 4 Range 8 Mean 16 StandardDeviation 64 Total 128 Skewness 256 Kurtosis 512 WeightedMean 1024 WeightedStandardDeviation 2048 WeightedPopulationStandardDeviation 4096 Count, Minimum, Maximum, and Range are based only on stored events and do not include interpolated values. Mean, Standard Deviation, Skewness, and Kurtosis are event-weighted calculations. Total, Weighted Mean, WeightedStandardDeviation, and WeightedPopulationStandardDeviation are index-weighted calculations. Currently, these values can only be calculated for properties of the following types: Type SdsTypeCode Boolean 3 Byte 6 Char 4 Decimal 15 Int16 7 Int32 9 Int64 11 SByte 5 Single 13 UInt16 8 UInt32 10 UInt64 12 DateTime 16 Double 14 DateTimeOffset 20 TimeSpan 21 NullableBoolean 103 NullableByte 106 NullableChar 104 NullableDecimal 115 NullableInt16 107 NullableInt32 109 NullableInt64 111 NullableSByte 105 NullableSingle 113 NullableUInt16 108 NullableUInt32 110 NullableUInt64 112 NullableDateTime 116 NullableDouble 114 NullableDateTimeOffset 120 NullableTimeSpan 121 Note: Properties marked with an InterpolationMode of Discrete do not support summaries. Unsupported properties will be excluded from the summaries returned. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data  Summaries?startIndex={startIndex}\u0026endIndex={endIndex}\u0026count={count}[\u0026filter={filter}] Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string startIndex The start index for the intervals string endIndex The end index for the intervals int count The number of intervals requested string filter Optional filter expression Response The response includes a status code and a response body containing a serialized collection of SdsIntervals. Each SdsInterval has a start, end, and collection of summary values. Property Details Start The start of the interval End The end of the interval Summaries The summary values for the interval, keyed by summary type. The nested dictionary contains property name keys and summary calculation result values. Example request The following request calculates two summary intervals between the startIndex and endIndex : GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data  Summaries?startIndex=2017-11-23T12:00:00Z\u0026endIndex=2017-11-23T16:00:00Z\u0026count=2 Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Start\": { \"Time\": \"2017-11-23T12:00:00Z\", \"State\": 0, \"Measurement\": 0 }, \"End\": { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 }, \"Summaries\": { \"Count\": { \"Time\": 3, \"Measurement\": 3 }, \"Minimum\": { \"Measurement\": 0 }, \"Maximum\": { \"Measurement\": 20 }, \"Range\": { \"Measurement\": 20 }, \"Total\": { \"Measurement\": 20 }, \"Mean\": { \"Measurement\": 10 }, \"StandardDeviation\": { \"Measurement\": 7.0710678118654755 }, \"PopulationStandardDeviation\": { \"Measurement\": 5 }, \"WeightedMean\": { \"Measurement\": 10 }, \"WeightedStandardDeviation\": { \"Measurement\": 7.0710678118654755 }, \"WeightedPopulationStandardDeviation\": { \"Measurement\": 5 }, \"Skewness\": { \"Measurement\": 0 }, \"Kurtosis\": { \"Measurement\": -2 } } }, { \"Start\": { \"Time\": \"2017-11-23T14:00:00Z\", \"State\": 0, \"Measurement\": 20 }, \"End\": { \"Time\": \"2017-11-23T16:00:00Z\", \"State\": 0, \"Measurement\": 40 }, \"Summaries\": { \"Count\": { \"Time\": 3, \"Measurement\": 3 }, \"Minimum\": { \"Measurement\": 30 }, \"Maximum\": { \"Measurement\": 40 }, \"Range\": { \"Measurement\": 10 }, \"Total\": { \"Measurement\": 60 }, \"Mean\": { \"Measurement\": 30 }, \"StandardDeviation\": { \"Measurement\": 7.0710678118654755 }, \"PopulationStandardDeviation\": { \"Measurement\": 5 }, \"WeightedMean\": { \"Measurement\": 30 }, \"WeightedStandardDeviation\": { \"Measurement\": 7.0710678118654755 }, \"WeightedPopulationStandardDeviation\": { \"Measurement\": 5 }, \"Skewness\": { \"Measurement\": 0 }, \"Kurtosis\": { \"Measurement\": -2 } } } ] SDS also supports summary requests for nullable SdsTypes. It means an SdsType has at least a nullable SdsTypeProperty. Example The following example contains a nullable double property with interpolation mode set to continuous: .NET public class SimpleType { [SdsMember(IsKey = true, Order = 0) ] public DateTime Time { get; set; } [SdsMember(Uom = \"meter\")] public double? Measurement { get; set; } } Measurement has stored values as follows: 11/23/2017 11 23 2017 12:00:01 PM: Measurement 2 11/23/2017 11 23 2017 12:00:02 PM: Measurement 2 11/23/2017 11 23 2017 12:00:03 PM: Measurement null 11/23/2017 11 23 2017 12:00:04 PM: Measurement 1 11/23/2017 11 23 2017 12:00:05 PM: Measurement 2 11/23/2017 11 23 2017 12:00:06 PM: Measurement null 11/23/2017 11 23 2017 12:00:07 PM: Measurement null 11/23/2017 11 23 2017 12:00:08 PM: Measurement 3 While calculating weighted summaries, if we encounter a null value at a given index then we would consider interpolation mode of property to find the interpolated value of the given interval. See the table below for [12:00:02 PM, 12:00:03 PM] interval. The values are 2 and null at 12:00:02 and 12:00:03 PM respectively. Interpolation Mode Weight in seconds Value in meter Continuous 0 0 ContinuousNullableLeading StepwiseContinuousLeading 1 2 ContinuousNullableTrailing StepwiseContinuousTrailing 0 0 Similarly, for intervals [12:00:03 PM, 12:00:04 PM] and [12:00:04 PM, 12:00:05 PM] respectively, the table would look like below: Interpolation Mode Weight in seconds Value in meter Continuous 0 0 ContinuousNullableLeading StepwiseContinuousLeading 0 0 ContinuousNullableTrailing StepwiseContinuousTrailing 1 1 Interpolation Mode Weight in seconds Value in meter Continuous 1 1.5 ContinuousNullableLeading StepwiseContinuousLeading 1 1 ContinuousNullableTrailing StepwiseContinuousTrailing 1 2 Note: Non-weighted summaries disregard null values and treat them as non-existent. In the example above, non-weighted summaries for Measurement would be calculated based on (2,2,1,2,3) whereas weighted summaries for Measurement consider null values for its calculation. For more information see Interpolation . Example request The following request calculates one summary interval between the startIndex and endIndex : GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/ api v1-preview Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data  Summaries?startIndex=2017-11-23T12:00:01Z\u0026endIndex=2017-11-23T12:00:08Z\u0026count=1 Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Start\": { \"Time\": \"2017-11-23T12:00:01Z\", \"Measurement\": 2 }, \"End\": { \"Time\": \"2017-11-23T12:00:08Z\", \"Measurement\": 3 }, \"Summaries\": { \"Count\": { \"Time\": 8, \"Measurement\": 5 }, \"Minimum\": { \"Measurement\": 1 }, \"Maximum\": { \"Measurement\": 3 }, \"Range\": { \"Measurement\": 2 }, \"Total\": { \"Measurement\": 7.5 }, \"Mean\": { \"Measurement\": 1.875 }, \"StandardDeviation\": { \"Measurement\": 0.478713553878169 }, \"PopulationStandardDeviation\": { \"Measurement\": 0.41457809879442492 }, \"WeightedMean\": { \"Measurement\": 1.75 }, \"WeightedStandardDeviation\": { \"Measurement\": 0.35355339059327379 }, \"WeightedPopulationStandardDeviation\": { \"Measurement\": 0.25 }, \"Skewness\": { \"Measurement\": 0.49338220021815865 }, \"Kurtosis\": { \"Measurement\": -1.3719008264462809 } } } ] .NET client libraries methods Task\u003cIEnumerable\u003cSdsInterval\u003cT\u003e\u003e\u003e GetIntervalsAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cSdsInterval\u003cT\u003e\u003e\u003e GetIntervalsAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, int count, string streamViewId = null); Task\u003cIEnumerable\u003cSdsInterval\u003cT\u003e\u003e\u003e GetFilteredIntervalsAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int count, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cSdsInterval\u003cT\u003e\u003e\u003e GetFilteredIntervalsAsync\u003cT, T1\u003e(string streamId, T1 startIndex, T1 endIndex, int count, string filter, string streamViewId = null); Get Sampled Values Returns representative data sampled by intervals between a specified start and end index. Sampling is driven by a specified property or properties of the stream\u0027s Sds Type. Property types that cannot be interpolated do not support sampling requests. Strings are an example of a property that cannot be interpolated. For more information see Interpolation . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data  Sampled?startIndex={startIndex}\u0026endIndex={endIndex}\u0026intervals={intervals}\u0026sampleBy={sampleBy} [\u0026sampleBy={sampleBy}\u0026...\u0026boundaryType={boundaryType}\u0026startBoundaryType={startBoundaryType} \u0026endBoundaryType={endBoundaryType}\u0026filter={filter}] Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string startIndex The start index for the intervals string endIndex The end index for the intervals int intervals The number of intervals requested string sampleBy Property or properties to use when sampling SdsBoundaryType boundaryType Optional SdsBoundaryType specifies the handling of events at or near the startIndex and endIndex SdsBoundaryType startBoundaryType Optional SdsBoundaryType specifies the handling of events at or near the startIndex SdsBoundaryType endBoundaryType Optional SdsBoundaryType specifies the handling of events at or near the endIndex string filter Optional filter expression Response The response includes a status code and a response body containing a serialized collection of events. Example request The following request returns two sample intervals between the startIndex and endIndex : GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/ api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data  Sampled?startIndex=2019-01-01T00:00:00Z\u0026endIndex=2019-01-02T00:00:00Z\u0026intervals=2\u0026sampleBy=Measurement Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2019-01-01T00:00:01Z\", \"State\": 1, \"Measurement\": 1 }, { \"Time\": \"2019-01-01T00:11:50Z\", \"State\": 2, \"Measurement\": 0.00006028870675578446 }, { \"Time\": \"2019-01-01T11:55:33Z\", \"Measurement\": 6.277981349066863 }, { \"Time\": \"2019-01-01T12:00:00Z\", \"Measurement\": 3.101013140344655 }, { \"Time\": \"2019-01-01T12:00:01Z\", \"State\": 1, \"Measurement\": 4.101013140344655 }, { \"Time\": \"2019-01-01T12:01:50Z\", \"State\": 2, \"Measurement\": 0.0036776111121028521 }, { \"Time\": \"2019-01-01T23:57:23Z\", \"State\": 2, \"Measurement\": 6.2816589601789659 }, { \"Time\": \"2019-01-02T00:00:00Z\", \"Measurement\": 6.20202628068931 } ] Note that State is not included in the JSON when its value is the default value. .NET client libraries methods Task\u003cIEnumerable\u003cT\u003e\u003e GetSampledValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int intervals, IEnumerable\u003cstring\u003e sampleBy, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetSampledValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int intervals, IEnumerable\u003cstring\u003e sampleBy, SdsBoundaryType boundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetSampledValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int intervals, IEnumerable\u003cstring\u003e sampleBy, SdsBoundaryType startBoundaryType, SdsBoundaryType endBoundaryType, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetSampledFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int intervals, IEnumerable\u003cstring\u003e sampleBy, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetSampledFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int intervals, IEnumerable\u003cstring\u003e sampleBy, SdsBoundaryType boundaryType, string filter, string streamViewId = null); Task\u003cIEnumerable\u003cT\u003e\u003e GetSampledFilteredValuesAsync\u003cT\u003e(string streamId, string startIndex, string endIndex, int intervals, IEnumerable\u003cstring\u003e sampleBy, SdsBoundaryType startBoundaryType, SdsBoundaryType endBoundaryType, string filter, string streamViewId = null); Join Values Returns data from multiple streams, which are joined based on the request specifications. The streams must be of the same type. SDS supports the following types of joins: SdsJoinMode Enumeration value Operation Inner 0 Results include the stored events with common indexes across specified streams. Outer 1 Results include the stored events for all indexes across all streams. Interpolated 2 Results include events for each index across all streams for the request index boundaries. Some events may be interpolated. MergeLeft 3 Results include one event for each index across all streams selecting events at the indexes based on left to right order of the streams. MergeRight 4 Results include one event for each index across all streams selecting events at the indexes based on right to left order of the streams. SDS supports GET and POST join requests: GET : The stream, joinMode, start index, and end index are specified in the request URI path. POST : Only the joinMode is specified in the URI. The streams and read specification for each stream are specified in the body of the request. GET request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?streams={streams}\u0026joinMode={joinMode}\u0026startIndex={startIndex}\u0026endIndex={endIndex} [\u0026boundaryType={boundaryType}\u0026startBoundaryType={startBoundaryType} \u0026endBoundaryType={endBoundaryType}\u0026filter={filter}\u0026count={count}] Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streams Commas separated list of stream identifiers SdsJoinMode joinMode Type of join: inner, outer, interpolated, merge left or merge right string startIndex Index identifying the beginning of the series of events to return string endIndex Index identifying the end of the series of events to return [Optional] int count [Optional] Maximum number of events to return. [Optional] SdsBoundaryType boundaryType [Optional] SdsBoundaryType specifies the handling of events at or near the startIndex and endIndex [Optional] SdsBoundaryType startBoundaryType [Optional] SdsBoundaryType specifies the handling of events at or near the startIndex [Optional] SdsBoundaryType endBoundaryType [Optional] SdsBoundaryType specifies the handling of events at or near the endIndex [Optional] string filter [Optional] Filter expression Response The response includes a status code and a response body containing multiple serialized events. Examples Data from streams Simple1 and Simple2 will be used to illustrate how each join operation works. Stream data Simple1 HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 } ] Time Measurement 2017-11-23T11:00:00Z 10 2017-11-23T13:00:00Z 20 2017-11-23T14:00:00Z 30 2017-11-23T16:00:00Z 40 Stream data Simple2 HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T12:00:00Z\", \"Measurement\": 50 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 60 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 70 }, { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 80 } ] Time Measurement 2017-11-23T12:00:00Z 50 2017-11-23T14:00:00Z 60 2017-11-23T15:00:00Z 70 2017-11-23T17:00:00Z 80 Inner Join example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?streams=Simple1,Simple2\u0026joinMode=inner \u0026startIndex=0001-01-01T00:00:00.0000000\u0026endIndex=9999-12-31T23:59:59.9999999 Response Measurements from both streams with common indexes. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ [ { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 60 } ] ] Time Simple 1 Measurement Simple 2 Measurement 2017-11-23T14:00:00Z 30 60 Outer Join example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?streams=Simple1,Simple2\u0026joinMode=outer \u0026startIndex=0001-01-01T00:00:00.0000000\u0026endIndex=9999-12-31T23:59:59.9999999 Response All Measurements from both streams, with default values at indexes where a stream does not have a value. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ [ { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 10 }, null ], [ null, { \"Time\": \"2017-11-23T12:00:00Z\", \"Measurement\": 50 } ], [ { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 20 }, null ], [ { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 60 } ], [ null, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 70 } ], [ { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 }, null ], [ null, { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 80 } ] ] Index Simple 1 Measurement Simple 2 Measurement 2017-11-23T11:00:00Z 10 null 2017-11-23T12:00:00Z null 50 2017-11-23T13:00:00Z 20 null 2017-11-23T14:00:00Z 30 60 2017-11-23T15:00:00Z null 70 2017-11-23T16:00:00Z 40 null 2017-11-23T17:00:00Z null 80 Default value is null for SdsTypes. Interpolated Join example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?streams=Simple1,Simple2\u0026joinMode=interpolated \u0026startIndex=0001-01-01T00:00:00.0000000\u0026endIndex=9999-12-31T23:59:59.9999999 Response All Measurements from both streams with missing values interpolated. If the missing values are between valid measurements within a stream, they are interpolated. For more information, see Interpolation . If the missing values are outside of the boundary values, they are extrapolated. For more information, see Extrapolation . Note: The Interpolated SdsJoinMode currently does not support SdsInterpolationModes of the streams. All join requests with interpolations will honor the interpolation mode of the stream type or type property. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ [ { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 50 } ], [ { \"Time\": \"2017-11-23T12:00:00Z\", \"Measurement\": 15 }, { \"Time\": \"2017-11-23T12:00:00Z\", \"Measurement\": 50 } ], [ { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 55 } ], [ { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 60 } ], [ { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 35 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 70 } ], [ { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 75 } ], [ { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 40 }, { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 80 } ] ] Index Simple 1 Measurement Simple 2 Measurement 2017-11-23T11:00:00Z 10 50 2017-11-23T12:00:00Z 15 50 2017-11-23T13:00:00Z 20 55 2017-11-23T14:00:00Z 30 60 2017-11-23T15:00:00Z 35 70 2017-11-23T16:00:00Z 40 75 2017-11-23T17:00:00Z 40 80 Interpolated values are in bold . Extrapolated values are in italics . MergeLeft Join example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?streams=Simple1,Simple2\u0026joinMode=mergeleft \u0026startIndex=0001-01-01T00:00:00.0000000\u0026endIndex=9999-12-31T23:59:59.9999999 Response Similar to OuterJoin , but value at each index is the first available value at that index when iterating the given list of streams from left to right. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T12:00:00Z\", \"Measurement\": 50 }, { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 30 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 70 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 }, { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 80 } ] Index Simple1 Simple2 Returned MergeLeft Join Values 2017-11-23T11:00:00Z 10 10 2017-11-23T12:00:00Z 50 50 2017-11-23T13:00:00Z 20 20 2017-11-23T14:00:00Z 30 60 30 2017-11-23T15:00:00Z 70 70 2017-11-23T16:00:00Z 40 40 2017-11-23T17:00:00Z 80 80 Takes the value from the stream on the left ( Simple1 ) at \"2017-11-23T14:00:00Z\". MergeRight Join example request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?streams=Simple1,Simple2\u0026joinMode=mergeright \u0026startIndex=0001-01-01T00:00:00.0000000\u0026endIndex=9999-12-31T23:59:59.9999999 Response Similar to OuterJoin , but value at each index is the first available value at that index when iterating the given list of streams from right to left. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 10 }, { \"Time\": \"2017-11-23T12:00:00Z\", \"Measurement\": 50 }, { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 20 }, { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 60 }, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 70 }, { \"Time\": \"2017-11-23T16:00:00Z\", \"Measurement\": 40 }, { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 80 } ] Index Simple1 Simple2 Returned MergeRight Join Values 2017-11-23T11:00:00Z 10 10 2017-11-23T12:00:00Z 50 50 2017-11-23T13:00:00Z 20 20 2017-11-23T14:00:00Z 30 60 60 2017-11-23T15:00:00Z 70 70 2017-11-23T16:00:00Z 40 40 2017-11-23T17:00:00Z 80 80 Takes the value from the stream on the right ( Simple2 ) at \"2017-11-23T14:00:00Z\". POST request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins? api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins? joinMode={joinMode} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier SdsJoinMode joinMode Type of join: inner, outer, interpolated, merge left or merge right Request body Read option specific to each stream Response The response includes a status code and a response body containing multiple serialized events. Outer Join example request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins api v1 Tenants {tenantId} Namespaces {namespaceId} Bulk Streams Data Joins ?joinMode=outer Outer Join example request body Different start indexes and end indexes are specified per stream. [ { \"StreamId\": \"Simple1\", \"Options\": { \"StartIndex\": \"2017-11-23T11:00:00Z\", \"EndIndex\": \"2017-11-23T14:00:00Z\", \"StartBoundaryType\": \"Exact\", \"EndBoundaryType\": \"Exact\", \"Count\": 100, \"Filter\": \"\" } }, { \"StreamId\": \"Simple2\", \"Options\": { \"StartIndex\": \"2017-11-23T15:00:00Z\", \"EndIndex\": \"2017-11-23T17:00:00Z\", \"StartBoundaryType\": \"Exact\", \"EndBoundaryType\": \"Exact\", \"Count\": 100, \"Filter\": \"\" } } ] Outer Join example response body Only events within the two streams\u0027 specified index boundaries are considered for the outer join operation. HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ [ { \"Time\": \"2017-11-23T11:00:00Z\", \"Measurement\": 10 }, null ], [ { \"Time\": \"2017-11-23T13:00:00Z\", \"Measurement\": 20 }, null ], [ { \"Time\": \"2017-11-23T14:00:00Z\", \"Measurement\": 30 }, null ], [ null, { \"Time\": \"2017-11-23T15:00:00Z\", \"Measurement\": 70 } ], [ null, { \"Time\": \"2017-11-23T17:00:00Z\", \"Measurement\": 80 } ] ] Index Simple 1 Measurement Simple 2 Measurement 2017-11-23T11:00:00Z 10 null 2017-11-23T13:00:00Z 20 null 2017-11-23T14:00:00Z 30 null 2017-11-23T15:00:00Z null 70 2017-11-23T17:00:00Z null 80 Not all values from both streams are included because the query restricts each stream. See Outer Join GET request above to compare. .NET client libraries methods Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsJoinType joinMode, string startIndex, string endIndex); Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsJoinType joinMode, string startIndex, string endIndex, int count); Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsJoinType joinMode, string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter); Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsJoinType joinMode, string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter, int count); Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsJoinType joinMode, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, string filter); Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsJoinType joinMode, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, string filter, int count); Task\u003cIEnumerable\u003cIList\u003cT\u003e\u003e\u003e GetJoinValuesAsync\u003cT\u003e(SdsJoinType joinMode, IList\u003cSdsStreamQuery\u003e sdsStreamsQueryOptions); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(SdsMergeType joinMode, IList\u003cSdsStreamQuery\u003e sdsStreamsQueryOptions); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsMergeType joinMode, string startIndex, string endIndex); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsMergeType joinMode, string startIndex, string endIndex, int count); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsMergeType joinMode, string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsMergeType joinMode, string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter, int count); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsMergeType joinMode, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, string filter); Task\u003cIList\u003cT\u003e\u003e GetMergeValuesAsync\u003cT\u003e(IEnumerable\u003cstring\u003e streams, SdsMergeType joinMode, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, SdsBoundaryType endBoundaryType, string filter, int count);"
                                                                               },
    "Content_Portal/Documentation/SequentialDataStore/SDS_Streams.html":  {
                                                                              "href":  "Content_Portal/Documentation/SequentialDataStore/SDS_Streams.html",
                                                                              "title":  "Streams",
                                                                              "keywords":  "Streams Streams are a container for sequential data of some type of sequentially occurring values indexed by a single property, typically time series data. You define streams to organize incoming data from another system into the OCS. To define a stream, you must first define a type, which defines the structure of the data you want to stream into a selected namespace. SDS stores collections of events and provides convenient ways to find and associate events. Events of consistent structure are stored in streams. Streams are referenced by their identifier or Id field. Stream identifiers must be unique within a namespace. A stream must include a TypeId that references the identifier of an existing type. Stream management using the .NET SDS client libraries is performed through ISdsMetadataService . Create the ISdsMetadataService , using one of the SdsService.GetMetadataService() factory methods. The following table shows the required and optional stream fields. Fields not listed are reserved for internal SDS use. Property Type Optionality Searchable Details Id String Required Yes An identifier for referencing the stream TypeId String Required Yes The SdsType identifier of the type to be used for this stream Name String Optional Yes Friendly name Description String Optional Yes Description text Indexes IList\u003cSdsStreamIndex\u003e Optional No Used to define secondary indexes for stream InterpolationMode SdsInterpolationMode Optional No Interpolation setting of the stream. Default is null. ExtrapolationMode SdsExtrapolationMode Optional No Extrapolation setting of the stream. Default is null. PropertyOverrides IList\u003cSdsStreamPropertyOverride\u003e Optional No Used to define unit of measure and interpolation mode overrides for a stream. Tags * IList\u003cString\u003e Optional Yes A list of tags denoting special attributes or categories. Metadata * IDictionary\u003cString, String\u003e Optional Yes A dictionary of string keys and associated string values. * Notes on stream metadata and tags: Stream metadata and tags are accessed via the Metadata and Tags API respectively. However, they are associated with SdsStream objects and can be used as search criteria. Rules for the stream identifier (SdsStream.Id) Is not case sensitive Cannot just be whitespace Cannot contain leading or trailing whitespace Cannot contain forward slash (\"/\") (\" \") Can contain a maximum of 100 characters Indexes While you define the primary index on the type, the stream is where you define secondary indexes. If the primary index defined on the type is a compound index, secondary indexes on the stream are allowed as long as that compound index does not have more than two properties. For more information on compound indexes, see Indexes . \u003c!-- Secondary indexes apply to a single property. In other words, there are no compound secondary indexes.--\u003e Note that you can only use the SdsTypeCodes of type properties that can be ordered ( DateTime or numbers, for example) as a secondary index. Interpolation and extrapolation The InterpolationMode , ExtrapolationMode , and SdsStreamPropertyOverride object can be used to determine how a specific stream reads data. These read characteristics are inherited from the type if they are not defined at the stream level. SdsStreamPropertyOverride SdsStreamPropertyOverride object provides a way to override interpolation behavior and unit of measure for individual SdsType Properties for a specific SdsStream. The SdsStreamPropertyOverride object has the following structure: Property Type Optionality Details SdsTypePropertyId String Required SdsTypeProperty identifier InterpolationMode SdsInterpolationMode Optional Interpolation setting. Default is null Uom String Optional Unit of measure The unit of measure can be overridden for any SdsTypeProperty defined by the stream type, including primary and secondary indexes. For more information on SdsTypeProperty Uom , see Types . Read characteristics of the stream are determined by the type and the PropertyOverride of the stream. The interpolation mode for non-index properties can be defined and overridden at the stream level. For more information about type read characteristics see Types . If InterpolationMode of the type is set to Discrete , it cannot be overridden at any level. When InterpolationMode is set to Discrete and an event is not defined for the index, a null value is returned for the entire event. SdsStream API The REST APIs provide programmatic access to read and write SDS data. The API in this section interacts with streams. When working in .NET framework, convenient SDS client libraries are available. The ISdsMetadataService interface, accessed using the SdsService.GetMetadataService( ) helper, defines the available functions. See Streams above for general information related to streams. Get Streams Returns a list of streams. If specifying the optional search query parameter, the list of streams returned will match the search criteria. If the search query parameter is not specified, the list will include all streams in the namespace. See Search in SDS for information about specifying those respective parameters. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query={query}\u0026skip={skip}\u0026count={count}\u0026orderby={orderby} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query={query}\u0026skip={skip}\u0026count={count}\u0026orderby={orderby} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string query [Optional] Parameter representing a string search. See Search in SDS for information about specifying the search parameter. int skip [Optional] Parameter representing the zero-based offset of the first SdsStream to retrieve. If not specified, a default value of 0 is used. int count [Optional] Parameter representing the maximum number of SdsStreams to retrieve. If not specified, a default value of 100 is used. string orderby [Optional] Parameter representing sorted order which SdsStreams will be returned. A field name is required. The sorting is based on the stored values for the given field (of type string). For example, orderby=name would sort the returned results by the name values (ascending by default). Additionally, a value can be provided along with the field name to identify whether to sort ascending or descending, by using values asc or desc , respectively. For example, orderby=name desc would sort the returned results by the name values, descending. If no value is specified, there is no sorting of results. Response The response includes a status code and a response body. Response body A collection of zero or more SdsStreams Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Id\":\"Simple\", \"TypeId\":\"Simple\" }, { \"Id\":\"Simple with Secondary\", \"TypeId\":\"Simple\", \"Indexes\":[ { \"SdsTypePropertyId\":\"Measurement\" } ] }, { \"Id\":\"Compound\", \"TypeId\":\"Compound\" }, ... ] .NET client libraries method Task\u003cIEnumerable\u003cSdsStream\u003e\u003e GetStreamsAsync(string query = \"\", int skip = 0, int count = 100); Get Stream Returns the specified stream. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body. Response body The requested SdsStream Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Id\":\"Simple\", \"Name\":\"Simple\", \"TypeId\":\"Simple\", } .NET client libraries method Task\u003cSdsStream\u003e GetStreamAsync(string streamId); Get Stream Type Returns the type definition that is associated with a given stream. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Type api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Type Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body. Response body The requested SdsType. .NET client libraries method Task\u003cSdsType\u003e GetStreamTypeAsync(string streamId); Get or Create Stream Creates the specified stream. If a stream with a matching identifier already exists, SDS compares the existing stream with the stream that was sent. If the streams are identical, a Found (302) error is returned with the Location header set to the URI where the stream may be retrieved using a Get function. If the streams do not match, a Conflict (409) error is returned. For a matching stream (Found), clients that are capable of performing a redirect that includes the authorization header can automatically redirect to retrieve the stream. However, most clients, including the .NET HttpClient, consider redirecting with the authorization token to be a security vulnerability. When a client performs a redirect and strips the authorization header, SDS cannot authorize the request and returns Unauthorized (401). For this reason, it is recommended that when using clients that do not redirect with the authorization header, you should disable automatic redirect. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier. The stream identifier must match the identifier in content. Request body The request content is the serialized SdsStream. Response The response includes a status code and a response body. Response body The newly created SdsStream. .NET client libraries method Task\u003cSdsStream\u003e GetOrCreateStreamAsync(SdsStream SdsStream); If a stream with a matching identifier already exists and it matches the stream in the request body, the client redirects a GET to the Location header. If the existing stream does not match the stream in the request body, a Conflict error response is returned and the client library method throws an exception. Create or Update Stream Creates the specified stream. If a stream with the same Id already exists, the definition of the stream is updated. The following changes are permitted: Name Description Indexes InterpolationMode ExtrapolationMode PropertyOverrides Note that modifying indexes will result in re-indexing all of the stream\u0027s data for each additional secondary index. For more information on secondary indexes, see Indexes . Changes that are not permitted result in an error. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body The request content is the serialized SdsStream. Response The response includes a status code. .NET client libraries method Task CreateOrUpdateStreamAsync(SdsStream SdsStream); Update Stream Type Updates a stream???s type. The type is modified to match the specified stream view. Defined indexes and PropertyOverrides are removed when updating a stream type. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Type?streamViewId={streamViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Type?streamViewId={streamViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string streamViewId The stream view identifier Request body The request content is the serialized SdsStream. Response The response includes a status code. Response body On failure, the content contains a message describing the issue. .NET client libraries method Task UpdateStreamTypeAsync(string streamId, string streamViewId); Delete Stream Deletes a stream. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code. .NET client libraries method Task DeleteStreamAsync(string streamId); Get Streams Access Control List Gets the default ACL for the Streams collection. For more information on ACL, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Streams api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Streams Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The default ACL for Streams Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetStreamsAccessControlListAsync(); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetStreamsAccessControlListWithETagAsync(); Update Streams Access Control List Updates the default ACL for the Streams collection. For more information on ACL, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Streams api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Streams Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateStreamsAccessControlListAsync(AccessControlList streamsAcl); Patch Streams Access Control List Updates the default ACL for the Streams collection using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Streams api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Streams Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchStreamsAccessControlListAsync(JsonPatchDocument\u003cAccessControlList\u003e streamsAclPatch); Task PatchStreamsAccessControlListWithETagAsync(string etag, JsonPatchDocument\u003cAccessControlList\u003e streamsAclPatch); Get Stream Access Control List Gets the ACL of the specified stream. For more information on ACL, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The ACL for the specified stream. Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetStreamAccessControlListAsync(string streamId); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetStreamAccessControlListWithETagAsync(string streamId); Update Stream Access Control List Updates the ACL of the specified stream. For more information on ACL, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateStreamAccessControlListAsync(string streamId, AccessControlList streamAcl); Patch Stream Access Control List Updates the ACL of the specified stream using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchStreamAccessControlListAsync(string streamId, JsonPatchDocument\u003cAccessControlList\u003e streamAclPatch); Task PatchStreamAccessControlListWithETagAsync(string streamId, string etag, JsonPatchDocument\u003cAccessControlList\u003e streamAclPatch); Get Stream Owner Gets the Owner of the specified stream. For more information, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body. Response body The Owner for the specified stream .NET client libraries method Task\u003cTrustee\u003e GetStreamOwnerAsync(string streamId); Update Stream Owner Updates the Owner of the specified stream. For more information, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body Serialized Owner Response The response includes a status code .NET client libraries method Task UpdateStreamOwnerAsync(string streamId, Trustee streamOwner); Get Stream Access Rights Gets the access rights associated with the specified stream for the requesting identity. For more information on access rights, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/AccessRights api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body Response body The Access Rights associated with specified stream for the requesting identity. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [\"Read\", \"Write\"] .NET client libraries method Task\u003cstring[]\u003e GetStreamAccessRightsAsync(string streamId);"
                                                                          },
    "Content_Portal/Documentation/SequentialDataStore/SDS_Types.html":  {
                                                                            "href":  "Content_Portal/Documentation/SequentialDataStore/SDS_Types.html",
                                                                            "title":  "Types",
                                                                            "keywords":  "Types The Sequential Data Store (SDS) stores streams of events and provides convenient ways to find and associate events. Events are stored in streams. A primitive type is available in the OCS and is used within the API and REST definitions to identify a stream type. You can define simple atomic types, such as integers, floats, strings, arrays, and dictionaries, or complex or nested types using the Properties collection of SdsTypes . A type that is used to define a stream must have a key. A key is a Property, or a combination of Properties that constitutes an ordered, unique identity. If the key is ordered so it functions as an index, it is known as the primary index . While a timestamp ( DateTime ) is a very common type of index, any type that can be ordered is permitted. Secondary and other indexes are defined in the stream. For more information, see Indexes . Consider how the events will be represented in a stream as the type defines each event in a stream. An event is a single unit whose properties have values that relate to the index; that is, each property of a type event is related to the event\u0027s index. Each event is a single unit. A type is referenced by its identifier or Id field. Type identifiers must be unique within a namespace. A type can also refer to other types by using their identifiers. This enables type re-usability. Nested types and base types are automatically created as separate types. For more information, see Type Reusability . Types define how events are read and associated within a collection of streams. The read characteristics when attempting to read non-existent indexes, indexes that fall between, before or after existing indexes, are determined by the interpolation and extrapolation settings of the type. For more information about read characteristics, see Interpolation and Extrapolation . Types are immutable. After a type is created, its definition cannot be updated. A type must be deleted and recreated if the definition is incorrect. You can delete a type only if no streams, stream views, or other types reference it. Only the types that are used to define streams or stream views are required to be added to the SDS. Types that define properties or base types are contained within the parent type so they don\u0027t need to be added to the SDS independently. SdsType fields and properties table The table below lists required and optional fields in a type. Fields that are not included are reserved for internal SDS use. For more information on search including limitations, see Search in SDS . Property Name Data Type Required Searchable Details Id String Yes Yes Identifier for referencing the type Name String No Yes Friendly name Description String No Yes Description text SdsTypeCode SdsTypeCode Yes No Numeric code identifying the base SdsType InterpolationMode SdsInterpolationMode No No Interpolation setting of the type. Default is Continuous. For more information, see Interpolation . ExtrapolationMode SdsExtrapolationMode No No Extrapolation setting of the type. For more information, see Extrapolation . Properties IList\u003cSdsTypeProperty\u003e Yes Yes, with limitations List of SdsTypeProperty items. See SdsTypeProperty below. Rules for the type identifier (SdsType.Id) Is not case sensitive Cannot just be whitespace Cannot contain leading or trailing whitespace Cannot contain forward slash (\"/\") (\" \") Can contain a maximum of 100 characters Type management using the .NET SDS client libraries methods is performed through ISdsMetadataService . You can create ISdsMetadataService using one of the SdsService.GetMetadataService() factory methods. .NET client libraries provide SdsTypeBuilder to help build SdsTypes from .NET types. SdsTypeBuilder is discussed in greater detail below. SdsTypeCode The SdsTypeCode is a numeric identifier used by the SDS to identify SdsTypes. An SdsTypeCode exists for every supported type. Atomic types, such as strings, floats and arrays, are defined entirely by the SdsTypeCode and do not need other fields to define the type. Types that require additional definition (enumerations and objects, for example) are identified with a generic SdsTypeCode ( ByteEnum , Int32Enum , NullableInt32withEnum , or Object , for example) and additional SdsTypeProperty fields. Supported Types The following types are supported and defined by the SdsTypeCode: Type SdsTypeCode Array 400 Boolean 3 BooleanArray 203 Byte 6 ByteArray 206 ByteEnum 606 Char 4 CharArray 204 DateTime 16 DateTimeArray 216 DateTimeOffset 20 DateTimeOffsetArray 220 DBNull 2 Decimal 15 DecimalArray 215 Double 14 DoubleArray 214 Empty 0 Guid 19 GuidArray 219 IDictionary 402 IEnumerable 403 IList 401 Int16 7 Int16Array 207 Int16Enum 607 Int32 9 Int32Array 209 Int32Enum 609 Int64 11 Int64Array 211 Int64Enum 611 NullableBoolean 103 NullableByte 106 NullableByteEnum 706 NullableChar 104 NullableDateTime 116 NullableDateTimeOffset 120 NullableDecimal 115 NullableDouble 114 NullableGuid 119 NullableInt16 107 NullableInt16Enum 707 NullableInt32 109 NullableInt32Enum 709 NullableInt64 111 NullableInt64Enum 711 NullableSByte 105 NullableSByteEnum 705 NullableSingle 113 NullableTimeSpan 121 NullableUInt16 108 NullableUInt16Enum 708 NullableUInt32 110 NullableUInt32Enum 710 NullableUInt64 112 NullableUInt64Enum 712 Object 1 SByte 5 SByteArray 205 SByteEnum 605 Single 13 SingleArray 213 String 18 StringArray 218 TimeSpan 21 TimeSpanArray 221 UInt16 8 UInt16Array 208 UInt16Enum 608 UInt32 10 UInt32Array 210 UInt32Enum 610 UInt64 12 UInt64Array 212 UInt64Enum 612 Version 22 VersionArray 222 SdsTypeProperty The Properties collection defines the fields in a type. Type properties will appear in every stream that is created from a given type. The following table shows the required and optional SdsTypeProperty fields. Fields that are not included are reserved for internal SDS use. Property Name Data Type Required Details Id String Yes Identifier for referencing the type Name String No Friendly name Description String No Description text SdsType SdsType Yes Field defining the property\u0027s SdsType IsKey Boolean Yes Identifies the property as the index Value Object No Value of the property Order Int No Order of comparison within a compound index InterpolationMode SdsInterpolationMode No Interpolation setting of the property. Default is null. Uom String No Unit of measure of the property ID rule The SdsTypeProperty ID follows the same rules as the type identifier. IsKey Boolean value IsKey identifies the primary index of a type in a single index. An index that is defined by more than one SdsTypeProperty is called a compound index. The maximum number of properties that can define a compound index is three. In a compound index, each SdsTypeProperty that is included in the index is specified as IsKey . The Order field marks the order of comparison within a compound index. Value The Value field is used for the properties of enumeration types. An enumeration is a collection of named constants with associated constant values. Each named constant is defined by the Id of the SdsTypeProperty. The associated constant value is defined by the Value of the SdsTypeProperty. For more information, see the enumeration State definitions in the sample code below. InterpolationMode InterpolationMode is assigned when the SdsTypeProperty of the event should be interpolated in a specific way that differs from the interpolation mode of the SdsType. InterpolationMode is only applied to an SdsTypeProperty that is not part of the index. If the InterpolationMode is not set, the SdsTypeProperty is interpolated in the manner defined by the SdsType\u0027s InterpolationMode . An SdsType with the InterpolationMode set to Discrete cannot also have the SdsTypeProperty with InteroplationMode . For more information on interpolation of events, see Interpolation . Uom Uom is the unit of measure for the SdsTypeProperty. The Uom of the SdsTypeProperty may be specified by the name or the abbreviation. The names and abbreviations of Uoms are case sensitive. The InterpolationMode and Uom of the SdsTypeProperty can be overridden on the SdsStream. For more information, see Streams . Supported units of measure For a list of units of measures that are supported for an SdsTypeProperty, see Units of measure . SdsTypes in .NET framework When working in .NET, use the SdsTypeBuilder to create SdsTypes. The SdsTypeBuilder eliminates potential errors that can occur when working with SdsTypes manually. There are several ways to work with the SdsTypeBuilder . One is to use the static methods for convenience: public enum State { Ok, Warning, Alarm } public class Simple { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public State State { get; set; } public Double Measurement { get; set; } } SdsType simpleType = SdsTypeBuilder.CreateSdsType\u003cSimple\u003e(); simpleType.Id = \"Simple\"; simpleType.Name = \"Simple\"; simpleType.Description = \"Basic sample type\"; SdsTypeBuilder recognizes the System.ComponentModel.DataAnnotations.KeyAttribute and its own OSIsoft.Sds.SdsMemberAttribute . When using the SdsMemberAttribute to specify the primary index, set the IsKey to true. The SdsType is created with the following parameters. SdsTypeBuilder automatically generates unique identifiers. Note that the following table contains only a partial list of fields. Field Values Id Simple Name Simple Description Basic sample type Properties Count = 3 [0] Id Time Name Time Description null Order 0 IsKey true SdsType Id c48bfdf5-a271-384b-bf13-bd21d931c1bf Name DateTime Description null Properties null Value null [1] Id State Name State Description null Order 0 IsKey false SdsType Id 02728a4f-4a2d-3588-b669-e08f19c35fe5 Name State Description null Properties Count = 3 [0] Id Name Description Order SdsType Value [1] Id Name Description Order SdsType Value [2] Id Name Description Order SdsType Value Value null [2] Id Measurement Name Measurement Description null Order 0 IsKey false SdsType Id 0f4f147f-4369-3388-8e4b-71e20c96f9ad Name Double Description null Properties null Value null The SdsTypeBuilder also supports derived types. Note that you need not add the base types to the SDS before using SdsTypeBuilder . Base types are maintained within the SdsType. SdsTypes outside of .NET framework You can manually build types when .NET SdsTypeBuilder is unavailable. Below, you\u0027ll see how types are built and defined in Python and JavaScript samples. For samples in other languages, go to OCS code samples in GitHub . SdsTypeCode, SdsTypeProperty and SdsType Python JavaScript class SdsTypeCode(Enum): Empty = 0 Object = 1 DBNull = 2 Boolean = 3 Char = 4 ... class SdsTypeProperty(object): \"\"\"SDS type property definition\"\"\" def __init__(self): self.__isKey = False @property def Id(self): return self.__id @Id.setter def Id(self, id): self.__id = id ... @property def IsKey(self): return self.__isKey @IsKey.setter def IsKey(self, iskey): self.__isKey = iskey @property def SdsType(self): return self.__SdsType @SdsType.setter def SdsType(self, SdsType): self.__SdsType=SdsType ... class SdsType(object): \"\"\"SDS type definitions\"\"\" def __init__(self): self.SdsTypeCode = SdsTypeCode.Object @property def Id(self): return self.__id @Id.setter def Id(self, id): self.__id = id ... @property def BaseType(self): return self.__baseType @BaseType.setter def BaseType(self, baseType): self.__baseType = baseType @property def SdsTypeCode(self): return self.__typeCode @SdsTypeCode.setter def SdsTypeCode(self, typeCode): self.__typeCode = typeCode @property def Properties(self): return self.__properties @Properties.setter def Properties(self, properties): self.__properties = properties SdsTypeCodeMap: { Empty: 0, \"Object\": 1, DBNull: 2, \"Boolean\": 3, Char: 4, ... SdsTypeProperty: function (SdsTypeProperty) { if (SdsTypeProperty.Id) { this.Id = SdsTypeProperty.Id; } if (SdsTypeProperty.Name) { this.Name = SdsTypeProperty.Name; } if (SdsTypeProperty.Description) { this.Description = SdsTypeProperty.Description; } if (SdsTypeProperty.SdsType) { this.SdsType = SdsTypeProperty.SdsType; } if (SdsTypeProperty.IsKey) { this.IsKey = SdsTypeProperty.IsKey; } }, SdsType: function (SdsType) { if (SdsType.Id) { this.Id = SdsType.Id } if (SdsType.Name) { this.Name = SdsType.Name; } if (SdsType.Description) { this.Description = SdsType.Description; } if (SdsType.SdsTypeCode) { this.SdsTypeCode = SdsType.SdsTypeCode; } if (SdsType.Properties) { this.Properties = SdsType.Properties; } }, Enum State and type Simple Python JavaScript class State(Enum): Ok = 0 Warning = 1 Alarm = 2 class Simple(object): Time = property(getTime, setTime) def getTime(self): return self.__time def setTime(self, time): self.__time = time State = property(getState, setState) def getState(self): return self.__state def setState(self, state): self.__state = state Measurement = property(getMeasurement, setMeasurement) def getMeasurement(self): return self.__measurement def setMeasurement(self, measurement): self.__measurement = measurement var State = { Ok: 0, Warning: 1, Alarm: 2, } var Simple = function () { this.Time = null; this.State = null; this.Measurement = null; } Defining and creating types Python JavaScript # Create the properties # Time is the primary index time = SdsTypeProperty() time.Id = \"Time\" time.Name = \"Time\" time.IsKey = True time.SdsType = SdsType() time.SdsType.Id = \"DateTime\" time.SdsType.Name = \"DateTime\" time.SdsType.SdsTypeCode = SdsTypeCode.DateTime # State is not a pre-defined type. SdsType must be defined to represent the enum stateTypePropertyOk = SdsTypeProperty() stateTypePropertyOk.Id = \"Ok\" stateTypePropertyOk.Value = State.Ok stateTypePropertyWarning = SdsTypeProperty() stateTypePropertyWarning.Id = \"Warning\" stateTypePropertyWarning.Value = State.Warning stateTypePropertyAlarm = SdsTypeProperty() stateTypePropertyAlarm.Id = \"Alarm\" stateTypePropertyAlarm.Value = State.Alarm stateType = SdsType() stateType.Id = \"State\" stateType.Name = \"State\" stateType.Properties = [ stateTypePropertyOk, stateTypePropertyWarning, \\ stateTypePropertyAlarm ] state = SdsTypeProperty() state.Id = \"State\" state.Name = \"State\" state.SdsType = stateType # Value property is a simple non-indexed, pre-defined type value = SdsTypeProperty() value.Id = \"Measurement\" value.Name = \"Measurement\" value.SdsType = SdsType() value.SdsType.Id = \"Double\" value.SdsType.Name = \"Double\" # Create the Simple SdsType simpleType = SdsType() simpleType.Id = \"Simple\" simpleType.Name = \"Simple\" simpleType.Description = \"Basic sample type\" simpleType.SdsTypeCode = SdsTypeCode.Object simpleType.Properties = [ time ] //    Time is the primary index var timeProperty = new SdsObjects.SdsTypeProperty({ \"Id\": \"Time\", \"IsKey\": true, \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"dateType\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.DateTime }) }); //    State is not a pre-defined type. An SdsType must be defined to represent the enum var stateTypePropertyOk = new SdsObjects.SdsTypeProperty({ \"Id\": \"Ok\", \"Value\": State.Ok }); var stateTypePropertyWarning = new SdsObjects.SdsTypeProperty({ \"Id\": \"Warning\", \"Value\": State.Warning }); var stateTypePropertyAlarm = new SdsObjects.SdsTypeProperty({ \"Id\": \"Alarm\", \"Value\": State.Alarm }); var stateType = new SdsObjects.SdsType({ \"Id\": \"State\", \"Name\": \"State\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Int32Enum, \"Properties\": [stateTypePropertyOk, stateTypePropertyWarning, stateTypePropertyAlarm, stateTypePropertyRed] }); //    Measurement property is a simple non-indexed, pre-defined type var measurementProperty = new SdsObjects.SdsTypeProperty({ \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"doubleType\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Double }) }); //    Create the Simple SdsType var simpleType = new SdsObjects.SdsType({ \"Id\": \"Simple\", \"Name\": \"Simple\", \"Description\": \"This is a simple SDS type \", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Object, \"Properties\": [timeProperty, stateProperty, measurementProperty] }); Working with a derived class is easy. For example, this is a derived class: class Derived(Simple): @property def Observation(self): return self.__observation @Observation.setter def Observation(self, observation): self.__observation = observation Extending the types Python JavaScript # Observation property is a simple non-indexed, standard data type observation = SdsTypeProperty() observation.Id = \"Observation\" observation.Name = \"Observation\" observation.SdsType = SdsType() observation.SdsType.Id = \"String\" observation.SdsType.Name = \"String\" observation.SdsType.SdsTypeCode = SdsTypeCode.String # Create the derived SdsType derived = SdsType() derived.Id = \"Derived\" derived.Name = \"Derived\" derived.Description = \"Derived sample type\" derived.BaseType = simpleType # Set the base type to the derived type derived.SdsTypeCode = SdsTypeCode.Object derived.Properties = [ observation ] var observationProprety = new SdsObjects.SdsTypeProperty({ \"Id\": \"Observation\", \"SdsType\": new SdsObjects.SdsType({ \"Id\": \"strType\", \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.String }) }); var derivedType = new SdsObjects.SdsType({ \"Id\": \"Derived\", \"Name\": \"Derived\", \"Description\": \" Derived sample type\", \"BaseType\": simpleType, \"SdsTypeCode\": SdsObjects.SdsTypeCodeMap.Object, \"Properties\": [ observationProprety ] }); Type reusability Types can refer to other types by using their identifiers, which enables type reusability. For example, if there is a common index and value property for a group of types that may have additional properties, a base type can be created with those properties. { \"Id\": \"Simple\", \"Name\": \"Simple\", \"SdsTypeCode\": 1, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"IsKey\": true, \"SdsType\": { \"SdsTypeCode\": 16 } }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"SdsType\": { \"SdsTypeCode\": 14 } } ] } If you need to create a new type with properties in addition to the ones shown above, a reference to the base type can be added by simply specifying the base type\u0027s Id . { \"Id\": \"Complex\", \"Name\": \"Complex\", \"SdsTypeCode\": 1, \"BaseType\":{ \"Id\":\"Simple\" }, \"Properties\": [ { \"Id\": \"Depth\", \"Name\": \"Depth\", \"SdsType\": { \"SdsTypeCode\": 14 } } ] } The new type may also include the full type definition of the reference type instead of specifying only the Id as shown below: { \"Id\": \"Complex\", \"Name\": \"Complex\", \"SdsTypeCode\": 1, \"BaseType\":{ \"Id\": \"Simple\", \"Name\": \"Simple\", \"SdsTypeCode\": 1, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"IsKey\": true, \"SdsType\": { \"SdsTypeCode\": 16 } }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"SdsType\": { \"SdsTypeCode\": 14 } } ] }, \"Properties\": [ { \"Id\": \"Depth\", \"Name\": \"Depth\", \"SdsType\": { \"SdsTypeCode\": 14 } } ] } If the full definition is sent, the referenced types (base type \"Simple\" in the above example) should match the actual type that was initially created. If the full definition is sent and the referenced types do not exist, a new type will be created automatically by the SDS. Further type creations can reference them as shown above. Note that when trying to get types back from the SDS, the results will also include types that were automatically created by the SDS. Base types and properties of type object , enum , or user-defined collections such as array , list and dictionary , will be treated as referenced types. Note that streams cannot be created using these referenced types. If a stream of a particular type is to be created, the type should contain at least one property with a valid index type as described in the Indexes section. The index property may also be in the base type as shown in the example above. You can do this using any programming languages. Here\u0027s an example in .NET: public class Basic { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public double Temperature { get; set; } } public class EngineMonitor : Basic { public double PistonSpeed { get; set; } } public class WindShieldMonitor : Basic { public double Luminance { get; set; } } SdsType engineType = SdsTypeBuilder.CreateSdsType\u003cEngineMonitor\u003e(); engineType.Id = \"Engine\"; engineType.BaseType.Id = \"Basic\"; SdsType windShieldType = SdsTypeBuilder.CreateSdsType\u003cWindShieldMonitor\u003e(); windShieldType.Id = \"WindShield\"; windShieldType.BaseType.Id = \"Basic\"; If needed, the base type\u0027s ID can also be changed to be more meaningful. SdsType API The REST APIs provide programmatic access to read and write SDS data. The APIs in this section interact with types. When working in .NET, convenient SDS Client Libraries are available. The ISdsMetadataService interface, accessed using the SdsService.GetMetadataService() helper, defines the available functions. See Types for general type-related information. Get Types Returns a list of types within a given namespace. If specifying the optional search query parameter, the list of types returned will match the search criteria. If the search query parameter is not specified, the list will include all types in the Namespace. See Search in SDS for information about specifying those respective parameters. Note that the results will also include types that were automatically created by SDS as a result of type referencing. For further details about type referencing please see: Type Reusability Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types?query={query}\u0026skip={skip}\u0026count={count}\u0026orderby={orderby} api v1 Tenants {tenantId} Namespaces {namespaceId} Types?query={query}\u0026skip={skip}\u0026count={count}\u0026orderby={orderby} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string query [Optional] Parameter representing a string search. See the Search in SDS topic for information about specifying the query parameter. int skip [Optional] Parameter representing the zero-based offset of the first SdsType to retrieve. If not specified, a default value of 0 is used. int count [Optional] Parameter representing the maximum number of SdsTypes to retrieve. If not specified, a default value of 100 is used. string orderby [Optional] Parameter representing sorted order which SdsTypes will be returned. A field name is required. The sorting is based on the stored values for the given field (of type string). For example, orderby=name would sort the returned results by the name values (ascending by default). Additionally, a value can be provided along with the field name to identify whether to sort ascending or descending, by using values asc or desc , respectively. For example, orderby=name desc would sort the returned results by the name values, descending. If no value is specified, there is no sorting of results. Response The response includes a status code and a response body. Response body A collection of zero or more SdsTypes Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Id\": \"Simple\", \"Name\": \"Simple\", \"SdsTypeCode\": 1, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"IsKey\": true, \"SdsType\": { \"Id\": \"19a87a76-614a-385b-ba48-6f8b30ff6ab2\", \"Name\": \"DateTime\", \"SdsTypeCode\": 16 } }, { \"Id\": \"State\", \"Name\": \"State\", \"SdsType\": { \"Id\": \"e20bdd7e-590b-3372-ab39-ff61950fb4f3\", \"Name\": \"State\", \"SdsTypeCode\": 609, \"Properties\": [ { \"Id\": \"Ok\", \"Value\": 0 }, { \"Id\": \"Warning\", \"Value\": 1 }, { \"Id\": \"Alarm\", \"Value\": 2 } ] } }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"SdsType\": { \"Id\": \"6fecef77-20b1-37ae-aa3b-e6bb838d5a86\", \"Name\": \"Double\", \"SdsTypeCode\": 14 } } ] }, ??? ] .NET client libraries method Task\u003cIEnumerable\u003cSdsType\u003e\u003e GetTypesAsync(string query = \"\", int skip = 0, int count = 100); Get Type Returns the type corresponding to the specified typeId within a given namespace. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId} api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Response The response includes a status code and a response body. Response body The requested SdsType Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Id\": \"Simple\", \"Name\": \"Simple\", \"SdsTypeCode\": 1, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"IsKey\": true, \"SdsType\": { \"Id\": \"19a87a76-614a-385b-ba48-6f8b30ff6ab2\", \"Name\": \"DateTime\", \"SdsTypeCode\": 16 } }, { \"Id\": \"State\", \"Name\": \"State\", \"SdsType\": { \"Id\": \"e20bdd7e-590b-3372-ab39-ff61950fb4f3\", \"Name\": \"State\", \"SdsTypeCode\": 609, \"Properties\": [ { \"Id\": \"Ok\", \"Value\": 0 }, { \"Id\": \"Warning\", \"Value\": 1 }, { \"Id\": \"Alarm\", \"Value\": 2 } ] } }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"SdsType\": { \"Id\": \"6fecef77-20b1-37ae-aa3b-e6bb838d5a86\", \"Name\": \"Double\", \"SdsTypeCode\": 14 } } ] } .NET client libraries method Task\u003cSdsType\u003e GetTypeAsync(string typeId); Get Type Reference Count Returns a dictionary mapping the object name to the number of references held by streams, stream views and parent types for the specified type. See Streams and Steam Views for more information on the use of types to define streams and stream views. For further details about type referencing please see: Type Reusability . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/ReferenceCount api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} ReferenceCount Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Response The response includes a status code and a response body. Response body A dictionary mapping object name to number of references. Example response body { \"SdsStream\": 3, \"SdsStreamView\": 2, \"SdsType\": 1 } .NET client libraries method Task\u003cIDictionary\u003cstring, int\u003e\u003e GetTypeReferenceCountAsync(string typeId); Get or Create Type Creates the specified type. If a type with a matching identifier already exists, SDS compares the existing type with the type that was sent. If the types are identical, a Found (302) error is returned with the Location header set to the URI where the type may be retrieved using a Get function. If the types do not match, a Conflict (409) error is returned. Note that a Conflict (409) error will also be returned if the type contains reference to any existing type, but the referenced type definition in the body does not match the existing type. You may reference an existing type without including the reference type definition in the body by using only the Ids. For further details about type referencing please see: Type Reusability . For a matching type ( Found ), clients that are capable of performing a redirect that includes the authorization header can automatically redirect to retrieve the type. However, most clients, including the .NET HttpClient, consider redirecting with the authorization token to be a security vulnerability. When a client performs a redirect and strips the authorization header, SDS cannot authorize the request and returns Unauthorized (401). For this reason, it is recommended that when using clients that do not redirect with the authorization header, you should disable automatic redirect and perform the redirect manually. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId} api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier. The identifier must match the SdsType.Id field in the request body. Request body The request content is the serialized SdsType. Example request body { \"Id\": \"Simple\", \"Name\": \"Simple\", \"SdsTypeCode\": 1, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"IsKey\": true, \"SdsType\": { \"Id\": \"19a87a76-614a-385b-ba48-6f8b30ff6ab2\", \"Name\": \"DateTime\", \"SdsTypeCode\": 16 } }, { \"Id\": \"State\", \"Name\": \"State\", \"SdsType\": { \"Id\": \"e20bdd7e-590b-3372-ab39-ff61950fb4f3\", \"Name\": \"State\", \"SdsTypeCode\": 609, \"Properties\": [ { \"Id\": \"Ok\", \"Value\": 0 }, { \"Id\": \"Warning\", \"Value\": 1 }, { \"Id\": \"Alarm\", \"Value\": 2 } ] } }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"SdsType\": { \"Id\": \"6fecef77-20b1-37ae-aa3b-e6bb838d5a86\", \"Name\": \"Double\", \"SdsTypeCode\": 14 } } ] } Response The response includes a status code and a response body. Response body The request content is the serialized SdsType. If you are not using the SDS Client Libraries, it is recommended that you use JSON. Example response body HTTP/1.1 HTTP 1.1 201 Content-Type: application/json application json { \"Id\": \"Simple\", \"Name\": \"Simple\", \"Description\": null, \"SdsTypeCode\": 1, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": [ { \"Id\": \"Time\", \"Name\": \"Time\", \"Description\": null, \"Order\": 0, \"IsKey\": true, \"FixedSize\": 0, \"SdsType\": { \"Id\": \"19a87a76-614a-385b-ba48-6f8b30ff6ab2\", \"Name\": \"DateTime\", \"Description\": null, \"SdsTypeCode\": 16, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": null, \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 }, \"Value\": null, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"State\", \"Name\": \"State\", \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": { \"Id\": \"e20bdd7e-590b-3372-ab39-ff61950fb4f3\", \"Name\": \"State\", \"Description\": null, \"SdsTypeCode\": 609, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": [ { \"Id\": \"Ok\", \"Name\": null, \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": null, \"Value\": 0, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"Warning\", \"Name\": null, \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": null, \"Value\": 1, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"Alarm\", \"Name\": null, \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": null, \"Value\": 2, \"Uom\": null, \"InterpolationMode\": null } ], \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 }, \"Value\": null, \"Uom\": null, \"InterpolationMode\": null }, { \"Id\": \"Measurement\", \"Name\": \"Measurement\", \"Description\": null, \"Order\": 0, \"IsKey\": false, \"FixedSize\": 0, \"SdsType\": { \"Id\": \"6fecef77-20b1-37ae-aa3b-e6bb838d5a86\", \"Name\": \"Double\", \"Description\": null, \"SdsTypeCode\": 14, \"IsGenericType\": false, \"IsReferenceType\": false, \"GenericArguments\": null, \"Properties\": null, \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 }, \"Value\": null, \"Uom\": null, \"InterpolationMode\": null } ], \"BaseType\": null, \"DerivedTypes\": null, \"InterpolationMode\": 0, \"ExtrapolationMode\": 0 } .NET client libraries method Task\u003cSdsType\u003e GetOrCreateTypeAsync(SdsType sdsType) If a type with a matching identifier already exists and it matches the type in the request body, the client redirects a GET to the Location header. If the existing type does not match the type in the request body, a Conflict error response is returned and the client library method throws an exception. The .NET SDS Client Libraries manage redirects. Delete Type Deletes a type from the specified tenant and namespace. Note that a type cannot be deleted if any streams, stream views, or other types reference it. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId} api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Response The response includes a status code. .NET client libraries method Task DeleteTypeAsync(string typeId); Get Types Access Control List Gets the default ACL for the Types collection. For more information on ACLs, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Types api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Types Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The default ACL for Types Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetTypesAccessControlListAsync(); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetTypesAccessControlListWithETagAsync(); Update Types Access Control List Updates the default ACL for the Types collection. For more information on ACLs, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Types api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Types Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateTypesAccessControlListAsync(AccessControlList typesAcl); Patch Types Access Control List Updates the default ACL for the Types collection using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Types api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Types Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchTypesAccessControlListAsync(JsonPatchDocument\u003cAccessControlList\u003e typesAclPatch); Task PatchTypesAccessControlListWithETagAsync(string etag, JsonPatchDocument\u003cAccessControlList\u003e typesAclPatch); Get Type Access Control List Gets the ACL of the specified type. For more information on ACLs, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The ACL for the specified type Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetTypeAccessControlListAsync(string typeId); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetTypeAccessControlListWithETagAsync(string typeId); Update Type Access Control List Updates the ACL of the specified type. For more information on ACLs, see Access Control . Note that this does not update the ACL for the associated types. For further details about type referencing please see: Type Reusability . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateTypeAccessControlListAsync(string typeId, AccessControlList typeAcl); Patch Type Access Control List Updates the ACL of the specified type using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Note that this does not update the ACL for the associated types. For further details about type referencing please see: Type Reusability . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchTypeAccessControlListAsync(string typeId, JsonPatchDocument\u003cAccessControlList\u003e typeAclPatch); Task PatchTypeAccessControlListWithETagAsync(string typeId, string etag, JsonPatchDocument\u003cAccessControlList\u003e typeAclPatch); Get Type Owner Gets the Owner of the specified type. For more information on Owners, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Response The response includes a status code and a response body. Response body The Owner for the specified type .NET client libraries method Task\u003cTrustee\u003e GetTypeOwnerAsync(string typeId); Update Type Owner Updates the Owner of the specified type. For more information on Owners, see Access Control . Note that this does not update the Owner for the associated types. For further details about type referencing please see: Type Reusability . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Types {typeId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Request body Serialized Owner Response The response includes a status code. .NET client libraries methods Task UpdateTypeOwnerAsync(string typeId, Trustee typeOwner); Get Type Access Rights Gets the Access Rights associated with the specified type for the requesting identity. For more information on Access Rights, see Access Control . Request GET api/v1//Tenants/{tenantId}/Namespaces/{namespaceId}/Types/{typeId}/AccessRights api v1  Tenants {tenantId} Namespaces {namespaceId} Types {typeId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string typeId The type identifier Response The response includes a status code and a response body. Response body The Access Rights of the specified type for the requesting identity. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [\"Read\", \"Write\"] .NET client libraries methods Task\u003cstring[]\u003e GetTypeAccessRightsAsync(string typeId);"
                                                                        },
    "Content_Portal/Documentation/SequentialDataStore/SDS_Views.html":  {
                                                                            "href":  "Content_Portal/Documentation/SequentialDataStore/SDS_Views.html",
                                                                            "title":  "Stream Views",
                                                                            "keywords":  "Stream Views Stream views provide flexibility in the use of types and allow you to expose data as a different type. While you cannot actually change the properties of types themselves, the stream views feature enables you to create a view of a selected stream that appears as if you had changed the type on which it is based. You create a stream view by choosing a source and target type then a set of mappings between properties of those two types. Using a stream view to leverage existing type properties is preferable to creating a new type, because the stream that is based on the type continues to function with its previously archived stream data intact. For more information, see Update Stream Type and stream views . SdsStreamView fields and properties table The following table shows the required and optional SdsStreamView fields. Fields that are not included are reserved for internal SDS use. See Search in SDS for limitations on search. Property Data Type Required Searchable Description Id String Yes Yes Identifier for referencing the stream view Name String No Yes Friendly name Description String No Yes Description text SourceTypeId String Yes Yes Identifier of the SdsType of the SdsStream TargetTypeId String Yes Yes Identifier of the SdsType to convert events to Properties IList\u003cSdsStreamViewProperty\u003e No Yes, with limitations* Property-level mapping *Notes on Properties field : SdsStreamViewProperty objects are not searchable. Only the SdsStreamViewProperty\u0027s SdsStreamView is searchable by its Id , SourceTypeId , and TargetTypeId , which are used to return the top level SdsStreamView object when searching. The same is true for nested SdsStreamViewProperties. For more information, see search for stream views . Rules for the Stream View Identifier (SdsStreamView.Id) Is not case sensitive Cannot just be whitespace Cannot contain leading or trailing whitespace Cannot contain forward slash (\"/\") (\" \") Can contain a maximum of 100 characters SdsStreamView mapping SDS automatically maps properties from the source to the target type when it is straightforward. For example: The properties are in the same position The properties are of the same data type The properties are of the same name When SDS is unable to determine how to map a property of the source type, the property is removed. If a property of the target type cannot map to the source property, SDS adds a property that is configured with a default value. To map a property that is beyond the ability of SDS to map on its own, you should define an SdsStreamViewProperty and add it to the SdsStreamView???s properties collection. SDS largely supports mapping within the same data type. Mapping compatibility chart Source type\\ Target type Numeric types Nullable numeric types Enumeration types Nullable enumeration types Object types Numeric types Yes Yes No No No Nullable numeric types Yes Yes No No No Enumeration types No No Yes Yes No Nullable enumeration types No No Yes Yes No Object types No No No No Yes* * Mappable if typeId matches between the source and the target type SdsStreamViewProperty The SdsStreamView properties collection provides detailed instructions for specifying the mapping of event properties. Each SdsStreamViewProperty in the properties collection defines the mapping of an event???s property. SdsStreamView properties are required only when property mapping is not straightforward. If you do not want a particular SdsType property in the source type to be mapped, there is no need to create a property for it. The following table shows the required and optional SdsStreamViewProperty fields. Property Data Type Required Description SourceId String Yes Identifier of the SdsTypeProperty from the source SdsType Properties list TargetId String Yes Identifier of the SdsTypeProperty from the target SdsType Properties list SdsStreamView SdsStreamView No Additional mapping instructions for derived types The SdsStreamView field supports nested properties. SdsStreamViewMap When an SdsStreamView is added, SDS defines a plan mapping. Plan details are retrieved as an SdsStreamViewMap. The SdsStreamViewMap provides a detailed property-by-property definition of the mapping. The table below shows the SdsStreamViewMap fields. The SdsStreamViewMap cannot be written to the SDS, so required and optional have no meaning. Property Data Type Required Description SourceTypeId String Yes Identifier of the SdsType of the SdsStream TargetTypeId String Yes Identifier of the SdsType to convert events to Properties IList\u003cSdsStreamViewMapProperty\u003e No Property-level mapping SdsStreamViewMapProperty The SdsStreamViewMapProperty is similar to SdsStreamViewProperty but adds a mode detailing one or more actions taken on the property. The table below shows the SdsStreamViewMapProperty fields. The SdsStreamViewMap cannot be written; it can only be retrieved from the SDS, so required and optional have no meaning. Property Data Type Description SourceTypeId String Identifier of the SdsType of the SdsStream TargetTypeId String Identifier of the SdsType to convert events to Mode SdsStreamViewMode Aggregate of actions applied to the properties. SdsStreamViewModes are combined via binary arithmetic SdsStreamViewMap SdsStreamViewMap Mapping for derived types SdsStreamViewMode table Name Value Description None 0x0000 No action FieldAdd 0x0001 Add a property matching the specified SdsTypeProperty FieldRemove 0x0002 Remove the property matching the specified SdsTypeProperty FieldRename 0x0004 Rename the property matching the source SdsTypeProperty to the target SdsTypeProperty FieldMove 0x0008 Move the property from the location in the source to the location in the target FieldConversion 0x0016 Convert the source property to the target type InvalidFieldConversion 0x0032 Cannot perform the specified mapping Getting started with SdsStreamViews To work with stream views, you first need to have types, streams and streams data defined. Here\u0027s a simplified procedure for working with the stream view. For code examples, see Work with SdsStreamViews in .NET framework and Work with SdsStreamViews outside of .NET framework below. Create a type that will be the source type. Create a stream that is of the type defined in step 1. Write data into the stream that was created in step 2. Read data from the stream to verify. Create another type that will be the target type. Create a stream view using the source type (step 1) and the target type (step 5). The mapping between the source and the target type happens automatically if you do not specify it in SdsStreamViewProperty . Get SdsStreamViewMap to see how properties are mapped. Read data from the stream with the stream view to verify. For more information, see Reading with SdsStreamViews . Work with SdsStreamViews in .NET framework Using .NET When working in .NET, use the SDS client libraries method ISdsMetadataService . Given the following: public enum State { Ok, Warning, Alarm } public class Simple { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public State State { get; set; } public double Measurement { get; set; } } SdsType simpleType = SdsTypeBuilder.CreateSdsType\u003cSimple\u003e(); simpleType.Id = \"Simple\"; simpleType.Name = \"Simple\"; await config.GetOrCreateTypeAsync(simpleType); SdsStream simpleStream = await config.GetOrCreateStreamAsync(new SdsStream() { Id = \"Simple\", Name = \"Simple\", TypeId = simpleType.Id }); DateTime start = new DateTime(2017, 4, 1).ToUniversalTime(); for (int i = 0; i \u003c 10; i++) { Simple value = new Simple() { Time = start + TimeSpan.FromMinutes(i), State = State.Warning, Measurement = i }; await client.InsertValueAsync(simpleStream.Id, value); } IEnumerable\u003cSimple\u003e simpleValues = await client.GetWindowValuesAsync\u003cSimple\u003e(simpleStream.Id, start.ToString(\"o\"), start.Add(TimeSpan.FromMinutes(10)).ToString(\"o\")); foreach (Simple value in simpleValues) Console.WriteLine($\"{value.Time}: {value.State}, {value.Measurement}\"); //    The example displays the following output: //    4 /   1 /   2017 7:00:00 AM: Warning, 0 //    4 /   1 /   2017 7:01:00 AM: Warning, 1 //    4 /   1 /   2017 7:02:00 AM: Warning, 2 //    4 /   1 /   2017 7:03:00 AM: Warning, 3 //    4 /   1 /   2017 7:04:00 AM: Warning, 4 //    4 /   1 /   2017 7:05:00 AM: Warning, 5 //    4 /   1 /   2017 7:06:00 AM: Warning, 6 //    4 /   1 /   2017 7:07:00 AM: Warning, 7 //    4 /   1 /   2017 7:08:00 AM: Warning, 8 //    4 /   1 /   2017 7:09:00 AM: Warning, 9 To map the Measurement property to a property in the same location of the same type, allow SDS to automatically determine mapping. public class Simple1 { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public State State { get; set; } public double Value { get; set; } } SdsType simple1Type = SdsTypeBuilder.CreateSdsType\u003cSimple1\u003e(); simple1Type.Id = \"Simple1\"; simple1Type.Name = \"Simple1\"; simple1Type = await config.GetOrCreateTypeAsync(simple1Type); SdsStreamView view = new SdsStreamView() { Id = \"StreamView\", Name = \"StreamView\", SourceTypeId = simpleType.Id, TargetTypeId = simple1Type.Id, }; view = await config.GetOrCreateStreamViewAsync(view); SdsStreamViewMap map = await config.GetStreamViewMapAsync(view.Id); Console.WriteLine($\"{map.SourceTypeId} to {map.TargetTypeId}\"); for (int i = 0; i \u003c map.Properties.Count; i++) Console.WriteLine($\"\\t{i}) {map.Properties[i].SourceId} to {map.Properties[i].TargetId} - {map.Properties[i].Mode}\"); Console.WriteLine(); IEnumerable\u003cSimple1\u003e simple1Values = await client.GetWindowValuesAsync\u003cSimple1\u003e(simpleStream.Id, start.ToString(\"o\"), start.Add(TimeSpan.FromMinutes(10)).ToString(\"o\"), view.Id); foreach (Simple1 value in simple1Values) Console.WriteLine($\"{value.Time}: {value.State}, {value.Value}\"); //    The example displays the following output: //    Simple to Simple1 //    0) Time to Time - None //    1) State to State - None //    2) Measurement to Value - FieldRename //    //    4 /   1 /   2017 7:00:00 AM: Warning, 0 //    4 /   1 /   2017 7:01:00 AM: Warning, 1 //    4 /   1 /   2017 7:02:00 AM: Warning, 2 //    4 /   1 /   2017 7:03:00 AM: Warning, 3 //    4 /   1 /   2017 7:04:00 AM: Warning, 4 //    4 /   1 /   2017 7:05:00 AM: Warning, 5 //    4 /   1 /   2017 7:06:00 AM: Warning, 6 //    4 /   1 /   2017 7:07:00 AM: Warning, 7 //    4 /   1 /   2017 7:08:00 AM: Warning, 8 //    4 /   1 /   2017 7:09:00 AM: Warning, 9 A quick look at the SdsStreamViewMap shows that SDS was able to determine that mapping from Measurement to Value resulted in renaming. SDS can also determine mapping of properties of the same name but different type. Note that the location of the Measurement property is also different yet it is still mapped. public class Simple2 { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public int Measurement { get; set; } public State State { get; set; } } SdsType simple2Type = SdsTypeBuilder.CreateSdsType\u003cSimple2\u003e(); simple2Type.Id = \"Simple2\"; simple2Type.Name = \"Simple2\"; simple2Type = await config.GetOrCreateTypeAsync(simple2Type); SdsStreamView view = new SdsStreamView() { Id = \"StreamView1\", Name = \"StreamView1\", SourceTypeId = simpleType.Id, TargetTypeId = simple2Type.Id, }; view = await config.GetOrCreateStreamViewAsync(view); SdsStreamViewMap map = await config.GetStreamViewMapAsync(view.Id); Console.WriteLine($\"{map.SourceTypeId} to {map.TargetTypeId}\"); for (int i = 0; i \u003c map.Properties.Count; i++) Console.WriteLine($\"\\t{i}) {map.Properties[i].SourceId} to {map.Properties[i].TargetId} - {map.Properties[i].Mode}\"); Console.WriteLine(); IEnumerable\u003cSimple2\u003e simple2Values = await client.GetWindowValuesAsync\u003cSimple2\u003e(simpleStream.Id, start.ToString(\"o\"), start.Add(TimeSpan.FromMinutes(10)).ToString(\"o\"), view.Id); foreach (Simple2 value in simple2Values) Console.WriteLine($\"{value.Time}: {value.State}, {value.Measurement}\"); //The   The example displays the following output: //    Simple to Simple2 //    0) Time to Time - None //    1) State to State - None //    2) Measurement to Measurement - FieldConversion //    //    4 /   1 /   2017 7:00:00 AM: Warning, 0 //    4 /   1 /   2017 7:01:00 AM: Warning, 1 //    4 /   1 /   2017 7:02:00 AM: Warning, 2 //    4 /   1 /   2017 7:03:00 AM: Warning, 3 //    4 /   1 /   2017 7:04:00 AM: Warning, 4 //    4 /   1 /   2017 7:05:00 AM: Warning, 5 //    4 /   1 /   2017 7:06:00 AM: Warning, 6 //    4 /   1 /   2017 7:07:00 AM: Warning, 7 //    4 /   1 /   2017 7:08:00 AM: Warning, 8 //    4 /   1 /   2017 7:09:00 AM: Warning, 9 The SdsStreamViewMap shows that the source Measurement floating point is converted to integer in the target. When neither the field name, the field type or location matches, SDS does not determine mapping. The source is eliminated, target is added and assigned the default value. public class Simple3 { [SdsMember(IsKey = true, Order = 0)] public DateTime Time { get; set; } public State State { get; set; } public int Value { get; set; } } SdsType simple3Type = SdsTypeBuilder.CreateSdsType\u003cSimple3\u003e(); simple3Type.Id = \"Simple3\"; simple3Type.Name = \"Simple3\"; simple3Type = await config.GetOrCreateTypeAsync(simple3Type); SdsStreamView view = new SdsStreamView() { Id = \"StreamView2\", Name = \"StreamView2\", SourceTypeId = simpleType.Id, TargetTypeId = simple3Type.Id, }; view = await config.GetOrCreateStreamViewAsync(view); SdsStreamViewMap map = await config.GetStreamViewMapAsync(view.Id); Console.WriteLine($\"{map.SourceTypeId} to {map.TargetTypeId}\"); for (int i = 0; i \u003c map.Properties.Count; i++) Console.WriteLine($\"\\t{i}) {map.Properties[i].SourceId} to {map.Properties[i].TargetId} - {map.Properties[i].Mode}\"); Console.WriteLine(); IEnumerable\u003cSimple3\u003e simple3Values = await client.GetWindowValuesAsync\u003cSimple3\u003e(simpleStream.Id, start.ToString(\"o\"), start.Add(TimeSpan.FromMinutes(10)).ToString(\"o\"), view.Id); foreach (Simple3 value in simple3Values) Console.WriteLine($\"{value.Time}: {value.State}, {value.Value}\"); //The   The example displays the following output: //    Simple to Simple3 //    0) Time to Time - None //    1) State to State - None //    2) Measurement to -FieldRemove //    3) to Value -FieldAdd //    //    4 /   1 /   2017 7:00:00 AM: Warning, 0 //    4 /   1 /   2017 7:01:00 AM: Warning, 0 //    4 /   1 /   2017 7:02:00 AM: Warning, 0 //    4 /   1 /   2017 7:03:00 AM: Warning, 0 //    4 /   1 /   2017 7:04:00 AM: Warning, 0 //    4 /   1 /   2017 7:05:00 AM: Warning, 0 //    4 /   1 /   2017 7:06:00 AM: Warning, 0 //    4 /   1 /   2017 7:07:00 AM: Warning, 0 //    4 /   1 /   2017 7:08:00 AM: Warning, 0 //    4 /   1 /   2017 7:09:00 AM: Warning, 0 To map when SDS cannot determine mapping, use SdsStreamView Properties . SdsStreamView view = new SdsStreamView() { Id = \"SteamView3\", Name = \"StreamView3\", SourceTypeId = simpleType.Id, TargetTypeId = simple3Type.Id, Properties = new List\u003cSdsStreamViewProperty\u003e() { new SdsStreamViewProperty() { SourceId = \"Time\", TargetId = \"Time\" }, new SdsStreamViewProperty() { SourceId = \"State\", TargetId = \"State\" }, new SdsStreamViewProperty() { SourceId = \"Measurement\", TargetId = \"Value\" } } }; view = await config.GetOrCreateStreamViewAsync(view); SdsStreamViewMap map = await config.GetStreamViewMapAsync(view.Id); Console.WriteLine($\"{map.SourceTypeId} to {map.TargetTypeId}\"); for (int i = 0; i \u003c map.Properties.Count; i++) Console.WriteLine($\"\\t{i}) {map.Properties[i].SourceId} to {map.Properties[i].TargetId} - {map.Properties[i].Mode}\"); Console.WriteLine(); IEnumerable\u003cSimple3\u003e simple3Values = await client.GetWindowValuesAsync\u003cSimple3\u003e(simpleStream.Id, start.ToString(\"o\"), start.Add(TimeSpan.FromMinutes(10)).ToString(\"o\"), view.Id); foreach (Simple3 value in simple3Values) Console.WriteLine($\"{value.Time}: {value.State}, {value.Value}\"); //The   The example displays the following output: //    Simple to Simple3 //    0) Time to Time - None //    1) State to State - None //    2) Measurement to Value - FieldRename, FieldConversion //    //    4 /   1 /   2017 7:00:00 AM: Warning, 0 //    4 /   1 /   2017 7:01:00 AM: Warning, 1 //    4 /   1 /   2017 7:02:00 AM: Warning, 2 //    4 /   1 /   2017 7:03:00 AM: Warning, 3 //    4 /   1 /   2017 7:04:00 AM: Warning, 4 //    4 /   1 /   2017 7:05:00 AM: Warning, 5 //    4 /   1 /   2017 7:06:00 AM: Warning, 6 //    4 /   1 /   2017 7:07:00 AM: Warning, 7 //    4 /   1 /   2017 7:08:00 AM: Warning, 8 //    4 /   1 /   2017 7:09:00 AM: Warning, 9 Work with SdsStreamViews outside of .NET framework When working with SdsStreamViews and not using .NET, either invoke HTTP methods directly or use the code samples. Both Python and JavaScript samples have SdsStreamView definitions. JSON representation for a simple mapping between a source type with identifier Simple and a target type with identifier Simple1 would appear as follows: { \"Id\":\"StreamView\", \"Name\":\"StreamView\", \"SourceTypeId\":\"Simple\", \"TargetTypeId\":\"Simple1\" } The SdsStreamViewMap would appear as follows: { \"SourceTypeId\":\"Simple\", \"TargetTypeId\":\"Simple1\", \"Properties\":[ { \"SourceId\":\"Time\", \"TargetId\":\"Time\" }, { \"SourceId\":\"State\", \"TargetId\":\"State\" }, { \"SourceId\":\"Measurement\", \"TargetId\":\"Value\", \"Mode\":4 } ] } SdsStreamView API The REST APIs provide programmatic access to read and write SDS data. The APIs in this section interact with SdsStreamViews. When working in .NET, convenient SDS .NET client libraries methods are available. The ISdsMetadataService interface, accessed using the SdsService.GetMetadataService() helper, defines the available functions. See Stream Views for general SdsStreamView information. Get Stream Views Returns a list of stream views within a given namespace. If specifying the optional search query parameter, the list of stream views returned will match the search criteria. If the search query parameter is not specified, the list will include all stream views in the namespace. See Search in SDS for information about specifying those respective parameters. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews?query={query}\u0026skip={skip}\u0026count={count}\u0026orderby={orderby} api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews?query={query}\u0026skip={skip}\u0026count={count}\u0026orderby={orderby} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string query An optional parameter representing a string search. See Search in SDS for information about specifying the search parameter. int skip An optional parameter representing the zero-based offset of the first SdsStreamView to retrieve. If not specified, a default value of 0 is used. int count An optional parameter representing the maximum number of SdsStreamViews to retrieve. If not specified, a default value of 100 is used. string orderby An optional parameter representing sorted order which SdsStreamViews will be returned. A field name is required. The sorting is based on the stored values for the given field (of type string). For example, orderby=name would sort the returned results by the name values (ascending by default). Additionally, a value can be provided along with the field name to identify whether to sort ascending or descending, by using values asc or desc , respectively. For example, orderby=name desc would sort the returned results by the name values, descending. If no value is specified, there is no sorting of results. Response The response includes a status code and a response body. Response body A collection of zero or more SdsStreamViews. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Id\":\"StreamView\", \"Name\":\"StreamView\", \"SourceTypeId\":\"Simple\", \"TargetTypeId\":\"Simple3\" }, { \"Id\":\"StreamViewWithProperties\", \"Name\":\"StreamViewWithProperties\", \"SourceTypeId\":\"Simple\", \"TargetTypeId\":\"Simple3\", \"Properties\":[ { \"SourceId\":\"Time\", \"TargetId\":\"Time\" }, { \"SourceId\":\"State\", \"TargetId\":\"State\" }, { \"SourceId\":\"Measurement\", \"TargetId\":\"Value\" } ] } ] .NET client libraries method Task\u003cIEnumerable\u003cSdsStreamView\u003e\u003e GetStreamViewsAsync(int skip = 0, int count = 100); Get Stream View Returns the stream view corresponding to the specified streamViewId within a given namespace. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Response The response includes a status code and a response body. Response body The requested SdsStreamView. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Id\":\"StreamView\", \"Name\":\"StreamView\", \"SourceTypeId\":\"Simple\", \"TargetTypeId\":\"Simple3\", \"Properties\":[ { \"SourceId\":\"Time\", \"TargetId\":\"Time\" }, { \"SourceId\":\"State\", \"TargetId\":\"State\" }, { \"SourceId\":\"Measurement\", \"TargetId\":\"Value\" } ] } .NET client libraries method Task\u003cSdsStreamView\u003e GetStreamViewAsync(string streamViewId); Get Stream View Map Returns the stream view map corresponding to the specified streamViewId within a given namespace. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/Map api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Map Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Response The response includes a status code and a response body. Response body The requested SdsStreamView. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"SourceTypeId\":\"Simple\", \"TargetTypeId\":\"Simple3\", \"Properties\":[ { \"SourceId\":\"Time\", \"TargetId\":\"Time\" }, { \"SourceId\":\"Measurement\", \"TargetId\":\"Value\", \"Mode\":20 }, { \"SourceId\":\"State\", \"Mode\":2 }, { \"TargetId\":\"State\", \"Mode\":1 } ] } .NET client libraries method Task\u003cSdsStreamViewMap\u003e GetStreamViewMapAsync(string streamViewId); Get or Create Stream View If a stream view with a matching identifier already exists, the stream view passed in is compared with the existing stream view. If the stream views are identical, a Found (302) status is returned and the stream view. If the stream views are different, the Conflict (409) error is returned. If no matching identifier is found, the specified stream view is created. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier. The identifier must match the SdsStreamView.Id field. Request body The request content is the serialized SdsStreamView. If you are not using the SDS client libraries, using JSON is recommended. Response The response includes a status code and a response body. Response body The newly created or matching SdsStreamView. .NET client libraries method Task\u003cSdsStreamView\u003e GetOrCreateStreamViewAsync(SdsStreamView sdsStreamView); Create or Update Stream View Creates or updates the definition of a stream view. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Request body The request content is the serialized SdsStreamView. Response The response includes a status code and a response body. Response body The newly created or updated SdsStreamView. .NET client libraries method Task CreateOrUpdateStreamViewAsync(SdsStreamView SdsStreamView); Delete Stream View Deletes a stream view from the specified tenant and namespace. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId} api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Response The response includes a status code. .NET client libraries method Task DeleteStreamViewAsync(string streamViewId); Get Stream Views Access Control List Gets the default ACL for the Stream Views collection. For more information on ACLs, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/StreamViews api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl StreamViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The default ACL for Stream Views. Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetStreamViewsAccessControlListAsync(); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetStreamViewsAccessControlListWithETagAsync(); Update Stream Views Access Control List Updates the default ACL for the Stream Views collection. For more information on ACLs, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/StreamViews api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl StreamViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateStreamViewsAccessControlListAsync(AccessControlList viewsAcl); Patch Stream Views Access Control List Updates the default ACL for the Stream Views collection using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/StreamViews api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl StreamViews Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchStreamViewsAccessControlListAsync(JsonPatchDocument\u003cAccessControlList\u003e streamViewAclPatch); Task PatchStreamViewsAccessControlListWithETagAsync(string etag, JsonPatchDocument\u003cAccessControlList\u003e streamViewAclPatch); Get Stream View Access Control List Gets the ACL of the specified stream view. For more information on ACLs, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The default ACL for specified stream view. Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetStreamViewAccessControlListAsync(string streamViewId); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetStreamViewAccessControlListWithETagAsync(string streamViewId); Update Stream View Access Control List Updates the ACL of the specified stream view. For more information on ACLs, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateStreamViewAccessControlListAsync(string streamViewId, AccessControlList viewAcl); Patch Stream View Access Control List Updates the ACL of the specified stream view using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchStreamViewAccessControlListAsync(string streamViewId, JsonPatchDocument\u003cAccessControlList\u003e streamViewAclPatch); Task PatchStreamViewAccessControlListWithETagAsync(string streamViewId, string etag, JsonPatchDocument\u003cAccessControlList\u003e streamViewAclPatch); Get Stream View Owner Gets the Owner of the specified stream view. For more information on Owners, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Response The response includes a status code and a response body. Response body The Owner for the specified stream view .NET client libraries method Task\u003cTrustee\u003e GetStreamViewOwnerAsync(string streamViewId); Update Stream View Owner Updates the Owner of the specified stream view. For more information on Owners, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Request body Serialized Owner Response The response includes a status code. .NET client libraries method Task UpdateStreamViewOwnerAsync(string streamViewId, Trustee viewOwner); Get Stream View Access Rights Gets the Access Rights associated with the specified stream view for the requesting identity. For more information on Access Rights, see Access Control . Request GET api/v1//Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews/{streamViewId}/AccessRights api v1  Tenants {tenantId} Namespaces {namespaceId} StreamViews {streamViewId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamViewId The stream view identifier Response The response includes a status code and a response body. Response body The Access Rights of the specified stream view for the requesting identity. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [\"Read\", \"Write\"] .NET client libraries method Task\u003cstring[]\u003e GetStreamViewAccessRightsAsync(string streamViewId);"
                                                                        },
    "Content_Portal/Documentation/SequentialDataStore/SdsStreamExtra.html":  {
                                                                                 "href":  "Content_Portal/Documentation/SequentialDataStore/SdsStreamExtra.html",
                                                                                 "title":  "Stream metadata and tags",
                                                                                 "keywords":  "Stream metadata and tags Stream metadata is represented as a dictionary of string keys and associated string values. It can be used to associate additional information with a stream. Stream tags are represented as a list of strings. Tags can be used to categorize or denote special attributes of streams. The Stream Metadata API And Stream Tags API do not accept the search query parameter in their respective GET calls. However, stream tags and metadata can be used as criteria in search query strings to return stream results with the Stream API. SdsStream Metadata API Get Stream Metadata Returns the metadata dictionary for the specified stream. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Metadata api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Metadata Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body Response body The metadata for the specified stream Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"a metadata key\":\"a metadata value\", \"another key\":\"another value\" } Authorization Tenant Administrator Tenant Members .NET client libraries method Task\u003cIDictionary\u003cstring, string\u003e\u003e GetStreamMetadataAsync(string streamId); Get Stream Metadata Value Returns the value for the specified key in the metadata dictionary of the specified stream. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Metadata/{key} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Metadata {key} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string key The key specifying the metadata value of interest Response The response includes a status code and a response body Response body The metadata for the specified stream Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"a metadata value\" } Authorization Tenant Administrator Tenant Members .NET client libraries method Task\u003cstring\u003e GetStreamMetadataValueAsync(string streamId, string key); Update Stream Metadata Replaces the metadata for the specified stream with the metadata in the request body. Overwrites any existing metadata; does not merge. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Metadata api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Metadata Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code Authorization Tenant Administrator Tenant Members .NET client libraries method Task UpdateStreamMetadataAsync(string streamId, IDictionary\u003cstring, string\u003e metadata); Patch Stream Metadata Modifies the metadata based on operations specified in the request body. The request body follows JSON Patch format . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Metadata api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Metadata Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body Response body A collection of operations to be applied to the metadata collection as specified by the JSON Patch format Authorization Tenant Administrator Tenant Members .NET client libraries method Task\u003cIDictionary\u003cstring, string\u003e\u003e PatchStreamMetadataAsync(string streamId, MetadataPatchDocument patchDoc); Delete Stream Metadata Deletes the metadata for the specified stream. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Metadata api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Metadata Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code Authorization Tenant Administrator Tenant Members .NET client libraries method Task DeleteStreamMetadataAsync(string streamId); SdsStream Tags API Get Stream Tags Returns the tag list for the specified stream. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Tags api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Tags Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code and a response body Response body The tags for the specified stream Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ \"a tag\", \"another tag\" ] Authorization Tenant Administrator Tenant Members .NET client libraries method Task\u003cIList\u003cstring\u003e\u003e GetStreamTagsAsync(string streamId); Update Stream Tags Replaces the tag list for the specified stream with the tags listed in the request body. Overwrites any existing tags; does not merge. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Tags api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Tags Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body The request content is the serialized list of tags Response The response includes a status code Authorization Tenant Administrator Tenant Members .NET client libraries method Task UpdateStreamTagsAsync(string streamId, IList\u003cstring\u003e tags); Delete Stream Tags Deletes the tag list for the specified stream. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Tags api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Tags Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Response The response includes a status code Authorization Tenant Administrator Tenant Members .NET client libraries method Task DeleteStreamTagsAsync(string streamId);"
                                                                             },
    "Content_Portal/Documentation/SequentialDataStore/Searching.html":  {
                                                                            "href":  "Content_Portal/Documentation/SequentialDataStore/Searching.html",
                                                                            "title":  "Search in SDS",
                                                                            "keywords":  "Search in SDS You can search for objects using texts, phrases and fields in Sequential Data Store (SDS). The REST APIs (or .NET client libraries methods GetStreamsAsync , GetTypesAsync , and GetStreamViewsAsync ) return items that match the search criteria within a given namespace. By default, the query parameter applies to all searchable object fields. For example, a namespace contains the following streams: streamId Name Description stream1 tempA Temperature from DeviceA stream2 pressureA Pressure from DeviceA stream3 calcA Calculation from DeviceA values A GetStreamsAsync call with different queries will return below: Query string Returns temperature stream1 calc* stream3 DeviceA* stream1, stream2, stream3 humidity* nothing Requests GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=name:pump api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=name:pump name:pressure\u0026orderby=name GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=name:pump api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=name:pump name:pressure\u0026orderby=id asc GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=name:pump api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=name:pump name:pressure\u0026orderby=name desc GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=name:pump api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=name:pump name:pressure\u0026orderby=name desc\u0026skip=10\u0026count=20 Parameters string query [Optional] Parameter representing the search criteria. If unspecified, returns all values. Can be used with skip , count and orderby . int skip [Optional] Parameter representing the zero-based offset of the first SdsStream to retrieve. The number of matched items to skip over before returning. If unspecified, a default value of 0 is used. Use when more items match the search criteria than can be returned in a single call. int count [Optional] Parameter representing the maximum number of streams to retrieve. If unspecified, a default value of 100 is used. The maximum value is 1,000. string orderby [Optional] Parameter representing the sorted order in which streams are returned. Requires a field name ( orderby=name , for example). Default order is ascending ( asc ). Add desc for descending order ( orderby=name desc , for example). If unspecified, there is no sorting of results. .NET client libraries methods If there are 175 streams that match the search criteria \"temperature\" in a single call for example, the following call will return the first 100 matches: _metadataService.GetStreamsAsync(query:\"temperature\", skip:0, count:100) If skip is set to 100, the following call will return the remaining 75 matches while skipping over the first 100: _metadataService.GetStreamsAsync(query:\"temperature\", skip:100, count:100) Search for streams Streams search is exposed through the REST API and the client libraries method GetStreamsAsync . For more information on stream properties, see Streams . Searcheable Properties Property Searchable Id Yes TypeId Yes Name Yes Description Yes Indexes No InterpolationMode No ExtrapolationMode No PropertyOverrides No Searcheable Child Resources Property Searchable Metadata * Yes Tags * Yes ACL No Owner No *Notes on metadata and tags: You can access SdsStream metadata and tags through Metadata and Tags API respectively. Metadata and tags are associated with SdsStream objects and can be used as search criteria. See below for more information. Request Search for streams using the REST API and specifying the optional query parameter: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query={query}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query={query}\u0026skip={skip}\u0026count={count} Parameters string query [Optional] Parameter representing the search criteria. If unspecified, returns all values. Can be used with skip , count and orderby . int skip [Optional] Parameter representing the zero-based offset of the first SdsStream to retrieve. If unspecified, a default value of 0 is used. Use when more items match the search criteria than can be returned in a single call. int count [Optional] Parameter representing the maximum number of streams to retrieve. If unspecified, a default value of 100 is used. The maximum value is 1,000. .NET client libraries method GetStreamsAsync is used to search for and return streams. _metadataService.GetStreamsAsync(query:\"QueryString\", skip:0, count:100); The stream fields valid for search are identified in the fields table located on the Streams page. Note that stream metadata has unique syntax rules. See How search works with stream metadata . Search for types Type search is exposed through the REST API and the client libraries method GetTypesAsync . For more information on type properties, see Types . Searcheable Properties Property Searchable Id Yes Name Yes Description Yes SdsTypeCode No InterpolationMode No ExtrapolationMode No Properties Yes, with limitations* *Notes on Properties field: Name and Id of an SdsType are included in its Properties field. Similarly, Name and Id of a nested type are included in its Properties . If there are two types with the same Properties , Name or Id , the search will return both types in the result. Request Search for types using the REST API and specifying the optional query parameter: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Types?query={query}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Types?query={query}\u0026skip={skip}\u0026count={count} Parameters string query [Optional] Parameter representing the search criteria. If unspecified, returns all values. Can be used with skip , count and orderby . int skip [Optional] Parameter representing the zero-based offset of the first type to retrieve. If unspecified, a default value of 0 is used. Use when more items match the search criteria than can be returned in a single call. int count [Optional] Parameterr representing the maximum number of types to retrieve. If unspecified, a default value of 100 is used. The maximum value is 1,000. .NET client libraries method GetTypesAsync is used to search for and return types. _metadataService.GetTypesAsync(query:\"QueryString\", skip:0, count:100); Search for stream views Stream view search is exposed through the REST API and the client libraries method GetStreamViewsAsync . For more information on stream view properties, see Stream Views . Searcheable Properties Property Searchable Id Yes Name Yes Description Yes SourceTypeId Yes TargetTypeId Yes Properties Yes, with limitations* *Notes on Properties field: The Properties collection contains a list of SdsStreamViewProperty objects. The query will attempt to find a match on the SdsStreamViewProperty\u0027s Id , SourceTypeId , and TargetTypeId fields. The Properties collection of nested views will also be searched. See example below. Example You can search for ComplexView using the Id (\"NestedView\"), SourceTypeId , and TargetTypeId of NestedView but not its Description (\"An example of a nested view\"). { \"Id\":\"ComplexView\", \"Name\":\"ComplexView\", \"SourceTypeId\":\"ComplexSourceType\", \"TargetTypeId\":\"ComplexTargetType\", \"Description\":null, \"Properties\":[ { \"SourceId\":\"Value\", \"TargetId\":\"Value\", \"SdsStreamView\":{ \"Id\":\"NestedView\", \"SourceTypeId\":\"NestedType\", \"TargetTypeId\":\"NestedType\", \"Description\":\"An example of a nested view\", \"Properties\":[ { \"SourceId\":\"Value\", \"TargetId\":\"Value\" } ] } } ] } Request Search for stream views using the REST API and specifying the optional query parameter: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/StreamViews?query={query}\u0026skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} StreamViews?query={query}\u0026skip={skip}\u0026count={count} Parameters string query [Optional] Parameter representing the search criteria. If unspecified, returns all values. Can be used with skip , count and orderby . int skip [Optional] Parameter representing the zero-based offset of the first stream view to retrieve.If unspecified, a default value of 0 is used. Use when more items match the search criteria than can be returned in a single call. int count [Optional] Parameter representing the maximum number of stream views to retrieve. If unspecified, a default value of 100 is used. The maximum value is 1,000. .NET client libraries method GetStreamViewsAsync is used to search for and return stream views. _metadataService.GetStreamViewsAsync(query:\"QueryString\", skip:0, count:100); Tokenization Tokenization is the process of breaking a string sequence into pieces called tokens using specific characters to delimit tokens. User-specified queries are tokenized into search terms. How the query string is tokenized can affect search results. Delimit the terms with 1) a space, or 2) one or more punctuation characters ( * , ! , ? , . , for example) and a space. Query string followed without space by other punctuation characters does not trigger tokenization and is treated as part of the term. If your query has a wildcard ( * ) operator after a punctuation character, neither the punctuation nor the wildcard operator is tokenized. To specifically search for a term that has trailing punctuation, enclose the query in quotation marks to ensure that the punctuation is part of the query. See examples below: Term Tokenized Term Description Device.1 Device.1 The token includes .1 because there is no space between it and Device . Device!!1 Device!!1 The token includes !!1 because there is no space between it and Device . Device. Device . and the following space demarcates Device as the token term. Device!! Device !! and the following space demarcates Device as the token term. Device!* Device The token does not include !* because neither is tokenized if a wildcard operator follows a punctuation character. \"Device!\"* Device! Device! is the token because the string is enclosed in double quotes. Search operators You can use search operators in the query string to get more refined search results. Use operators AND , OR , and NOT in all caps. Operator Description AND AND operator. cat AND dog searches for both \"cat\" and \"dog\". OR OR operator. cat OR dog searches for either \"cat\" or \"dog\", or both. NOT NOT operator. cat NOT dog searches for \"cat\" or those without \"dog\". * Wildcard operator. Matches 0 or more characters. log* searches for those starting with \"log\" (\"log\", \"logs\" or \"logger\" for example.); ignores case. : Field-scoped query. Specifies a field to search. id:stream* searches for streams whose id field starts with \"stream\", but will not search other fields like name or description . See Field-scoping operator below. \" \" Quote operator. Scopes the search to an exact sequence of characters. While dog food (without quotes) searches for instances with \"dog\" or \"food\" anywhere in any order, \"dog food\" (with quotes) will only match instances that contain the whole string together and in that order. ( ) Precedence operator. motel AND (wifi OR luxury) searches for either \"wifi\" or \"luxury\", or \"wifi\" and \"luxury\" at the intersection of \"motel\". Examples Query string Matches field value Does not match field value mud AND log log mud mud log mud log mud OR log log mud mud log mutt look mud AND (NOT log) mud mud log mud AND (log OR pump*) mud log mud pumps mud bath name:stream* AND (description:pressure OR description:pump) The name starts with \"stream\" and the description has either \"pressure\" or \"pump\", or both. string Field-scoping ( : ) operator You can qualify the search to a specific field using the : operator. fieldname:fieldvalue Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=name:pump api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=name:pump name:pressure .NET client libraries method GetStreamsAsync(query:\"name:pump name:pressure\"); Wildcard ( * ) operator You can use the wildcard operator ( * ) to complement an incomplete string. It can only be used once per token, unless there\u0027s one at the beginning and another at the end ( *Tank* but not *Ta*nk , Ta*nk* or *Ta*nk* , for example). Query string Matches field value Does not match field value log* log logger analog *log analog alog logg *log* analog alogger lop l*g log logg lake swimming ( * does not span across two tokens) Supported Not Supported * *log l*g log* *log* \"my log\"* *l*g* *l*g l*g* \"my\"*\"log\" Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=log* api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=log* .NET client libraries method GetStreamsAsync(query:\"log*\"); Double quotes ( \"\" ) operator Tokenized search terms are delimited by whitespace and punctuation. To include these delimiters in a search, enclose them in double quotes. When using double quotes, the matching string must include the whole value of the field on the object being searched. Partial strings will not be matched unless wildcards are used. For example, if you\u0027re searching for a stream with description Pump three on unit five , a query \"unit five\" will not match the description, but *\"unit five\" will. Note that while wildcard ( * ) can be used either in or outside of quotes, it is treated as a string literal inside quotes. For example, you can search for \"dog food\"* to find a string that starts with \"dog food\", but if you search for \"dog food*\" , it will only match the value of \"dog food*\". Query string Matches field value Does not match field value \"pump pressure\" pump pressure pressure pressure pump pump pressure gauge \"pump pressure\"* pump pressure pump pressure gauge pressure pressure pump the pump pressure gauge *\"pump pressure\" pump pressure the pump pressure pressure pressure pump the pump pressure gauge *\"pump pressure\"* pump pressure pump pressure gauge the pump pressure gauge pressure pressure pump \"pump*pressure\" pump*pressure pump pressure the pump pressure gauge Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=\"pump api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=\"pump pressure\" .NET client libraries method GetStreamsAsync(query:\"\\\\\"pump pressure\\\\\"\"); How search works with stream metadata Stream metadata behaves differently with search syntax rules described in the previous sections. A namespace with streams with respective metadata key-value pairs streamId Metadata stream1 { manufacturer, company } { serial, abc } stream2 { serial, a1 } stream3 { status, active } { second key, second value } Field-scoping ( : ) Operator Stream metadata key is only searchable in association with its value. This pairing is defined using the field-scoping ( : ) operator. myStreamMetadataKey:myStreamMetadataValue Metadata key is not searched if the operator ( : ) is missing in the query string: the search is then limited to metadata values along with other searchable fields in the stream. Query string Returns Description manufacturer:company stream1 Searches and returns stream1. company stream1 Searches only the metadata values due to lack of : operator and returns stream1. a* stream1, stream2, stream3 Searches the metadata values and returns all three streams. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=manufacturer:company api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=manufacturer:company .NET client libraries method GetStreamsAsync(query:\"manufacturer:company\"); Wildcard ( * ) Operator Wildcard ( * ) character can be used both in metadata keys and values with one caveat: wildcard ( * ) used in the field (left of field-scoped operator ( : )) will only search within SdsStream metadata. Query string Returns Description manufa*turer:compan* stream1 Searches and returns stream1. ser*al:a* stream1, stream2 Searches and returns stream1 and stream2. s*:a* stream1, stream2, stream3 Searches and returns all three streams. Id:stream* stream1, stream2, stream3 Searches all fields and returns three streams. Id*:stream* nothing Wildcard in the field limits the search to metadata. Returns nothing because there is no metadata by that name that meets the criteria. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams?query=manufa*turer:compan* api v1 Tenants {tenantId} Namespaces {namespaceId} Streams?query=manufa*turer:compan* .NET client libraries method GetStreamsAsync(query:\"manufa*turer:compan*\");"
                                                                        },
    "Content_Portal/Documentation/SequentialDataStore/table_format.html":  {
                                                                               "href":  "Content_Portal/Documentation/SequentialDataStore/table_format.html",
                                                                               "title":  "Table format",
                                                                               "keywords":  "Table format A table is a convenient structure for analytics and display. The REST APIs for retrieving multiple events from the data store supports returning results in a table. The form variable can be set to specify a table or a table with headers. Table format can be applied to any read that returns multiple values and summaries. .NET public enum State { Ok, Warning, Alarm } public class Simple { [SdsMember(IsKey = true, Order = 0) ] public DateTime Time { get; set; } public State State { get; set; } public Double Measurement { get; set; } } Python class State(Enum): Ok = 0 Warning = 1 Alarm = 2 class Simple(object): Time = property(getTime, setTime) def getTime(self): return self.__time def setTime(self, time): self.__time = time State = property(getState, setState) def getState(self): return self.__state def setState(self, state): self.__state = state Measurement = property(getValue, setValue) def getValue(self): return self.__measurement def setValue(self, measurement): self.__measurement = measurement JavaScript var State = { Ok: 0, Warning: 1, Alarm: 2, } var Simple = function () { this.Time = null; this.State = null; this.Value = null; } With values as follows: 4/1/2017 4 1 2017 7:00:00 AM : Warning 0 4/1/2017 4 1 2017 7:01:00 AM : Warning 1 4/1/2017 4 1 2017 7:02:00 AM : Warning 2 4/1/2017 4 1 2017 7:03:00 AM : Warning 3 4/1/2017 4 1 2017 7:04:00 AM : Warning 4 4/1/2017 4 1 2017 7:05:00 AM : Warning 5 4/1/2017 4 1 2017 7:06:00 AM : Warning 6 4/1/2017 4 1 2017 7:07:00 AM : Warning 7 4/1/2017 4 1 2017 7:08:00 AM : Warning 8 4/1/2017 4 1 2017 7:09:00 AM : Warning 9 The following is a request to retrieve values using the window parameters: GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-04-01T07:00:00Z\u0026endIndex=2017-04-01T07:10:00Z The following response would be returned from the above code: Content-Type: application/json application json [ { \"Time\":\"2017-04-01T07:00:00Z\", \"State\":1 }, { \"Time\":\"2017-04-01T07:01:00Z\", \"State\":1, \"Measurement\":1.0 }, { \"Time\":\"2017-04-01T07:02:00Z\", \"State\":1, \"Measurement\":2.0 }, { \"Time\":\"2017-04-01T07:03:00Z\", \"State\":1, \"Measurement\":3.0 }, { \"Time\":\"2017-04-01T07:04:00Z\", \"State\":1, \"Measurement\":4.0 }, { \"Time\":\"2017-04-01T07:05:00Z\", \"State\":1, \"Measurement\":5.0 }, { \"Time\":\"2017-04-01T07:06:00Z\", \"State\":1, \"Measurement\":6.0 }, { \"Time\":\"2017-04-01T07:07:00Z\", \"State\":1, \"Measurement\":7.0 }, { \"Time\":\"2017-04-01T07:08:00Z\", \"State\":1, \"Measurement\":8.0 }, { \"Time\":\"2017-04-01T07:09:00Z\", \"State\":1, \"Measurement\":9.0 } ] To retrieve the results in table format, add the form variable and specify table. GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-04-01T07:00:00Z\u0026endIndex=2017-04-01T07:10:00Z \u0026form=table Response Content-Type: application/json application json { \"Name\":\"Simple\", \"Columns\":[ { \"Name\":\"Time\", \"Type\":\"DateTime\" }, { \"Name\":\"State\", \"Type\":\"Int32Enum\" }, { \"Name\":\"Measurement\", \"Type\":\"Double\" } ], \"Rows\":[ [ \"2017-04-01T07:00:00Z\", 1, 0.0 ], [ \"2017-04-01T07:01:00Z\", 1, 1.0 ], [ \"2017-04-01T07:02:00Z\", 1, 2.0 ], [ \"2017-04-01T07:03:00Z\", 1, 3.0 ], [ \"2017-04-01T07:04:00Z\", 1, 4.0 ], [ \"2017-04-01T07:05:00Z\", 1, 5.0 ], [ \"2017-04-01T07:06:00Z\", 1, 6.0 ], [ \"2017-04-01T07:07:00Z\", 1, 7.0 ], [ \"2017-04-01T07:08:00Z\", 1, 8.0 ], [ \"2017-04-01T07:09:00Z\", 1, 9.0 ] ] } To retrieve the results in table format with column headers, add the form variable and specify tableh . GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?startIndex=2017-04-01T07:00:00Z\u0026endIndex=2017-04-01T07:10:00Z \u0026form=tableh Response Content-Type: application/json application json { \"Name\":\"Simple\", \"Columns\":[ { \"Name\":\"Time\", \"Type\":\"DateTime\" }, { \"Name\":\"State\", \"Type\":\"Int32Enum\" }, { \"Name\":\"Measurement\", \"Type\":\"Double\" } ], \"Rows\":[ [ \"Time\", \"State\", \"Measurement\" ], [ \"2017-04-01T07:00:00Z\", 1, 0.0 ], [ \"2017-04-01T07:01:00Z\", 1, 1.0 ], [ \"2017-04-01T07:02:00Z\", 1, 2.0 ], [ \"2017-04-01T07:03:00Z\", 1, 3.0 ], [ \"2017-04-01T07:04:00Z\", 1, 4.0 ], [ \"2017-04-01T07:05:00Z\", 1, 5.0 ], [ \"2017-04-01T07:06:00Z\", 1, 6.0 ], [ \"2017-04-01T07:07:00Z\", 1, 7.0 ], [ \"2017-04-01T07:08:00Z\", 1, 8.0 ], [ \"2017-04-01T07:09:00Z\", 1, 9.0 ] ] }"
                                                                           },
    "Content_Portal/Documentation/SequentialDataStore/Units_of_Measure.html":  {
                                                                                   "href":  "Content_Portal/Documentation/SequentialDataStore/Units_of_Measure.html",
                                                                                   "title":  "Units of measure",
                                                                                   "keywords":  "Units of measure The Sequential Data Store (SDS) provides a collection of built-in units of measure (UOM). These units of measure can be associated with streams and types in order to provide unit information for stream data that model measurable quantities. If data has unit information associated with it, SDS is able to support unit conversions when retrieving data. See Reading data for more information. Since a unit of measure (meter, for example) defines the magnitude of a quantity (for example, length), SDS represents this by way of two objects: SdsUom and SdsUomQuantity. SdsUom SdsUom represents a single unit of measure, such as \u0027meter\u0027. The following table shows the required and optional SdsUom fields. Property Type Optionality Details Example Id String Required Unique identifier for the unit of measure meters per second Abbreviation String Optional Abbreviation for the unit of measure m/s m s Name String Optional Full name for the unit of measure Meters per second DisplayName String Optional Friendly display name for the unit of measure meters per second QuantityId String Required The identifier associated with the quantity that this unit is a measure of Velocity ConversionFactor Double Required Used for unit conversions. When a value of this unit is multiplied by the ConversionFactor and then incremented by the ConversionOffset, the value in terms of the base unit of the corresponding quantity is returned. 1.0 ConversionOffset Double Required Used for unit conversions. See details for ConversionFactor 0.0 SdsUomQuantity SdsUomQuantity represents a single measurable quantity (for example, length). The following table shows the required and optional SdsUomQuantity fields. Property Type Optionality Details Example Id String Required Unique identifier for the quantity Velocity Name String Optional Full name for the quantity Velocity BaseUom SdsUom Required The base unit of measure for this quantity. All other Uom\u0027s measuring this quantity will have ConversionFactor\u0027s and ConversionOffsets relative to the BaseUom SdsUom representing \"meters per second\" Dimensions short[] Optional Reserved for internal use. Represents the seven base SI dimensions: Length, Mass, Time, Electric Current, Thermodynamic Temperature, Amount of Substance, and Luminous Density. [1,0,-1,0,0,0,0] Supported system-defined unit quantities A list of the supported quantities and their base unit of measures is below. Supported quantities are read-only. Quantity Id Base Uom Id Angular Velocity radian per second Area square meter Computer Storage byte Density kilogram per cubic meter Dynamic Viscosity pascal second Electric Charge coulomb Electric Current ampere Electric Potential volt Electric Resistance ohm Energy joule Entropy and Heat Capacity joule per kelvin Force newton Frequency hertz Length meter Luminous Intensity candela Mass kilogram Mass Flow Rate kilogram per second Molar Flow Rate mole per second Molecular Weight kilogram per mole Amount of Substance mole Plane Angle radian Power watt Pressure pascal Quantity count Ratio percent Specific Energy joule per kilogram Specific Entropy and Specific Heat Capacity joule per kilogram kelvin Specific Volume cubic meter per kilogram Speed meter per second Temperature kelvin Temperature (Delta) delta kelvin Time second Volume cubic meter Volume Flow Rate cubic meter per second Supported system-defined units of measure A list of the supported units of measure is below. Supported units of measure are read-only. Uom Id Abbreviation Quantity Id Conversion Factor Conversion Offset count count Quantity 1 0 Ampere hour Ah Electric Charge 3600 0 coulomb C Electric Charge 1 0 kilogram per second kg/s kg s Mass Flow Rate 1 0 long ton per day lton/d lton d Mass Flow Rate 0.011759802 0 million pound per day MMlb/d MMlb d Mass Flow Rate 5.24991169 0 short ton per day ston/d ston d Mass Flow Rate 0.010499823 0 thousand pound per day klb/d klb d Mass Flow Rate 0.005249912 0 gram per second g/s g s Mass Flow Rate 0.001 0 pound per second lb/s lb s Mass Flow Rate 0.45359237 0 tonne per day t/d t d Mass Flow Rate 0.011574074 0 long ton lton Mass 1016.046909 0 million pound MM lb Mass 453592.37 0 ounce oz Mass 0.028349523 0 short ton ston Mass 907.18474 0 thousand pound klb Mass 453.59237 0 ton ton Mass 907.18474 0 gram g Mass 0.001 0 milligram mg Mass 1.00E-06 0 pound lb Mass 0.45359237 0 tonne t Mass 1000 0 kilogram kg Mass 1 0 second s Time 1 0 hour h Time 3600 0 day d Time 86400 0 month month Time 2628000 0 week week Time 604800 0 year yr Time 31536000 0 minute min Time 60 0 dyne dyne Force 1.00E-05 0 kilogram-force kgf Force 9.80665 0 pound-force lbf Force 4.448221615 0 newton N Force 1 0 watt W Power 1 0 million British thermal unit per day MM Btu/d Btu d Power 12211.29459 0 million British thermal unit per hour MM Btu/h Btu h Power 293071.0702 0 gigawatt GW Power 1000000000 0 megawatt MW Power 1000000 0 British thermal unit per hour Btu/h Btu h Power 0.29307107 0 calorie per second cal/s cal s Power 4.1868 0 horsepower hp Power 745.6998716 0 joule per second J/s J s Power 1 0 kilowatt kW Power 1000 0 megajoule per hour MJ/h MJ h Power 277.7777778 0 million calorie per hour MMcal/h MMcal h Power 1163 0 mole per second mol/s mol s Molar Flow Rate 1 0 gram mole per second gmol/s gmol s Molar Flow Rate 1 0 kilogram mole per second kmol/s kmol s Molar Flow Rate 1000 0 pound mole per second lbmol/s lbmol s Molar Flow Rate 453.59237 0 meter m Length 1 0 centimeter cm Length 0.01 0 inch in Length 0.0254 0 International nautical mile nmi Length 1852 0 kilometer km Length 1000 0 millimeter mm Length 0.001 0 foot ft Length 0.3048 0 mile mi Length 1609.344 0 sixteenth of an inch sxi Length 0.0015875 0 yard yd Length 0.9144 0 candela cd Luminous Intensity 1 0 meter per second m/s m s Speed 1 0 centimeter per second cm/s cm s Speed 0.01 0 foot per second ft/s ft s Speed 0.3048 0 International nautical mile per hour nmi/h nmi h Speed 0.514444444 0 kilometer per hour km/h km h Speed 0.277777778 0 mile per hour mi/h mi h Speed 0.44704 0 revolution per minute rpm Angular Velocity 0.104719755 0 radian per second rad/s rad s Angular Velocity 1 0 barrel per day bbl/d bbl d Volume Flow Rate 1.84E-06 0 cubic centimeter per second cm3/s cm3 s Volume Flow Rate 1.00E-06 0 cubic foot per second ft3/s ft3 s Volume Flow Rate 0.028316847 0 cubic meter per hour m3/h m3 h Volume Flow Rate 0.000277778 0 Imperial gallon per minute Imp gal/min gal min Volume Flow Rate 7.58E-05 0 liter per second L/s L s Volume Flow Rate 0.001 0 US gallon per minute US gal/min gal min Volume Flow Rate 6.31E-05 0 cubic meter per second m3/s m3 s Volume Flow Rate 1 0 pascal Pa Pressure 1 0 atmosphere atm Pressure 101325 0 bar bar Pressure 100000 0 inches of mercury inHg Pressure 3386.388158 0 kilogram-force per square centimeter kgf/cm2 kgf cm2 Pressure 98066.5 0 kilogram-force per square meter kgf/m2 kgf m2 Pressure 9.80665 0 kilopascal kPa Pressure 1000 0 millimeter of mercury mmHg Pressure 133.3223684 0 newton per square meter N/m2 N m2 Pressure 1 0 pound-force per square inch psi Pressure 6894.757293 0 pound-force per square inch (customary) psia Pressure 6894.757293 0 torr torr Pressure 133.3223684 0 square meter m2 Area 1 0 square foot ft2 Area 0.09290304 0 acre acre Area 4046.856422 0 square mile mi2 Area 2589988.11 0 square yard yd2 Area 0.83612736 0 hectare ha Area 10000 0 square centimeter cm2 Area 0.0001 0 square inch in2 Area 0.00064516 0 square kilometer km2 Area 1000000 0 square millimeter mm2 Area 1.00E-06 0 yobibyte YiB Computer Storage 1.21E+24 0 zebibyte ZiB Computer Storage 1.18E+21 0 exbibyte EiB Computer Storage 1.15E+18 0 pebibyte PiB Computer Storage 1.13E+15 0 tebibyte TiB Computer Storage 1.10E+12 0 gibibyte GiB Computer Storage 1073741824 0 mebibyte MiB Computer Storage 1048576 0 kibibyte KiB Computer Storage 1024 0 yottabyte YB Computer Storage 1.00E+24 0 zettabyte ZB Computer Storage 1.00E+21 0 exabyte EB Computer Storage 1.00E+18 0 petabyte PB Computer Storage 1.00E+15 0 terabyte TB Computer Storage 1.00E+12 0 gigabyte GB Computer Storage 1000000000 0 megabyte MB Computer Storage 1000000 0 kilobyte kB Computer Storage 1000 0 byte B Computer Storage 1 0 kelvin K Temperature 1 0 degree Celsius ??C Temperature 1 273.15 degree Rankine ??R Temperature 0.555555556 -2.56E-13 degree Fahrenheit ??F Temperature 0.555555556 255.3722222 milliampere mA Electric Current 0.001 0 ampere A Electric Current 1 0 joule per gram J/g J g Specific Energy 1000 0 joule per kilogram J/kg J kg Specific Energy 1 0 British thermal unit per pound Btu/lb Btu lb Specific Energy 2326 0 kilocalorie per kilogram kcal/kg kcal kg Specific Energy 4186.8 0 kilojoule per kilogram kJ/kg kJ kg Specific Energy 1000 0 kilojoule per pound kJ/lb kJ lb Specific Energy 2204.622622 0 British thermal unit per degree Rankine Btu/??R Btu ??R Entropy and Heat Capacity 1899.100535 0 British thermal unit per degree Fahrenheit Btu/??F Btu ??F Entropy and Heat Capacity 1899.100535 0 kilojoule per kelvin kJ/K kJ K Entropy and Heat Capacity 1000 0 joule per kelvin J/K J K Entropy and Heat Capacity 1 0 cubic foot per pound ft3/lb ft3 lb Specific Volume 0.062427961 0 cubic centimeter per gram cm3/g cm3 g Specific Volume 0.001 0 cubic meter per kilogram m3/kg m3 kg Specific Volume 1 0 hertz Hz Frequency 1 0 mole mol Amount of Substance 1 0 gram mole gmol Amount of Substance 1 0 kilogram mole kmol Amount of Substance 1000 0 pound mole lbmol Amount of Substance 453.59237 0 percent % Ratio 1 0 parts per billion ppb Ratio 1.00E-07 0 parts per million ppm Ratio 0.0001 0 ohm ?? Electric Resistance 1 0 gram per gram mole g/gmol g gmol Molecular Weight 0.001 0 pound per pound mole lb/lbmol lb lbmol Molecular Weight 0.001 0 kilogram per mole kg/mol kg mol Molecular Weight 1 0 kilogram per kilogram mole kg/kmol kg kmol Molecular Weight 0.001 0 British thermal unit per pound degree Rankine Btu/(lb Btu (lb ??R) Specific Entropy and Specific Heat Capacity 4186.8 0 British thermal unit per pound degree Fahrenheit Btu/(lb Btu (lb ??F) Specific Entropy and Specific Heat Capacity 4186.8 0 joule per gram kelvin J/(g J (g K) Specific Entropy and Specific Heat Capacity 1000 0 kilojoule per kilogram kelvin kJ/(kg kJ (kg K) Specific Entropy and Specific Heat Capacity 1000 0 joule per kilogram kelvin J/(kg J (kg K) Specific Entropy and Specific Heat Capacity 1 0 kilovolt kV Electric Potential 1000 0 millivolt mV Electric Potential 0.001 0 megavolt MV Electric Potential 1000000 0 volt V Electric Potential 1 0 joule J Energy 1 0 gigawatt hour GWh Energy 3.60E+12 0 megawatt hour MWh Energy 3600000000 0 watt hour Wh Energy 3600 0 British thermal unit Btu Energy 1055.055853 0 calorie cal Energy 4.1868 0 gigajoule GJ Energy 1000000000 0 kilojoule kJ Energy 1000 0 kilowatt hour kWh Energy 3600000 0 megajoule MJ Energy 1000000 0 watt second Ws Energy 1 0 kilocalorie kcal Energy 4186.8 0 million calorie MMcal Energy 4186800 0 million British thermal unit MM Btu Energy 1055055853 0 acre foot acre ft Volume 1233.481838 0 million imperial gallon Imp Mgal Volume 4546.09 0 thousand imperial gallon Imp kgal Volume 4.54609 0 barrel bbl Volume 0.158987295 0 Imperial gallon Imp gal Volume 0.00454609 0 million US gallon US Mgal Volume 3785.411784 0 thousand US gallon US kgal Volume 3.785411784 0 cubic centimeter cm3 Volume 1.00E-06 0 cubic foot ft3 Volume 0.028316847 0 kiloliter kL Volume 1 0 liter L Volume 0.001 0 megaliter M L Volume 1000 0 milliliter mL Volume 1.00E-06 0 thousand cubic meter k m3 Volume 1000 0 US gallon US gal Volume 0.003785412 0 million barrel MMbbl Volume 158987.2949 0 thousand barrel kbbl Volume 158.9872949 0 cubic meter m3 Volume 1 0 kilogram per cubic meter kg/m3 kg m3 Density 1 0 gram per liter g/L g L Density 1 0 kilogram per liter kg/L kg L Density 1000 0 pound per barrel lb/bbl lb bbl Density 2.853010174 0 pound per cubic foot lb/ft3 lb ft3 Density 16.01846337 0 pound per US gallon lb/US lb US gal Density 119.8264273 0 tonne per cubic meter t/m3 t m3 Density 1000 0 radian rad Plane Angle 1 0 degree ?? Plane Angle 0.017453293 0 revolution r Plane Angle 6.283185307 0 pascal second Pa*s Dynamic Viscosity 1 0 poise P Dynamic Viscosity 0.1 0 delta degree Fahrenheit delta ??F Temperature (Delta) 0.555555556 0 delta degree Rankine delta ??R Temperature (Delta) 0.555555556 0 delta kelvin delta K Temperature (Delta) 1 0 delta degree Celsius delta ??C Temperature (Delta) 1 0 SdsUomQuantity API The REST APIs provide programmatic access to read and write SDS data. The APIs in this section interact with SdsUomQuantitys. When working in .NET, convenient SDS client libraries methods are available. The ISdsMetadataService interface, accessed using the SdsService.GetMetadataService( ) helper, defines the available functions. See Units of Measure for general SdsUomQuantity information. Get Quantities Returns a list of all quantities available within a given namespace. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities?skip={skip}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier int skip An optional parameter representing the zero-based offset of the first SdsUomQuantity to retrieve. If not specified, a default value of 0 is used. int count An optional parameter representing the maximum number of SdsUomQuantity to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and a response body. Response body A list of SdsUomQuantity objects Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Id\": \"Angular Velocity\", \"Name\": \"Angular Velocity\", \"BaseUom\": { \"Id\": \"radian per second\", \"Abbreviation\": \"rad/s\", \"rad s\", \"Name\": \"radian per second\", \"DisplayName\": \"radian per second\", \"QuantityId\": \"Angular Velocity\", \"ConversionFactor\": 1 }, \"Dimensions\": [ 0, 0, -1, 0, 0, 0, 0 ] }, { \"Id\": \"Area\", \"Name\": \"Area\", \"BaseUom\": { \"Id\": \"square meter\", \"Abbreviation\": \"m2\", \"Name\": \"square meter\", \"DisplayName\": \"square meter\", \"QuantityId\": \"Area\", \"ConversionFactor\": 1 }, \"Dimensions\": [ 2, 0, 0, 0, 0, 0, 0 ] }, ... ] .NET client libraries method Task\u003cIEnumerable\u003cSdsUomQuantity\u003e\u003e GetQuantitiesAsync(int skip = 0, int count = 100); Get Quantity Returns the quantity corresponding to the specified quantityId within a given namespace. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId} api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Response The response includes a status code and a response body. Response body The requested SdsUomQuantity. Example response body when quantityId = \"Length\" is passed HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Id\": \"Length\", \"Name\": \"Length\", \"BaseUom\": { \"Id\": \"meter\", \"Abbreviation\": \"m\", \"Name\": \"meter\", \"DisplayName\": \"meter\", \"QuantityId\": \"Length\", \"ConversionFactor\": 1 }, \"Dimensions\": [ 1, 0, 0, 0, 0, 0, 0 ] } .NET client libraries method Task\u003cSdsUomQuantity\u003e GetQuantityAsync(string quantityId); Get Quantity UOMs Returns the list of units of measure that belongs to the quantity with the specified quantityId. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Response The response includes a status code and a response body. Response body A collection of SdsUom objects for the specified quantity Example response body when quantityId = \"Electric Current\" is passed HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Id\": \"milliampere\", \"Abbreviation\": \"mA\", \"Name\": \"milliampere\", \"DisplayName\": \"milliampere\", \"QuantityId\": \"Electric Current\", \"ConversionFactor\": 0.001 }, { \"Id\": \"ampere\", \"Abbreviation\": \"A\", \"Name\": \"ampere\", \"DisplayName\": \"ampere\", \"QuantityId\": \"Electric Current\", \"ConversionFactor\": 1 } ] .NET client libraries method Task\u003cIEnumerable\u003cSdsUom\u003e\u003e GetQuantityUomsAsync(string quantityId); Get Quantity UOM Returns the unit of measure associated with the specified uomId belonging to the quantity with the specified quantityId. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{uomId} api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {uomId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Response The response includes a status code and a response body. Response body The requested SdsUom Example response body when quantityId = \"Length\" and uomId =\"mile\" are passed HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Id\": \"mile\", \"Abbreviation\": \"mi\", \"Name\": \"mile\", \"DisplayName\": \"mile\", \"QuantityId\": \"Length\", \"ConversionFactor\": 1609.344 } .NET client libraries method Task\u003cSdsUom\u003e GetQuantityUomAsync(string quantityId, string uomId); Get Quantities Access Control List Gets the default ACL for the Quantities collection. For more information on ACLs, see Role-based access control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Quantities api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Quantities Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The default ACL for Quantities Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetQuantitiesAccessControlListAsync(); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetQuantitiesAccessControlListWithETagAsync(); Update Quantities Access Control List Updates the default ACL for the Quantities collection. For more information on ACLs, see Role-based access control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Quantities api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Quantities Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateQuantitiesAccessControlListAsync(AccessControlList quantitiesAcl); Patch Quantities Access Control List Updates the default ACL for the Quantities collection using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Role-based access control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/AccessControl/Quantities api v1 Tenants {tenantId} Namespaces {namespaceId} AccessControl Quantities Parameters string tenantId The tenant identifier string namespaceId The namespace identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchQuantitiesAccessControlListAsync(JsonPatchDocument\u003cAccessControlList\u003e quantitiesAclPatch); Task PatchQuantitiesAccessControlListWithETagAsync(string etag, JsonPatchDocument\u003cAccessControlList\u003e quantitiesAclPatch); Get Quantity Access Control List Gets the ACL of the specified quantity. For more information on ACLs, see Role-based access control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The ACL for the specified quantity. Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetQuantityAccessControlListAsync(string quantityId); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetQuantityAccessControlListWithETagAsync(string quantityId); Update Quantity Access Control List Updates the ACL of the specified quantity. For more information on ACLs, see Role-based access control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateQuantityAccessControlListAsync(string quantityId, AccessControlList quantityAcl); Patch Quantity Access Control List Updates the ACL of the specified quantity using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Role-based access control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchQuantityAccessControlListAsync(string quantityId, JsonPatchDocument\u003cAccessControlList\u003e quantityAclPatch); Task PatchQuantityAccessControlListWithETagAsync(string quantityId, string etag, JsonPatchDocument\u003cAccessControlList\u003e quantityAclPatch); Get Quantity Owner Gets the Owner of the specified quantity. For more information on Owners, see Role-based access control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Response The response includes a status code and a response body. Response body The Owner for the specified quantity .NET client libraries method Task\u003cTrustee\u003e GetQuantityOwnerAsync(string quantityId); Update Quantity Owner Updates the Owner of the specified quantity. For more information on Owners, see Role-based access control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Request body Serialized Owner Response The response includes a status code. .NET client libraries method Task UpdateQuantityOwnerAsync(string quantityId, Trustee quantityOwner); Get Quantity Access Rights Gets the Access Rights associated with the specified quantity for the requesting identity. For more information on Access Rights, see Role-based access control . Request GET api/v1//Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/AccessRights api v1  Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier Response The response includes a status code and a response body. Response body The Access Rights of the specified quantity for the requesting identity. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [\"Read\", \"Write\"] .NET client libraries method Task\u003cstring[]\u003e GetQuantityAccessRightsAsync(string quantityId); SdsUom API The REST APIs provide programmatic access to read and write SDS data. The APIs in this section interact with SdsUoms. When working in .NET, convenient SDS Client Libraries are available. The ISdsMetadataService interface, accessed using the SdsService.GetMetadataService( ) helper, defines the available functions. See Units of Measure for general SdsUom information. Get UOMs Returns a list of all available units of measure in the system. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Units?skip={skip}\u0026count={count} api v1 Tenants {tenantId} Namespaces {namespaceId} Units?skip={skip}\u0026count={count} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier int skip An optional parameter representing the zero-based offset of the first SdsUomQuantity to retrieve. If not specified, a default value of 0 is used. int count An optional parameter representing the maximum number of SdsUomQuantity to retrieve. If not specified, a default value of 100 is used. Response The response includes a status code and a response body. Response body A list of SdsUom objects Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [ { \"Id\": \"count\", \"Abbreviation\": \"count\", \"Name\": \"count\", \"DisplayName\": \"count\", \"QuantityId\": \"Quantity\", \"ConversionFactor\": 1 }, { \"Id\": \"Ampere hour\", \"Abbreviation\": \"Ah\", \"Name\": \"Ampere hour\", \"DisplayName\": \"Ampere hour\", \"QuantityId\": \"Electric Charge\", \"ConversionFactor\": 3600 }, { \"Id\": \"coulomb\", \"Abbreviation\": \"C\", \"Name\": \"coulomb\", \"DisplayName\": \"coulomb\", \"QuantityId\": \"Electric Charge\", \"ConversionFactor\": 1 } ... ] .NET client libraries method Task\u003cIEnumerable\u003cSdsUom\u003e\u003e GetUomsAsync(int skip = 0, int count = 100); Get Uom Returns the unit of measure corresponding to the specified uomId within a given namespace. Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Units/{uomId} api v1 Tenants {tenantId} Namespaces {namespaceId} Units {uomId} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string uomId The unit of measure identifier Response The response includes a status code and a response body. Response body The requested SdsUom Example response body when uomId = \"ounce\" is passed HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json { \"Id\": \"ounce\", \"Abbreviation\": \"oz\", \"Name\": \"ounce\", \"DisplayName\": \"ounce\", \"QuantityId\": \"Mass\", \"ConversionFactor\": 0.028349523 } .NET client libraries method Task\u003cSdsUom\u003e GetUomAsync(string uomId); Get UOM Access Control List Gets the ACL of the specified unit of measure. For more information on ACLs, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{uomId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {uomId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Response The response includes a status code and a response body. Status Code Response Type Description 200 OK AccessControlList See Access Control 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 500 Internal Server Error error An error occurred while processing the request. Response body The ACL for the specified UOM. Response headers Successful (200 OK) responses include an additional response header. Header Description ETag An entity tag, which can be used to prevent modification of the ACL, during a later call to modify the ACL, if the object has already been modified. .NET client libraries method Task\u003cAccessControlList\u003e GetQuantityUomAccessControlListAsync(string quantityId, string uomId); Task\u003cSdsETagResult\u003cAccessControlList\u003e\u003e GetQuantityUomAccessControlListWithETagAsync(string quantityId, string uomId); Update UOM Access Control List Updates the ACL of the specified unit of measure. For more information on ACLs, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{UOMId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {UOMId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Request body Serialized ACL Response The response includes a status code. .NET client libraries method Task UpdateQuantityUomAccessControlListAsync(string quantityId, string UOMId, AccessControlList uomAcl); Patch UOM Access Control List Updates the ACL of the specified unit of measure using an RFC 6902 compliant JSON Patch document. This allows the ACL to be modified without submitting the entire Access Control List. For more information on ACLs, see Access Control . Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{uomId}/AccessControl api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {uomId} AccessControl Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Request body An RFC 6902 JSON Patch document that will be applied to the ACL. The example below inserts a new Access Control Entry into the Access Control List giving Read and Write access to the role with the Id 11111111-1111-1111-1111-111111111111 . The remainder of the existing ACL remains unmodified. [ { \"op\": \"add\", \"path\": \"/RoleTrusteeAccessControlEntries\", \" RoleTrusteeAccessControlEntries\", \"value\": { \"Trustee\": { \"Type\": 3, \"ObjectId\": \"11111111-1111-1111-1111-111111111111\" }, \"AccessType\": 0, \"AccessRights\": 3 } } ] Request headers The If-Match header can be used to prevent modification of an ACL since it was last read using the ETag header from the response. Header Description If-Match The entity tag header from a previous read of the ACL. If provided, the ACL will not be patched unless the current ETag of the ACL, on the server, matches the value passed into the If-Match header. Response The response includes a status code. Status Code Response Type Description 204 No Content The ACL was successfully patched. 403 Forbidden error You are not authorized for this operation 404 Not Found error The resource does not exist 412 Precondition Failed error The If-Match header did not match ETag on the ACL, or a test operation in the JSON Patch document failed to evaluate to true . 500 Internal Server Error error An error occurred while processing the request. .NET client libraries method Task PatchQuantityUomAccessControlListAsync(string quantityId, string uomId, JsonPatchDocument\u003cAccessControlList\u003e uomAclPatch); Task PatchQuantityUomAccessControlListWithETagAsync(string quantityId, string uomId, string etag, JsonPatchDocument\u003cAccessControlList\u003e uomAclPatch); Get UOM Owner Gets the Owner of the specified unit of measure. For more information on Owners, see Access Control . Request GET api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{uomId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {uomId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Response The response includes a status code and a response body. Response Body The Owner for the specified Uom .NET client libraries method Task\u003cTrustee\u003e GetQuantityUomOwnerAsync(string quantityId, string uomId); Update UOM Owner Updates the Owner of the specified unit of measure. For more information on Owners, see Access Control . Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{uomId}/Owner api v1 Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {uomId} Owner Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Request body Serialized Owner Response The response includes a status code. .NET client libraries method Task UpdateQuantityUomOwnerAsync(string quantityId, string uomId, Trustee uomOwner); Get UOM Access Rights Gets the Access Rights associated with the specified unit of measure for the requesting identity. For more information on Access Rights, see Access Control . Request GET api/v1//Tenants/{tenantId}/Namespaces/{namespaceId}/Quantities/{quantityId}/Units/{uomId}/AccessRights api v1  Tenants {tenantId} Namespaces {namespaceId} Quantities {quantityId} Units {uomId} AccessRights Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string quantityId The quantity identifier string uomId The unit of measure identifier Response The response includes a status code and a response body. Response Body The Access Rights of the specified unit of measure for the requesting identity. Example response body HTTP/1.1 HTTP 1.1 200 Content-Type: application/json application json [\"Read\", \"Write\"] .NET client libraries method Task\u003cstring[]\u003e GetQuantityUomAccessRightsAsync(string quantityId, string uomId); Associating a unit of measure with a type At type creation, SdsUom can be associated with an SdsTypeProperty . Associating a unit of measure with a stream At stream creation, you can override any unit of measure associated with an SdsTypeProperty belonging to the type of the stream. This enables the reuse of a type that may have default unit information associated with it already."
                                                                               },
    "Content_Portal/Documentation/SequentialDataStore/Writing_Data.html":  {
                                                                               "href":  "Content_Portal/Documentation/SequentialDataStore/Writing_Data.html",
                                                                               "title":  "Write data",
                                                                               "keywords":  "Write data The SDS REST APIs provide programmatic access to read and write SDS data. This section describes things to note when writing to an SdsStream. When working in .NET, convenient SDS Client libraries are available. The ISdsDataService interface, accessed using the SdsService.GetDataService() helper, defines the available functions. All writes rely on a stream???s key or primary index. The primary index determines the order of events in the stream. Secondary indexes are updated, but they do not contribute to the request. All references to indexes are to the primary index. *Notes: Use the ISO 8601 representation of dates and times in SDS, 2020-02-20T08:30:00-08:00 for February 20, 2020 at 8:30 AM PST, for example. SDS returns timestamps in UTC if the timestamp is of property DateTime and in local time if it is of DateTimeOffset . Single stream writes The following methods support writing a single or multiple values: Insert Values inserts a collection of events. Patch Values updates specific fields for a collection of events. Replace Values replaces a collection of events. Remove Values deletes the events based on the request parameters. Update Values add or replaces a collection of events. The base URI for writing SDS data to a single stream is: api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body format With the exception of Remove Values, all single stream write calls require a request body containing the events to insert or modify. The events must be formatted as a serialized JSON array of the stream\u0027s type. JSON arrays are comma-delimited lists of a type enclosed within square brackets. The following code shows a list of three WaveData events that are properly formatted for insertion. See the OCS-Samples for the complete example. [ { \"Order\":2, \"Tau\":0.25722883666666846, \"Radians\":1.6162164471269089, \"Sin\":1.9979373673043652, \"Cos\":-0.090809010174665111, \"Tan\":-44.003064529862513, \"Sinh\":4.8353589272389, \"Cosh\":5.2326566823391856, \"Tanh\":1.8481468289554672 }, { \"Order\":4, \"Tau\":0.25724560000002383, \"Radians\":1.6163217742567466, \"Sin\":1.9979277915696148, \"Cos\":-0.091019446679060964, \"Tan\":-43.901119254534827, \"Sinh\":4.8359100947709592, \"Cosh\":5.233166005842703, \"Tanh\":1.8481776000882766 }, { \"Order\":6, \"Tau\":0.25724560000002383, \"Radians\":1.6163217742567466, \"Sin\":1.9979277915696148, \"Cos\":-0.091019446679060964, \"Tan\":-43.901119254534827, \"Sinh\":4.8359100947709592, \"Cosh\":5.233166005842703, \"Tanh\":1.8481776000882766 } ] You can serialize your data using one of many available JSON serializers available at Introducing JSON . Response format Supported response formats include JSON, verbose JSON, and SDS. The default response format for SDS is JSON, which is used in all examples in this document. Default JSON responses do not include any values that are equal to the default value for their type. Verbose JSON responses include all values in the returned JSON payload, including defaults. To specify verbose JSON return, add the header Accept-Verbosity with a value of verbose to the request. Verbose has no impact on writes; writes return only error messages. To specify SDS format, set the Accept header in the request to application/sds application sds . Indexes Writing to the SDS relies on the primary index for positioning within the streams and locating existing events. Most writes use the index as specified by the value. Deletes are the exception to this rule. When deleting, indexes are specified as strings in the URI, or, when using the SDS Client Libraries, the index may be passed as-is to DELETE methods that take the index type as a generic argument. For more information on working with indexes, see Indexes . For information on compound indexes, see Compound indexes ."
                                                                           },
    "Content_Portal/Documentation/SequentialDataStore/Writing_Data_API.html":  {
                                                                                   "href":  "Content_Portal/Documentation/SequentialDataStore/Writing_Data_API.html",
                                                                                   "title":  "API calls for writing data",
                                                                                   "keywords":  "API calls for writing data Example type, stream, and data Many of the API methods described below contain example requests and responses in JSON to highlight usage and specific behaviors. The following type, stream, and data are used in the examples. Example type SimpleType is an SdsType with a single index and two additional properties. This type is defined below in .NET, Python, and Javascript: .NET Python JavaScript public enum State { Ok, Warning, Alarm } public class SimpleType { [SdsMember(IsKey = true, Order = 0) ] public DateTime Time { get; set; } public State State { get; set; } [SdsMember(Uom = \"meter\")] public Double Measurement { get; set; } } class State(Enum): Ok = 0 Warning = 1 Alarm = 2 class SimpleType(object): Time = property(getTime, setTime) def getTime(self): return self.__time def setTime(self, time): self.__time = time State = property(getState, setState) def getState(self): return self.__state def setState(self, state): self.__state = state Measurement = property(getValue, setValue) def getValue(self): return self.__measurement def setValue(self, measurement): self.__measurement = measurement var State = { Ok: 0, Warning: 1, Alarm: 2, } var SimpleType = function () { this.Time = null; this.State = null; this.Value = null; } Example stream Simple is an SdsStream of type SimpleType . Example data Simple has stored values as follows: 11/23/2017 11 23 2017 12:00:00 PM: Ok 0 11/23/2017 11 23 2017 1:00:00 PM: Ok 10 11/23/2017 11 23 2017 2:00:00 PM: Ok 20 11/23/2017 11 23 2017 3:00:00 PM: Ok 30 11/23/2017 11 23 2017 4:00:00 PM: Ok 40 All times are represented at offset 0, GMT. Insert Values Inserts data into the specified stream. Returns an error if data is already present at the index of any event. Request POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body A serialized list of one or more events of the stream type Response The response includes a status code Notes This request will return an error if an event already exists for any index in the request. If any individual index encounters a problem, the entire operation is rolled back and no insertions are made. The streamId and index that caused the issue are included in the error response. Example request The following request is used to insert events into stream Simple of SimpleType : POST api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Example request body The request body specifies the values to insert. [ { \"Time\": \"2017-11-23T17:00:00Z\", \"State\": 0, \"Measurement\": 50 }, { \"Time\": \"2017-11-23T18:00:00Z\", \"State\": 0, \"Measurement\": 60 } ] .NET client libraries methods Task InsertValueAsync\u003cT\u003e(string streamId, T item); Task InsertValuesAsync\u003cT\u003e(string streamId, IList\u003cT\u003e items); Patch Values Modifies the specified stream event(s). Patching affects only the data item parameters that are included in the call. Request PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?select={selectExpression} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string selectExpression Comma separated list of strings that indicates the event fields that will be changed in stream events Request body A serialized collection of one or more patch property events Response The response includes a status code Example request Let\u0027s say that you have a stream Simple of SimpleType . To change one property( Measurement ) for one event, you can use the request with the body below: PATCH api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams Simple Data ?select=measurement Example request body [ { \"Time\":\"2017-11-23T12:00:00Z\", \"Measurement\":500.0 } ] This request will only change the Measurement value at the specified event index. Notes Patching is used to patch the events of the selected fields for one or more events in the stream. Only the fields indicated in selectExpression are modified. The events to be modified are indicated by the index value of each entry in the collection. If there is a problem patching any individual event, the entire operation is rolled back and the error will indicate the streamId and index of the problem. .NET client libraries methods Task PatchValueAsync(string streamId, string selectExpression, T item); Task PatchValuesAsync(string streamId, string selectExpression, IList\u003cT\u003e items); Remove Values There are two options for specifying which events to remove from a stream: Index Collection : One or more indexes can be specified in the request. Window : A window can be specified with a start index and end index. Index Collection Removes the event at each index from the specified stream. Different overloads are available to make it easier to indicate the index where you want to remove a data event. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?index={index}[\u0026index={index}???] Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string index One or more indexes of events to remove Response The response includes a status code Notes If any individual event fails to be removed, the entire operation is rolled back and no events are removed. The streamId and index that caused the issue are included in the error response. If you attempt to remove events at indexes that have no events, an error is returned. If this occurs, you can use Window request format to remove any events from a specified ???window??? of indexes, which will not return an error if no data is found. .NET client libraries methods Task RemoveValueAsync(string streamId, string index); Task RemoveValueAsync\u003cT1\u003e(string streamId, T1 index); Task RemoveValueAsync\u003cT1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e index); Task RemoveValuesAsync(string streamId, IEnumerable\u003cstring\u003e index); Task RemoveValuesAsync\u003cT1\u003e(string streamId, IEnumerable\u003cT1\u003e index); Task RemoveValuesAsync\u003cT1, T2\u003e(string streamId, IEnumerable\u003cTuple\u003cT1, T2\u003e\u003e Window Removes events at and between the start index and end index. Request DELETE api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?startIndex={startIndex}\u0026endIndex={endIndex} Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier string startIndex The index defining the beginning of the window string endIndex The index defining the end of the window Response The response includes a status code Notes If any individual event fails to be removed, the entire operation is rolled back and no removes are done. .NET client libraries methods Task RemoveWindowValuesAsync(string streamId, string startIndex, string endIndex); Task RemoveWindowValuesAsync\u003cT1\u003e(string streamId, T1 startIndex, T1 endIndex); Task RemoveWindowValuesAsync\u003cT1, T2\u003e(string streamId, Tuple\u003cT1, T2\u003e startIndex, Tuple\u003cT1, T2\u003e endIndex); Replace Values Writes one or more events over existing events in the specified stream. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data ?allowCreate=false Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request Body A serialized list of one or more events of the stream type Response The response includes a status code Notes This request returns an error if the stream does not have an event to be replaced at the specified index. If any individual event fails to be replaced, the entire operation is rolled back and no replaces are performed. The index that caused the issue and the streamId are included in the error response. .NET client libraries methods Task ReplaceValueAsync\u003cT\u003e(string streamId, T item); Task ReplaceValuesAsync\u003cT\u003e(string streamId, IList\u003cT\u003e items); Update Values Writes one or more events to the specified stream. Request PUT api/v1/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data api v1 Tenants {tenantId} Namespaces {namespaceId} Streams {streamId} Data Parameters string tenantId The tenant identifier string namespaceId The namespace identifier string streamId The stream identifier Request body A serialized list of one or more events of the stream type Response The response includes a status code Notes This request performs an insert or a replace depending on whether an event already exists at the event indexes. If any item fails to write, the entire operation is rolled back and no events are written to the stream. The index that caused the issue is included in the error response. .NET client libraries methods Task UpdateValueAsync\u003cT\u003e(string streamId, T item); Task UpdateValuesAsync\u003cT\u003e(string streamId, IList\u003cT\u003e items);"
                                                                               },
    "Content_Portal/Documentation/support.html":  {
                                                      "href":  "Content_Portal/Documentation/support.html",
                                                      "title":  "Technical support and other resources",
                                                      "keywords":  "Technical support and other resources For technical assistance on OSIsoft Cloud Services (OCS), contact OSIsoft Technical Support at + 510-297-5828 or through the OSIsoft Customer Portal . If you do not have a portal account, see How to Get a Login to OSIsoft Customer Portal to obtain one. You must have an account set up in the OSIsoft Customer Portal before you can open a case. We can help you identify the problem, provide workarounds and address any concerns you may have. Note that remote access to your facilities may be necessary during the session. For a quick primer on OCS, see the OCS Playbook in the customer portal. To leave feedback, go to the OSIsoft Cloud Services feedback page . The product team at OSIsoft regularly monitors the page."
                                                  },
    "Content_Portal/How_To_Guides/Assets/asset-type-overview.html":  {
                                                                         "href":  "Content_Portal/How_To_Guides/Assets/asset-type-overview.html",
                                                                         "title":  "Asset types",
                                                                         "keywords":  "Asset types Asset types are a template that is used to create multiple assets with similar properties. Assets created from asset types have the following characteristics: Metadata - A collection of properties that asset instances of this asset type are expected to provide. The type and units of measure for the value can be defined. Stream Type references - A collection of named references to streams that asset instances of the asset type are expected to provide. The name functions as a key identifying the relationship between asset of the referenced Stream. The stream type and unit of measure override define constraints on the referenced stream that instances will comply with. Note the following characteristics of an asset created from an asset type: The metadata associated with the asset is determined by the asset type. Therefore, you cannot add or remove metadata from the asset; however, you can edit the values of the metadata. The stream type for the asset is determined by the asset type. However, you must select the stream that is associated with the asset. The status mapping is determined by the asset type. You cannot change the mappings or select another measurement. You must assign a name to the asset and, optionally, a description. There are two ways to create an asset type: Take an existing asset and convert it to an asset type. For more information, refer to Convert an asset to an asset type . Create an asset type from the start. For more information, refer to Create an asset type with the asset type editor ."
                                                                     },
    "Content_Portal/How_To_Guides/Assets/convert-asset-to-asset-type.html":  {
                                                                                 "href":  "Content_Portal/How_To_Guides/Assets/convert-asset-to-asset-type.html",
                                                                                 "title":  "Convert an asset to an asset type",
                                                                                 "keywords":  "Convert an asset to an asset type For more information on asset types, see Asset types . Follow the instructions in Create and configure an asset , and create the asset that will be the basis for the asset type. Click Save as Asset Type . The Create an Asset Type window opens. Enter the name for the asset type. (Optional) Enter a description for the asset type. Click Create ."
                                                                             },
    "Content_Portal/How_To_Guides/Assets/create-an-asset.html":  {
                                                                     "href":  "Content_Portal/How_To_Guides/Assets/create-an-asset.html",
                                                                     "title":  "Create and configure an asset",
                                                                     "keywords":  "Create and configure an asset Follow the procedures to create an asset, add and configure its metadata and properties, and select and configure a property whose status will be visible in the card or table view. Create the asset Click the menu icon and click Asset Explorer . To change the namespace , click on the namespace to open the Select a Namespace window. Select the namespace and click Continue . Verify that the Assets/Asset Assets Asset Type selector is set to Assets . Click the plus symbol (+) in the toolbar to create a new asset. The Select Type for New Asset window opens. By default, the type selected is \u003cNone\u003e. Accept the default and click Continue . The details blade opens on the right side. Enter a name and description for the asset. Add metadata to the asset Click the Metadata tab and click Add Metadata . Note: Metadata is static attributes about assets, for example, model or region. The fields for entering the metadata details appear. \u003c!-- We need a definition for metadata that covers its use in different OCS contexts. --\u003e Enter a name for the metadata. (Optional) Enter a value for the metadata and select a type. Note: The value must match the selected type. The following date/time date time format is supported: MM/DD/(YY)YY MM DD (YY)YY hh:mm(:ss). \u003c!--WRITER NOTE: What date/time date time formats are supported? Is this the same as for PI Server? i.e., Microsoft standard date/time date time formats? --\u003e (Optional) Select a UOM. Continue adding metadata for the asset. Add properties to the asset Click the Properties tab. Click Add Stream References to add a property. In the Select Streams window, select the stream you want. Note: Use the search box to find the stream. You can search on the stream name, description, or the type. Use the asterisk (*) as a wildcard character. Click Add . The stream reference appears in the right pane. This is the automatically generated user-friendly stream name. You can edit this name. Click the scroll bar to display the properties for the stream reference. Click Configure UOMs . On the Configure UOMs page, make any changes to the property UOMs. Note: UOMs can be set only on numeric types. When you are done, click Save . Note: Once you click Save , any changes are immediately made to the UOMs on the stream, regardless of any other actions you take on this asset. For example, the UOM changes to the stream are not reversed if you click Cancel on the Properties tab or if you delete the asset. Add status tracking to the asset Click the Status tab. Click Add Status Configuration . In the Select Property window, click the property that you want to display status for. Click Continue . Note: Only properties with enumerated states or string values can be selected for the asset status; therefore, only these properties are displayed. You can only specify one property as the asset\u0027s status. Click the status icons to map the icon for each value. All the values have been mapped in the following screen capture. Tip: You can switch to a different property by clicking the icon. Save the asset Click Save ."
                                                                 },
    "Content_Portal/How_To_Guides/Assets/create-asset-from-type.html":  {
                                                                            "href":  "Content_Portal/How_To_Guides/Assets/create-asset-from-type.html",
                                                                            "title":  "Create an asset from an asset type",
                                                                            "keywords":  "Create an asset from an asset type For more information on asset types, see Asset types . Click the menu icon and click Asset Explorer . To change the namespace , click on the namespace to open the Select a Namespace window. Select the namespace and click Continue . Verify that the Assets/Asset Assets Asset Type selector is set to Assets . Click the plus symbol (+) in the toolbar to open the Select Type for New Asset window. Select the type from the list and click Continue . The details blade opens on the right side. Enter a name and description for the asset. Note: The asset type on which this asset is based is shown in the Asset Type field. Click the Metadata tab. Edit the values for any of the metadata. Note: You can only edit the values. The metadata are derived from an asset type, as indicated by the T and, therefore, you cannot add or delete metadata or change the type. Click the Properties tab. Click the caret symbol to open the stream reference configuration pane. Click Choose a Stream to open the Select Stream window. Select the stream from the list of streams. Note: Only streams of the type specified for the stream reference are displayed. In this example, only streams of type PI-Float32 are displayed. Search on the stream name, ID, or description. You can use the asterisk (*) as a wildcard. Click Add . Click Configure UOMs . On the Configure UOMs page, make any changes to the property UOMs. Note: UOMs can be set only on numeric types. When you are done, click Save . Note: Once you click Save , any changes are immediately made to the UOMs on the stream, regardless of any other actions you take on this asset. For example, the UOM changes to the stream are not reversed if you click Cancel on the Properties tab or if you delete the asset. Click Save to save the asset."
                                                                        },
    "Content_Portal/How_To_Guides/Assets/create-asset-type-asset-editor.html":  {
                                                                                    "href":  "Content_Portal/How_To_Guides/Assets/create-asset-type-asset-editor.html",
                                                                                    "title":  "Create an asset type with the asset types editor",
                                                                                    "keywords":  "Create an asset type with the asset types editor For more information on asset types, see Asset types . Click the menu icon and click Asset Explorer . To change the namespace , click on the namespace to open the Select a Namespace window. Select the namespace and click Continue . Click the Assets/Asset Assets Asset Type selector and click Assets Types from the list. Click the plus symbol (+) in the toolbar. The details blade opens on the right side. Enter an ID and description for the asset type. Add metadata to the asset type Click the Metadata tab to add asset metadata. Note: Metadata is static attributes about assets, for example, model or region. \u003c!-- We need a definition for metadata that covers its use in different OCS contexts. --\u003e Click Add Metadata . The fields for entering the metadata details appear. Enter a name for the metadata. (Optional) Enter a value for the metadata and select a type. Note: The value must match the selected type. The following date/time date time format is supported: MM/DD/(YY)YY MM DD (YY)YY hh:mm(:ss). \u003c!--WRITER NOTE: What date/time date time formats are supported? Is this the same as for PI Server? i.e., Microsoft standard date/time date time formats? --\u003e (Optional) Select a UOM. Continue adding metadata for the asset. Add properties to the asset type Click the Properties tab. Click Add Stream Type Reference . In the Select Stream Type window, click the stream type you want. Click Add . The stream type reference appears in the asset type definition in the right pane. Click the scroll bar to display the properties for the stream type reference. The properties associated with the stream type are displayed. Add status tracking to the asset Click the Status tab. Click Add Status Configuration . In the Select Property window, click the property that you want to display status for. Click Continue . Note: You can only specify one property with enumerated states as the the asset\u0027s status. Click the status icons to map the icon for each value. All the values have been mapped in the following screen capture. Tip: You can switch to a different property by clicking the icon. Save the asset type Click Save ."
                                                                                },
    "Content_Portal/How_To_Guides/Assets/Untitled.html":  {
                                                              "href":  "Content_Portal/How_To_Guides/Assets/Untitled.html",
                                                              "title":  "",
                                                              "keywords":  ""
                                                          },
    "Content_Portal/How_To_Guides/How_To_Guides.html":  {
                                                            "href":  "Content_Portal/How_To_Guides/How_To_Guides.html",
                                                            "title":  "",
                                                            "keywords":  ""
                                                        },
    "Content_Portal/How_To_Guides/PI-to-OCS/main-landing-page.html":  {
                                                                          "href":  "Content_Portal/How_To_Guides/PI-to-OCS/main-landing-page.html",
                                                                          "title":  "PI to OCS",
                                                                          "keywords":  "PI to OCS This section of the OCS Content portal contains documentation on how to use PI to OCS to transfer data from your on-prem PI Server to OCS. The PI to OCS content contains the following sections: PI to OCS Introduction Set up PI to OCS Transfer PI system data into OCS The PI to OCS Agent View PI to OCS log messages"
                                                                      },
    "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/landing-page1.html":  {
                                                                                         "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/landing-page1.html",
                                                                                         "title":  "PI to OCS Introduction",
                                                                                         "keywords":  "PI to OCS Introduction This section contains the following topics: Overview of PI to OCS Minmum system requirements Limitations of PI to OCS"
                                                                                     },
    "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/min-sys-reqmnts.html":  {
                                                                                           "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/min-sys-reqmnts.html",
                                                                                           "title":  "Minimum system requirements",
                                                                                           "keywords":  "Minimum system requirements The following system requirements are needed to transfer data from your on-premises PI Server to OCS using the PI to OCS Agent: System component Requirement PI Server PI Data Archive 2017 R2 (v.3.4.405.1198) or later. PI AF 2017 R2 See the PI Data Archive and PI AF release notes for all other minimum system requirements. PI to OCS Agent Install on a different computer than your PI Data Archive deployment. Operating system: 64-bit version of Windows (v. 1809) or 64-bit version of Windows Server 2016 Standard (v. 1803) Note. 32-bit operating systems are not supported. A computer with adequate CPU performance and 8 GB RAM An Internet connection and a secure network connection to the PI Data Archive computer Specific PI to OCS features Transfer elements and out of order (OOO) events to OCS: PI AF 2017 R2 or later Administrative privileges The PI to OCS Agent must be installed on a local machine by a user account with the following permissions: Administrative privileges on the local machine Assigned to the OCS Tenant Administrator role During the PI to OCS Agent installation, you will be prompted to log on to the OCS portal. Note: Make sure to log on to OCS with the correct Tenant Administrator credentials. The PI to OCS Agent requires the Windows service to \"run as user\". You must have read access to the following data on PI Data Archive: Archive data (the PIARCDATA Security table) The PI points configuration table (PIPOINT Security table) The PI points and data to be transferred"
                                                                                       },
    "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/pi-to-ocs-connection-best-practices.html":  {
                                                                                                               "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/pi-to-ocs-connection-best-practices.html",
                                                                                                               "title":  "PI System connections best practices",
                                                                                                               "keywords":  "PI System connections best practices Only one PI to OCS Agent per connection is allowed to transfer data from a specific PI Data Archive to an OCS namespace. This restriction prevents multiple PI to OCS Agents from pulling data from a single PI Data Archive, which can create an excessive load on the server. The following recommendations address this issue: Install the PI to OCS Agent on a host computer that is separate from your PI Data Archive deployment, so it does not add to the load on the host computer. Keep the PI to OCS Agent software version up to date for the best performance. The OCS Portal indicates when an agent is out of date and needs to be updated."
                                                                                                           },
    "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/pi-to-ocs-limitations.html":  {
                                                                                                 "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/pi-to-ocs-limitations.html",
                                                                                                 "title":  "Limitations of PI to OCS",
                                                                                                 "keywords":  "Limitations of PI to OCS Here is a list of currently known limitations for PI to OCS: Issue Restrictions Restrictions for PI point transfers Point must belong to the classic or base point class. Point type must be Float32, Float64, Int16, Int32, Digital, Timestamp or String. Must not be a future PI data tag. Transfer only transfers PI point attributes: descriptor, extended descriptor, point source, engineering units, name, instrument tag, and PI point ID. Data transfers PI to OCS does not transfer any data from PI Asset Framework. PI to OCS Agent registration Once a PI to OCS Agent is registered to an OCS PI data source, no other PI to OCS Agent can connect to that same OCS PI data source. PI to OCS does not automatically transfer PI Point attribute changes. Any modification of PI point information after transfer has initiated will not be propagated to OCS. The PI to OCS Agent must be restarted to recognize these configuration changes. If there is a point type change on PI Data Archive, see PI point change for more information. PI Data Archive PI to OCS does not write events back to PI Data Archive from OCS. PI to OCS does not handle scenarios where PI Data Archives have been taken offline. SDS streams indexes Does not support multiple values at a given index. If a PI Data Archive tag has multiple values at a given timestamp, OCS will only store one of those values. Service account used for PI to OCS Agent Once installed, the service account cannot be changed to another account. To change a service account, you need to perform the following tasks: Uninstall the PI to OCS Agent. Delete the old connection. Create a new connection. Reinstall the PI to OCS Agent."
                                                                                             },
    "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/pi-to-ocs-overview.html":  {
                                                                                              "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Overview-PI-to-OCS/pi-to-ocs-overview.html",
                                                                                              "title":  "Overview of PI to OCS",
                                                                                              "keywords":  "Overview of PI to OCS PI to OCS enables data transfer from your on-premises PI Server(s) to OSIsoft Cloud Services (OCS). PI to OCS supports the following features: Transfer of a selection of PI Data Archive PI points from PI Servers to OCS Sequential Data Store (SDS) streams . Some of the PI point attributes information is transferred as SDS stream metadata and properties. Simultaneous transfer of both historical and streaming data from PI Data Archive to SDS for a selection of PI points Configuration of a PI points selection and data transfer management via the OCS customer portal Transferring PI System data into OCS allows your organization to have data available wherever you go, so users can connect with the best in-class analytics, and with your community of vendors, service providers, and business partners. PI to OCS has two major components: An on-premises component called the \"PI to OCS Agent\" that serves as a bridge between the source PI Server and the OCS destination. The agent runs as a service and performs fast, secure data transfers. A cloud component called a \"PI System connection\" or \"PI System connection data source\", which resides within OCS and receives data from the on-premises PI to OCS Agent and stores it in SDS. Note. Storage in SDS is partitioned by OCS namespace. The deployment of a PI to OCS Agent establishes a one-to-one connection from an on-premises source PI Server to an OCS PI System connection."
                                                                                          },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/disable-ie-security.html":  {
                                                                                            "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/disable-ie-security.html",
                                                                                            "title":  "Disable IE enhanced security",
                                                                                            "keywords":  "Disable IE enhanced security If Internet Explorer Enhanced Security Configuration (IE ESC) is turned on, you will receive an error message to disable this setting before you can log on to OCS and register the PI to OCS Agent. To avoid this issue, you can switch to another web browser during agent installation. Procedure Follow these steps to disable Internet Explorer Enhanced Security Configuration: On the computer the agent is installed (Windows Server operating system), open Server Manager. Navigate to the Internet Explorer Enhanced Security Configuration window. Select the Off option under Administrators . Click OK . You can now complete the PI to OCS Agent install and registration. Note: You can turn off IE Enhanced Security Configuration after you complete the PI to OCS Agent installation."
                                                                                        },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/landing-page4.html":  {
                                                                                      "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/landing-page4.html",
                                                                                      "title":  "PI to OCS Agent",
                                                                                      "keywords":  "PI to OCS Agent This section contains the following topics: PI to OCS Agent maintenance Uninstall an agent Repair an agent Disable IE enhanced security"
                                                                                  },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/repair-pi-to-ocs-agent.html":  {
                                                                                               "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/repair-pi-to-ocs-agent.html",
                                                                                               "title":  "Repair an agent",
                                                                                               "keywords":  "Repair an agent Follow these steps to modify or repair a PI to OCS Agent: Navigate to the downloaded PI to OCS agent installation file. Right-click the PI to OCS agent installation file, then click Run as administrator . Click Yes . In the PI to OCS Agent window, select the Repair option. Click Next . Click Repair . Click Close ."
                                                                                           },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/uninstall-pi-to-ocs-agent.html":  {
                                                                                                  "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/uninstall-pi-to-ocs-agent.html",
                                                                                                  "title":  "Uninstall an agent",
                                                                                                  "keywords":  "Uninstall an agent Before you uninstall a PI to OCS Agent, you need to perform the following tasks to ensure the related data transfer, data source, and PI system connection are also removed: Stop the PI points transfer. Delete the PI Points transfer. Delete the data source. Delete the PI System connection. Note: Removing a data transfer and the corresponding PI System connection does not delete the associated SDS stream types, streams, or the actual data transferred in OCS. These will have to be deleted separately if needed. Procedure Navigate to the downloaded PI to OCS agent installation file. Right-click the PI to OCS agent installation file, then click Run as administrator . Click Yes . In the PI to OCS Agent window, select the Uninstall option. Uninstall option in the PI to OCS Agent Setup Kit On the Unregister the PI to OCS Agent page, click the Unregister agent from OCS checkbox. Note: When you select the option to unregister the agent from OCS, you are required to log on to the OCS portal. To ensure the client and connection information is also removed, make sure to log on with an account that is assigned to the Account Administrative role. Click Uninstall . Optional: You may be required to log on to the OCS portal. Click Close . Optional: To install the latest version of the agent, download and install the latest version of the PI to OCS Agent."
                                                                                              },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/update-agent.html":  {
                                                                                     "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Agent/update-agent.html",
                                                                                     "title":  "PI to OCS Agent maintenance",
                                                                                     "keywords":  "PI to OCS Agent maintenance Enhancements and bug fixes for PI to OCS may require you to update both the PI to OCS Agent and the PI System connection. Since these components work together, updating one usually requires that the other is updated also. The Details pane displays the currently installed version of the PI to OCS Agent, and also indicates if you need to update it to the latest version. Agent version update message If you see the message above, update your agent to the latest version. Updates are required for backward compatibility and when the version of the agent installed is older than the version of the PI System connection. The PI to OCS Agent is updated by downloading a new version of the setup kit and installing the new kit. Some updates might require uninstalling the agent and reconfiguring both your PI System connection and your data transfer. Specific details about the updates will be communicated by posts in the OCS Services Blog , which is accessed from the OCS main menu."
                                                                                 },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/confirm-data-retrieval.html":  {
                                                                                                        "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/confirm-data-retrieval.html",
                                                                                                        "title":  "Confirm data retrieval",
                                                                                                        "keywords":  "Confirm data retrieval To confirm that SDS streams have been created and your data has being transferred, you can view information about these streams on the Sequential Data Store page in the OCS portal. Sign in to the OCS portal . Click the navigator menu icon, then click Sequential Data Store . Sequential Data Store page Click the Namespace down arrow, then select the namespace that the SDS streams have been created in. Note: By default, the grid displays the SDS stream types created by the PI to OCS data transfer. Click the Streams button. Note: The grid lists the first 50 SDS streams in alphabetical order. You can change how many streams are displayed per page (50, 100, 200). Optional: Enter search criteria to locate specific streams in the Search text box, then press [ENTER]. Result: If there are matches, matching streams are shown. Optional: Select a stream, then click Manage Data to query SDS for information about that stream."
                                                                                                    },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/create-a-data-transfer.html":  {
                                                                                                        "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/create-a-data-transfer.html",
                                                                                                        "title":  "Create a data transfer",
                                                                                                        "keywords":  "Create a data transfer A data transfer contains a selection of PI point data you wish to stream from your on-premises PI Data Archive to the desired namespace in OCS. The data transfer process consists of the following steps: Select the PI System connection for the data transfer. Create multiple search queries for PI points. Select the PI points you wish to transfer. Transfer the data to OCS. Before you start Create a PI System connection, install the PI to OCS agent, and then confirm your data source has been registered in OCS. Procedure Sign in to the OCS portal . In the OCS portal, open the Connections page. On the Connections page, select the PI System connection you want to use for the data transfer. In the right pane, click Add PI Point Transfer . Result: The Add PI Point Transfer window opens. The Add PI Point Transfer window Optional: Click the Advanced button to display more search fields. Advanced search fields To build a search query, choose from the following actions: Optional: Click the Basic button to hide the extra search fields. Optional: To remove advanced filters from your search criteria, click the x on the field label. Note: If you do not specify filter criteria, all PI points will be returned in your query results. Click Search to execute your query and retrieve a list of matching PI points from your data source. Query results in the PI Points Found list box Scroll through the PI Points Found list box and click each PI point you want added to the data transfer. Tip: To select a range of PI points, [SHIFT+Click] a non-adjacent PI point in the list after selecting a point. Optional: To advance through multiple-paged query results, click the back and forward arrows OR enter a page number in the Page text box. Note: The total number of PI points in the query results is listed in ???( )??? to the right of the PI Points Found check box. For multiple paged results, PI points are sorted in ascending order. Each page can display up to 200 PI points (this feature is only available with version 1.4.0.0 and later of the Agent). Optional: Click the PI Points Found check box to select all PI points on a page. After you have finished selecting PI points, click Add . NOTE: PI points that have already been selected for a data transfer appear grey in the PI Points Found list box to ensure duplicate points are not added. Optional: Click Clear All to remove selected PI points from the PI Points to Transfer list. To run a new query and add additional PI points to your data transfer, repeat steps 4-12 as many times as needed. TIP: To prevent duplicate query results, be sure to replace existing search criteria. Optional: Enter a historical time context for data retrieval using the Historical Start Time fields. NOTE: OCS supports out of order events and stores data in chronological order by timestamp. PI Data Archive 2017 SP2 or higher is required for this feature. Be sure to enter the historical start date and time correctly to ensure all data is included in the transfer. No data before the historical start time will be captured and stored in SDS. Once you have finished selecting PI points, click Add Transfer . The transfer is saved and displayed in the Data Transfer section of the Details pane. Note: If you make multiple PI point selections across pages in a query result, these selections are preserved. Data Transfer details"
                                                                                                    },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/data-transfer-statuses.html":  {
                                                                                                        "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/data-transfer-statuses.html",
                                                                                                        "title":  "Data transfer statuses",
                                                                                                        "keywords":  "Data transfer statuses The Current Activity field displays details about the status of a data transfer. Data status Meaning Sending Historical Data Historical data is being sent to OCS. Sending Streaming Data PI point data is currently being streamed to OCS. Backfilling Streaming Gap Data streaming to OCS is resuming. Data will be backfilled from the interrupted time to now and will then continue with normal streaming. Uncategorized Error Data transfer has been interrupted due to an unknown cause. Streaming Error Consumer Removed Due to an error during streaming, the consumer has been removed. Streaming Error Update Queue Overflow Agent not receiving streaming data from PI Data Archive. Streaming Error Signup Dropped Agent not receiving streaming data from PI Data Archive. Streaming Error Producer Removed Agent not receiving streaming data from PI Data Archive. Streaming Error Unknown An unknown error occurred during data streaming. PI Point Type Change Detected PI point type change was detected during data transfer. See Point type change for more information. Creating Streams Streams are in the process of being created. Done Data transfer is complete. Streams have been created."
                                                                                                    },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/delete-data-transfer.html":  {
                                                                                                      "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/delete-data-transfer.html",
                                                                                                      "title":  "Delete a data transfer",
                                                                                                      "keywords":  "Delete a data transfer You can delete a data transfer for a PI system connection. When you delete a data transfer, it does not remove any data that has already been transferred. After you have removed a data transfer, you can add a new data transfer to the existing connection. Procedure Sign in to the OCS portal . In the OCS portal, open the Connections page. Select the PI System connection that contains the data transfer you want to delete. Optional: If the data transfer has been started, click the Stop button in the Details pane, then click Stop again . Click the Remove button. In the Remove Transfer message box, click Remove again. Result: The data transferred is deleted. Note: When you remove a PI point data transfer and its corresponding PI System connection, the associated SDS stream types, streams and transferred data does not get deleted in OCS. These will need to be deleted separately. To delete a stream???s history, delete the stream on the Streams section of the Sequential Data Store page."
                                                                                                  },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/landing-page3.html":  {
                                                                                               "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/landing-page3.html",
                                                                                               "title":  "Transfer PI System data to OCS",
                                                                                               "keywords":  "Transfer PI System data to OCS This section contains the following topics: Overview of data transfers Create a data transfer Transfer data to OCS Data transfer statuses Point type change Confirm data retrieval Delete a data transfer"
                                                                                           },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/overview-data-transfers.html":  {
                                                                                                         "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/overview-data-transfers.html",
                                                                                                         "title":  "Overview of data transfers",
                                                                                                         "keywords":  "Overview of data transfers To transfer PI System data to OCS, you must first create a data transfer by setting filter criteria and choosing PI points for the transfer. After, you will stream the selected PI points from your on-premises PI System to OCS. The following tasks must be performed before you can complete a data transfer: Create a PI system connection. Install the PI to OCS agent setup kit. Confirm your PI System connection registration. Create a data transfer. Validate data flow. Note: If you have slow moving PI points that do not update often, you might want your data in OCS before it is archived on PI Data Archive. To accomplish this task, you will need to turn off compression for these PI points to ensure snapshot data is collected. OSIsoft recommends turning off compression only for slow moving PI points. In general, this practice is not required for most tags and can cause unnecessary overhead and data collection."
                                                                                                     },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/pi-point-change.html":  {
                                                                                                 "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/pi-point-change.html",
                                                                                                 "title":  "Point type change",
                                                                                                 "keywords":  "Point type change When the source PI Data Archive tag(s) changes point type, PI to OCS Services will detect this change and present the transfer status as ???PI Point Type Change Detected???. The user must manually decide what to do with the destination SDS stream as well as data that has already been transferred. The SDS stream in question will appear in the log files. The PI to OCS service cannot make an informed decision of why this point change occurred for the following reasons: The source tag had an incorrect configuration of data and type. The data and tag must be deleted and recreated. The source tag was misconfigured initially. The tag changed from a Float32 to a Float64. The data is still relevant and should be kept. Other reasons Once an SDS stream is created, its underlying SdsType cannot change. As a result, new data from the tag that is assigned a different type cannot be stored in the same stream and the user must decide what to do with the existing SDS stream and data. Correctional actions would be: If you care about the data, and also care about having streaming data for that particular tag, create a new SDS stream and copy the data to that new stream. Once you have done this, delete the SDS stream in question and restart the transfer. If you care about the data, but do not care about streaming data for that particular tag, create a new transfer without the tag in question and start the transfer. If you do not care about the streaming data that was previously transferred, delete the SDS stream in question and restart the transfer. The transfer will resume streaming data. To see what types of point coercions are supported in PI Data Archive, please refer to the Live Library topic Allowable point type coercions ."
                                                                                             },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/transfer-data-to-ocs.html":  {
                                                                                                      "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-Data-Transfers/transfer-data-to-ocs.html",
                                                                                                      "title":  "Transfer PI System data to OCS",
                                                                                                      "keywords":  "Transfer PI System data to OCS After PI points have been added to a data transfer, you are ready to stream your PI system data into OCS. Before data is transferred, the SDS streams are created. Then, any historical data is transferred first followed by streaming data. You can view PI points selected for the transfer before or during the data transfer. Procedure In the Data Transfer section of the Details pane, click View . Result: The Transfer Configuration window opens and display the PI points selected for the data transfer. Transfer Configuration window Optional: To filter PI points by a string of characters, enter the first few characters of the PI point name in the Filter PI Points text box. Tip: The Filter PI Points text box is not case sensitive. PI points displayed by filter criteria Note: Any PI points that can???t be transferred are listed at the bottom of the Transfer Configuration window. There are several reasons a PI point ID might not be resolved and included in a data transfer, such as an out-of-date Agent, security issues or removed PI points. Optional: Close the Transfer Configuration window. To initiate the data transfer, click Start in the Data Transfer section of the Details pane. Click Start again to confirm. Result: The Status field changes to Stopped ( Starting ) in the Data Transfer section. Optional: To stop the data transfer at any time, click Stop . Data Transfer details Note: The Data Transfer section provides details on the streaming status of a data transfer. Since it reports on how much historical data has been transferred for a given time period, the rate of progress varies depending on the density of data in the PI Data Archive. See Data transfer statuses for status descriptions. The Events per second field shows the progress of your transfer as data is streamed into OCS. Historical data is transferred first and then streaming data can be viewed. The number of incoming events successfully transferred over to OCS is shown in the Streaming field. Historical data is the number of incoming events per second that are not able to be transferred as ???real-time,??? but instead come from a backlog of events for the PI points associated with the transfer."
                                                                                                  },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/download-tenant-log.html":  {
                                                                                                   "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/download-tenant-log.html",
                                                                                                   "title":  "Tenant log messages",
                                                                                                   "keywords":  "Tenant log messages Troubleshooting information can be found in OCS logs. Logs contain messages about tenant-related activity, errors, and system messages. By default, logs report on activities that occurred within the past hour. Download an OCS tenant log Click the waffle icon, then click Logs . Result: The Log page opens to the Tenant tab. Optional: To view a log by namespace, click the Namespace tab. Optional: Click Filter Logs to filter logs by time range, service, and source. Select a log in the list, then click Download Logs . In the Save As dialog, save the log file to the desired location. Note: By default, log files are saved as .csv files. Open and view the log file."
                                                                                               },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/landing-page5.html":  {
                                                                                             "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/landing-page5.html",
                                                                                             "title":  "View PI to OCS logs",
                                                                                             "keywords":  "View PI to OCS logs This section contains the following topics: Tenant log messages View PI to OCS Agent logs Common Event Viewer log messages"
                                                                                         },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/log-messages.html":  {
                                                                                            "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/log-messages.html",
                                                                                            "title":  "Common Event Viewer log messages",
                                                                                            "keywords":  "Common Event Viewer log messages The table below summarizes the most common messages logged by the Event Viewer. Message ID Description Started Agent 0 The PI to OCS Agent has been started. Stopped Agent 2 The PI to OCS Agent has been stopped. Connected To Data Archive 18 The PI to OCS Agent has connected to source PI Data Archive. PI Data Archive information will be printed in the message. Error Performing Point Query 19 The PI to OCS Agent has encountered an error querying for PI points in the source PI Data Archive. The exception reason and the query ID will be displayed. Failed To Get Data Archive Info 21 The PI to OCS Agent has encountered an error while trying to get archive file information from the source PI Data Archive. The exception reason will be displayed. Depending on the exception, this call may or may not be automatically retried. Data Archive Version Not Supported 24 The source PI Data Archive version is not supported. Currently, the PI to OCS Agent only supports PI Data Archive 2016 R2 (3.4.415.1188) and above. Please upgrade your PI Data Archive if you wish to use PI to OCS. Failed To Perform Point Query - Element Invalid 27 One or more the query objects (Point Mask and/or and or Point Source Mask) is invalid. If this query is made via the OCS Portal, users should not get this error. Agent Registration Completed 30 The PI to OCS Agent registration was successful Agent Registration Failed 33 The PI to OCS Agent registration was not successful. The most frequent reasons why this would occur are as follows: 1) The source PI Data Archive was already tied to an existing Connection; and, 2) The Connection is already tied to another PI to OCS Agent. Agent Received Unregister Request 60 The PI to OCS Agent received an unregister request from the OCS Portal. As a result, the PI to OCS Agent will unregister and shutdown. Agent Unregistered 62 Confirmation message that the PI to OCS Agent is unregistered after receiving event ID 60. Processing Transfer Job Request 65 The PI to OCS Agent has received the new transfer request. The message will contain information about the contents of the transfer such as the transfer historical start time and the number of involved points. Done Transferring Data To OCS For Transfer Job 70 The PI to OCS Agent has completed the given transfer job. At this moment, the only transfer jobs which will complete are the historical and backfilling transfer jobs. By the very nature of streaming data, streaming transfer job will never complete. Error Reading From Data Archive 90 The PI to OCS Agent was unable to read data from PI Data Archive. The event will contain the exception message. Failed To Get Streaming Updates From Data Archive 96 The PI to OCS Agent was not unable to get streaming data from PI Data Archive. The message will contain the exception message. If you have any issues, questions, or comments about deploying or using PI to OCS, please visit my.osisoft.com to open a new technical support case."
                                                                                        },
    "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/view-logs.html":  {
                                                                                         "href":  "Content_Portal/How_To_Guides/PI-to-OCS/PI-to-OCS-log-messages/view-logs.html",
                                                                                         "title":  "View PI to OCS Agent logs",
                                                                                         "keywords":  "View PI to OCS Agent logs To view information about account related activity for on-premises components, you can also view PI to OCS Agent logs in the Windows Event Viewer. Click the Windows menu button, then scroll to and click Windows Administrative Tools \u003e Event Viewer . In the Event Viewer window, click to expand the contents of the Applications and Services Logs option in the left pane. Click PI to OCS . In the PI to OCS pane, scroll through and select an event to view related details."
                                                                                     },
    "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/access-ocs-portal.html":  {
                                                                                           "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/access-ocs-portal.html",
                                                                                           "title":  "Access the OCS customer portal",
                                                                                           "keywords":  "Access the OCS customer portal Log on to the OCS customer portal to access and install the PI to OCS agent and then transfer PI system data to OCS. Before you start Make sure to have your OCS account log on credentials, your company alias or tenant ID, and your tenant\u0027s namespace for the data transfer. \u003c!-- I want to make a link to Account_Management_Concepts.md and then to the Namespace section within, but there\u0027s no UID for that topic --\u003e Note. If you encounter any issues, please refer to your initial OCS activation email or https://cloud.osisoft.com/account https:  cloud.osisoft.com account for help. Procedure Navigate to the OCS customer portal . In the upper-right corner of the OCS portal window, click Sign In . In the Specify Tenant ID or Company Alias window, enter your tenant ID or company alias. Click Continue . At the PI to OCS Agent Login window, sign in to your OCS tenant using a user account that has Tenant Administrator privileges. Note. In the screenshot below, the OCS user is configured to use both a Microsoft Account (MSA) and Google to sign in again. Be sure to sign in to the OCS portal with an account assigned to the Tenant Administrator role. Sign in window"
                                                                                       },
    "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/create-a-pi-to-ocs-connection.html":  {
                                                                                                       "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/create-a-pi-to-ocs-connection.html",
                                                                                                       "title":  "Create a PI System connection",
                                                                                                       "keywords":  "Create a PI System connection Before you can transfer data to OCS, you need to create a PI system connection and install the PI to OCS agent. Procedure Sign in to the OCS portal . Click the menu icon, then click Connections . On the Connections page, click the Namespace field, then select the data transfer destination. Note. A namespace exists within a region, and all data is stored in the namespace???s region. Click Add Connection . PI System Connection window In the Add PI System Connection window, enter a name and description for the connection. Click Next . Click Save . The Download Installation Kit window opens. Next, Install the PI to OCS Agent ."
                                                                                                   },
    "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/install-agent.html":  {
                                                                                       "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/install-agent.html",
                                                                                       "title":  "Install the PI to OCS Agent",
                                                                                       "keywords":  "Install the PI to OCS Agent The PI to OCS Agent must be installed on a host computer, separate from your PI Data Archive deployment, by a Windows user with local Administrative privileges. You can download the PI to OCS Agent Installation kit and then transfer it to the computer that will host the agent. Note. The PI to OCS Agent installation cannot be completed if the system time is not correct. Additionally, you will not be able to complete the PI to OCS Agent installation if Internet Explorer Enhanced Security configuration is enabled. See Disable Internet Explorer Enhanced Security Configuration for details. Procedure Optional: Navigate to the Connections page. Click the Download the PI to OCS Agent Installation Kit icon. PI to OCS Agent Download Installation Kit page Download the PI to OCS agent to the desired location. Close the Download Installation Kit window. Navigate to the downloaded PI to OCS agent installation file. Right-click the PI to OCS agent installation file, then click Run as administrator . Click Yes . The Welcome Screen in the PI to OCS Agent Setup Kit In the PI to OCS Agent (Administrator) window, click Next . Enter your OCS tenant ID or company alias, then click Next . Select or enter the following for your connection: Namespace: Select the location where data will be stored after the data transfer. The region indicates where the namespace resides. Streaming data sent by the PI to OCS Agent will only go to the selected namespace???s region. Connection: Select the name of the data transfer connection you created earlier. PI Data Archive: Enter the name of the on-premises PI Data Archive you want to transfer data from. Optional: Click the Refresh Connection List button to refresh the list of available connections and select a different PI Data Archive. The Connection Screen in the PI to OCS Agent Setup Kit Click Next . Select the service account type for the connection: NT Service : Use a Network Service account to connect to PI Data Archive. This account : Specify a user name and password (domain\\account) to connect to PI Data Archive. Note. The service account must have Administrative privileges and read access to certain data on PI Data Archive. The Service Account screen in the PI to OCS Agent Setup Kit Click Install , then click Close . Result: The PI to OCS Agent is installed and registered to the PI System data source in OCS. The registration process can take a few minutes."
                                                                                   },
    "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/landing-page2.html":  {
                                                                                       "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/landing-page2.html",
                                                                                       "title":  "Set up PI to OCS",
                                                                                       "keywords":  "Set up PI to OCS This section contains the following topics: Access the OCS customer portal Create a PI to OCS connection Install the PI to OCS Agent Confirm your agent is running"
                                                                                   },
    "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/set-up-agent.html":  {
                                                                                      "href":  "Content_Portal/How_To_Guides/PI-to-OCS/Set-up-PI-to-OCS/set-up-agent.html",
                                                                                      "title":  "Confirm your agent is running",
                                                                                      "keywords":  "Confirm your agent is running After installation, confirm your PI to OCS Agent is running on the machine it was installed. You also need to confirm the agent has successfully connected to and registered with your on-premises PI Data Archive. Procedure Type services.msc in the text box next to the Windows menu button, then press [ENTER]. In the Services window, scroll down to PI to OCS Agent and verify that that the Status field shows Running . Services window Navigate to the Connections page, then select the connection you just created. On the Details tab, view the Data Source Status field. Verify that Registered appears next to the Data Source Status field. Registered data source NOTE: It may take a few minutes for your PI System to be registered. The following states may also appear next to the Data Source Status field to indicate a connection issue: State Description Data Source Connection Issue Indicates the PI To OCS Agent isn???t able to connect to the PI Data Archive. Some reasons for this status include the PI Data Archive is turned off, a firewall issue is preventing connections or an incorrect name is configured for the Data Archive (for example, trying to connect to a machine that doesn???t exist/was exist was renamed). There may be additional reasons for this status. Data Source Security Issue Indicates the PI Data Archive connection is unsecure and security settings need to be addressed. Not Registered You need to troubleshoot your PI System connection. Contact OSIsoft Technical Support at +1 510-297-5828 or through the OSIsoft Customer Portal ."
                                                                                  },
    "Content_Portal/OCS_Content_Portal_Overview.html":  {
                                                            "href":  "Content_Portal/OCS_Content_Portal_Overview.html",
                                                            "title":  "OSIsoft Cloud Services",
                                                            "keywords":  "OSIsoft Cloud Services OSIsoft Cloud Services (OCS) is a database platform as a service (dbPaaS) designed for real-time operations data. Users inside and outside organizations have a flexible, secure, and easy way to access operations data that may be located within a primary control network or at the edge of the industrial network. From data collection to data access to data delivery, OCS provides users with an easy way to prepare and share access to data through a REST API. Contextual information can be added to time-based operations data, enabling process engineers and systems operators to make decisions and take corrective or preemptive actions. Access to OCS You must acquire an account before interacting with the OCS. Go to the OCS page on OSIsoft website , click Contact Us and request an OCS account."
                                                        },
    "Content_Portal/Overview/what-does-ocs-do.html":  {
                                                          "href":  "Content_Portal/Overview/what-does-ocs-do.html",
                                                          "title":  "What does OSIsoft Cloud Services do?",
                                                          "keywords":  "What does OSIsoft Cloud Services do? \u003c!--commenting out the image to see if uid is affected by it ![OCS](images/how-does-ocs-work/ocs_intro.png) ![OCS](images how-does-ocs-work ocs_intro.png) --\u003e OSIsoft Cloud Services (OCS) consists of several different areas of core functionality: tenant management, data collection, data organization, and data analysis. The following sections discuss each in detail: Tenant management - Explains basic concepts in managing OCS, including clients, users, roles, roles-based access control and discusses how administrators can customize OCS based on organizational requirements Data collection - Summarizes techniques to collect and feed data from multiple sources across your organization into a namespace within OCS Data organization - Provides a high-level description of how OCS stores and retrieves operational data Data analysis - Provides users with analytical tools to sort and visualize OCS data. Data science enablement - Highlights the capabilities of OCS tools for data grouping and organization to enable the use of third-party data science applications Tenant management You can customize OCS to meet your organization\u0027s requirements and needs. Administrators can create users and clients, define and assign roles, and manage namespaces for their tenant. Authentication and authorization are also customizable on OCS. Configuring the access control list (ACL) for an OCS resources, administrators can define the permissions to a resource. Generally, only administrators should have access to tenant management features. Administrators can perform tenant management using the OCS REST API or the OCS portal. The OCS portal is a web-based user-interface for managing and monitoring your tenant as well as for namespace resources, streams and assets. Tenant A tenant is the root-level resource in OCS; all other resources are scoped to a tenant. Tenant-level resources deal with identity and access control. You can add users to a tenant with one or more identity providers. Roles are defined for a tenant and can be assigned to users or clients to manage access to resources. A tenant contains namespaces where data is managed. Namespace A namespace is a logical unit of organization for data within a tenant. Before any data can be collected in OCS, you must create a namespace for that tenant. Each tenant can contain more than one namespace. Namespaces help you create separate instances of your data and resources within a tenant. Resources within a namespace do not affect other namespaces within that tenant. In practice, namespaces may correspond to a specific set of infrastructure assets, but they commonly correspond to virtual partitions within a single set of assets dedicated to a specific tenant. Identity Identity is the authentication factor used to verify a user or client that requests access to OCS. OCS identity services provide the following functions: Authenticate users with a local account store or through an external identity provider Provide session management and single sign-on Authenticate client applications Issue identity and access tokens to client applications and users Validate access tokens User A user is an individual identity that represents a person using OCS. When users log in to OCS, they authenticate through an identity provider, such as Google or Azure Active Directory. The identity provider authenticates the user, and upon successful authentication, passes a token back to OCS verifying the identity of the user. This identity is used by OCS to grant access for a specific time period. Clients Clients have programmatic access to OCS resources through OCS APIs. There are two primary client types: Client credential clients ??? The most common type of OCS client, used for server-to-server communication without the presence or intervention of a user. Examples include PI Adapters or the Edge Data Store sending data to OCS. This type of client is issued a client ID and secret. After authentication, the client is granted an access token with a defined lifetime. Authorization code clients ??? Used by web-based, mobile, and desktop applications, this client type requires user interaction. Users authenticate with an identity provider. Authorization code clients support silent refresh, which allows the user to automatically receive a new access token, providing for uninterrupted access to the application. Roles A role is a representation of an identity???s job function that determines whether the user can have access to resources needed to accomplish a job. You can assign multiple roles to a user or client-credential client. The user or client???s role, in combination with the access control list (ACL) for a resource or service, determines access permissions to that resource or service. The Tenant Administrator creates roles and assigns those roles to users and clients. For both users and clients, roles authorize API requests for access, such as access to data streams. All clients have the Tenant Member role, which provides Read access to resources. Identity provider Identity providers manage databases of user records and authenticate users against the authentication factors in their databases. This allows users to be granted access to the service provider using the credentials the identity provider manages but without sharing actual login details with OCS. Authentication Authentication is the process of verifying the identity of a user and confirming that the user is an approved entity for OCS. This verification process is performed by the identity provider. Authorization Authorization is the process of determining the appropriate access level for a user or client for each OCS resource and service. Two factors determine the level of access: the role that the user or client is assigned at authentication and the corresponding access control list that grants a level of access to a role for each resource and service. Access control list Each OCS service and resource has an access control list (ACL) that defines how much access is granted to assigned roles. The OCS Administrator configures each ACL and specifies types of permissions for each role. When a request is made to a specific OCS resource, the role assigned to the requestor (whether a user or client) is compared to the ACL for that resource to determine whether the request should be authorized. The types of permissions granted to roles are as follows: Read Write Delete Manage Access Control: Ability to modify the access control list of the resource Owner: An identity that has full permission level Data Collection After defining tenants, setting permissions and access levels for users, and creating clients for programmatic access, you can configure OCS for data collection. Data collection allows you to bring data from multiple sources and systems across your organization into a namespace within OCS. Collection methods The type of data, the location of that data, and the way that a particular source sends data all affect how you can collect that data in OCS. You can choose the data collection technology that best meets your specific needs. These technologies include: PI to OCS Custom OMF applications Edge Data Store PI Adapters Programmatic REST API PI to OCS The PI to OCS collection method transfers PI time series data from a local PI Server to OCS. The PI to OCS Agent is installed and configured directly on a designated device. Note : OSIsoft recommends installing the PI to OCS Agent and PI Server on seperate devices to avoid the two systems competing for resources. The PI to OCS Agent creates types and streams in OCS based on the PI Tags mapped from PI Data Archive. Custom OMF applications OSIsoft Message Format (OMF) is a platform-independent format for passing JSON messages to OCS over HTTP. For programmatic access to data, you can use OMF to develop data acquisition applications on platforms and in languages for which there is no native support. This allows you to integrate data collection directly into a device or asset. OMF topics aggregate OMF messages received from one or more clients and make them available for consumption. An OMF subscription consumes OMF messages from a topic and forwards them to a data store. Multiple subscriptions can retrieve OMF messages from a single topic. Together, these two components make up an OMF connection, which allows collection from a client into an OCS namespace. OMF itself does not define or depend on any binary message protocol, such as HTTP, AMQP, or Kafka. Instead, it is based on an abstract message type, where a message consists of a set of key/value key value pairs, which may include binary files, configuration files, and batch or Shell scripts. You can construct OMF messages using any message protocol that defines headers and bodies. Refer to OMF Message Format for additional information about the OMF specification. Edge Data Store The Edge Data Store (EDS) is a software component that collects sequential data from data sources and stores it locally until it can be transferred to permanent storage. It enables you to store data from a device locally and make the data available for local querying. This is useful for displaying data trends on an edge device. OCS can collect data from EDS via the OSIsoft Message Format (OMF). Edge Data Store currently includes two built-in protocol adapter components, Modbus and OPC UA, and a storage component that also collects and sends OMF. Multiple data sources, referred to as adapter component instances, are supported in protocol components. PI Adapters PI Adapters are software components that collect sequential data from data sources and send it to OCS or PI Server or both. Use PI Adapters for collecting data from standard systems and protocols. Programmatic REST API The OCS programmatic REST API reads and writes data. It supports JSON format and platform-independent data and retrieval. Data organization After setting up data collection, you can use the Sequential Data Store (SDS) to store, retrieve, and organize any type of streaming data. Typically, developers use the SDS as part of their customized applications. To organize and use the data in the SDS, you need to understand the basic features of the system: Types Streams Stream views Types A type, also called an SDS type, defines the structure of data to be collected in OCS. A type is analogous to a template that defines each instance in a stream of data. For example, if you want to collect three measurements streamed from a device (longitude, latitude, and speed) and you want to collect those measurements over a period of time, you can define a type to include properties for longitude, latitude, speed and a timestamp. Collectively, these properties define the structure of the data you are storing. While this is a simple example, OCS lets you create much more complex types. A type can consist of many properties, but one property must function as the primary index. Time is frequently used as the primary index, effectively time-stamping all corresponding properties in each data instance. However, the primary index is not limited to time stamps; it can be any type of sequential data such as depth. After you create a type, you cannot change it. If you want to change a type, you must delete the existing type and create a new one to ensure that no stored data is invalidated. However, you can only delete a type if no streams, views, or other types reference it. OCS provides a simple user interface for creating types. Alternatively, you can create types using programming tools provided by OSIsoft. For an automated programmatic approach, OSIsoft offers .NET client libraries available in NuGet packages. For a manual approach, OSIsoft provides code samples in different programming languages, including Python, Java, and JavaScript. The JSON file format is used to specify the properties and related information in each type. Streams A stream, also called an SDS stream, is a series of ordered events. Each event is an instance of a type. Collectively, the stream of data forms the structure that the type specifies. Streams organize data brought from another system into OCS. To define a stream, you must first define a type, which specifies the structure of the data you want to stream into an OCS namespace. Every stream has a unique identifier. You can have many streams based on the same type, but each stream must have its own unique identifier. There are multiple techniques for sending data to OCS. See Data Collection . Each stream is associated with a namespace. You can associate one or more streams with the same namespace. However, to move data between namespaces, you must read data out from one namespace and write it into another namespace. You can categorize streams using metadata, which is a dictionary of key value pairs used to store additional information. Metadata is not real-time information, and it is not updated at high frequency. Typically, metadata is static information that provides context for a stream. You can also use tags to assign information to a stream. A tag is a string value. For example, a tag might identify a region. REST APIs give you the ability to read and write stream data programmatically. In addition, if you are using the .NET framework, OSIsoft offers client libraries to help you create and use streams. Stream views Because types cannot be modified, OCS provides a flexible mechanism for viewing data in a stream view. A stream view is a logical overlay for stream data. For example, a process engineer and a maintenance technician might want to see different data that exists in the same stream. You cannot change the structure of data in a stream, but a stream view allows you to see a subset of the data in a stream. Using stream views, you can change the appearance of the data stream to meet the needs of both users without changing the original data. Stream views can perform additional functions, such as convert units of measure and change names so the terminology that is displayed is more appropriate for a particular audience. To create a stream view, designate a souce type that contains the desired properties. Then, map properties in the source type to properties in the target type. Properties must have the same data type to be mapped. The source type and the target type must be in the same namespace, and they must exist before you define the stream view. OCS provides a graphical interface for setting up stream views or you can use REST APIs to define stream views programmatically. If you are using the .NET framework, OSIsoft also offers client libraries to help you create and use stream views. Data analysis After defining types, streams and stream views as needed, you can use the analytical tools provided by OCS to sort and visualize data from these objects. Two analytical tools are available in OCS: Trend Assets Trend The Trend feature converts stream data to a graphic view, which can reveal trends, high points, or trouble spots. Use Trend to select data streams in a namespace, specify a time range, and then render a graph of those data values. The following example shows stream data for two streams over a selected period of several days: Assets Assets are a digital twin of physical entities in the real world. An asset can consist of data from one or more streams. The assets in the example below represent trucks in a fleet, with multiple data streams associated with each. You can select an asset and display a trend of the data streams which can be used to identify and analyze problems. You can display the variation in the pressure of the suspension cylinders on each truck over time, identify those trucks whose cylinder pressure is outside the accepted range, and proactively deal with potential problems. Assets are a useful way to organize and contextualize data streams. With PI to OCS data transfers, for example, you can organize multiple PI tags under a single asset. You could create an asset with streams measuring data for thermostats, ventilation equipment, lighting systems, and security. You can create assets on an ad hoc basis or create them from an asset type, a template for creating similar assets. Users can use API calls to define asset rules, which bulk create or update assets according to matching patterns in stream names and metadata. Asset rules are applied to existing applicable streams, and whenever a stream is created, updated, or deleted. Data science enablement OCS allows you to group and organize operational PI, IoT, and OCS data. By arranging data into forms that can be consumed by third-party data science applications, data scientists can conduct deep analysis to detect unrealized patterns and insights. OSIsoft data science enablement efforts allow for better informed planning, predictive maintenance, and operational optimization. Two methods are available in OCS, each of which works dynamically, continuing to filter and order data after they are in place. These methods include the following: Metadata rules - Metadata rules assign metadata to streams matching defined stream name patterns. Data views - Data views order, index, and organize data from multiple streams. Metadata rules You select a stream name to use as a name pattern and assign metadata to selected stream name parts, such as a plant location or device category. The resulting stream name pattern with assigned metadata parts defines a metadata rule. The metadata rule assigns the defined metadata to all streams in a given namespace that match the stream name pattern. The following diagram shows metadata in the context of several different but similar data streams: The diagram above shows three data streams for turbines named GEO1 and GEO2. The data in each stream is color-coded, and streams with matching naming patterns are the same color. The basic description of the stream data is encoded in the stream name, but it can be difficult to understand. Use metadata rules to decode this information. For example, the metadata rule delineates the stream name, GEO1_P.ACT_PV, as GEO1, Turbine , and ACT_PV, Active Power . A metadata rule based on this stream naming pattern can assign metadata for all turbines in each matching stream. A metadata rule assigns the defined metadata to any matching streams in the selected namespace, as well as matching streams that are subsequently added to the namespace. Data views Data views are subsets of data from one or more streams. Data scientists typically query large datasets and need to index, sort, and organize data into specific subsets. With data views, data items can be selected, ordered, and grouped by field. Time indices and time intervals are also configurable for display and analysis. Data views serve as a bridge between raw OCS data and data science applications. Use an API or the OCS portal to create data views to arrange data for consumption by a third-party data science applications. The following diagram depicts multiple streams organized into a data view that a third-party data science application can consume: Data streams from three wind turbines contain metadata assigned by a metadata rule. Create a data view in OCS based on streams containing the specified metadata, select specific data elements from the streams, and order and index them as needed. Ordered and normalized data is then consumable by data science applications for in-depth analysis. Note : You can reference metadata defined in a metadata rule when creating a data view. This action will include all streams containing the specified metadata."
                                                      },
    "Content_Portal/Overview/what-is-ocs.html":  {
                                                     "href":  "Content_Portal/Overview/what-is-ocs.html",
                                                     "title":  "What is OSIsoft Cloud Services?",
                                                     "keywords":  "What is OSIsoft Cloud Services? OSIsoft Cloud Services (OCS) is a cloud data platform for storing, retrieving, and analyzing sequentially indexed data. OCS creates a seamless, trustworthy data infrastructure to incorporate information from sensors, plants, enterprises, and communities of interested users. This enables Operational Technology (OT) to be fully utilized across an organization. OCS offers the following capabilities: Easy data collection Integration with external tools and applications Secure and robust data infrastructure Elastic resource allocation Interruption resilience Easy management and maintenance Easy data collection OCS provides a variety of methods to collect data into the system. You can ingress data from an external application or from PI Server directly to OCS using any of the following methods: PI to OCS PI to OCS transfers PI time-series data from an on-premises PI Server into OCS. PI to OCS maps PI Data Archive PI points to SDS types and streams. OSIsoft Message Format (OMF) OMF is a platform-independent format for passing JSON messages to OCS using an HTTP client. Use OMF to achieve a high-throughput data feed into OCS. Edge Data Store (EDS) EDS uses OMF messages to feed data into OCS from multiple edge devices. PI Adapters PI Adapters are available to feed data into OCS from a variety of data collection devices using OMF messaging. Programmatic REST API Developer-friendly REST APIs provide programmatic access to read and write sequential data into OCS. Integration with external tools and applications OCS allows you to integrate data with many different partner applications, data pipelines and workflows, collaboration tools, business intelligence (BI) and data exploration tools, and custom applications. A few examples include: Power BI Grafana You can integrate and view OCS data in the following ways: Building applications with OCS client libraries to read and write data to OCS Using the OCS REST API to read and write data to OCS Retrieving tabular data with OCS data views OCS also offers opportunities for many new types of data consumers. For example, you could integrate OCS with applications that perform machine learning or AI functions. Secure and robust data infrastructure OCS is built from the ground up to ensure security. The OCS platform is based on industry standard techniques to ensure the strongest possible data integrity. All users authenticate through trusted identity providers, such as Google, Microsoft, and Azure Active Directory. Authenticated users can only perform actions for which their role is authorized. Machine access to OCS is controlled through a variety of defensive strategies. All data in OCS is fully encrypted in transit to OCS and at rest. OCS is designed to prevent your data from being accessible to others. Each organization using OCS, known as a tenant, sets up one or more logical units of work called a namespace. Each namespace is distinct. When a tenant requests a new namespace, OCS automatically allocates the resources needed to support data infrastructure needs. The storage and backend services for each namespace are logically separated from all other namespaces. Elastic resource allocation Due to its microservice-based architecture, OCS dynamically adapts to workload changes by automatically provisioning and de-provisioning resources. Each microservice performs a subset of the system???s overall capabilities, and when orchestrated together, they function as a complete platform. When a tenant requests a new namespace, OCS provisions a new set of microservices and all necessary data storage. As the tenant???s needs for the namespace grow, OCS automatically provisions additional microservices and storage so the namespace can expand horizontally. Similarly, if requirements shrink, OCS can reduce the number of required microservices and de-allocate storage. Interruption resilience To prevent data interruptions or loss, OCS incorporates many safeguards. By design, OCS is built for high availability. You are not required to perform any specific actions to ensure continuous access to reliable, distributed data storage. OSIsoft continuously tests OCS to ensure the platform is performing reliably. Both the platform and the underlying operating systems are updated regularly. In addition, OSIsoft conducts frequent threat analyses to thwart potential exploitations. Load balancing precludes distributed denial of service attacks. A gateway prevents unauthorized access to resources. Easy management and maintenance OSIsoft manages, operates, and maintains all aspects of the OCS platform. OCS is built and deployed on Microsoft Azure and operates outside the OSIsoft corporate firewall. Currently, OCS runs in two Azure regions: West US and West Europe. By housing the platform in multiple regions, OCS accommodates regulations that mandate where data must be stored. With OCS, you can perform virtually all actions on your data infrastructure by using modern, secure, developer-friendly REST APIs. OCS also provides an easy-to-use user interface."
                                                 },
    "Content_Portal/Overview/who-uses-ocs.html":  {
                                                      "href":  "Content_Portal/Overview/who-uses-ocs.html",
                                                      "title":  "Who uses OSIsoft Cloud Services?",
                                                      "keywords":  "Who uses OSIsoft Cloud Services? OCS extends the data infrastructure seamlessly by integrating existing OSIsoft products and third-party vendors from edge to cloud. This allows data to be shared across the entire infrastructure, reaching new data users such as developers creating custom applications, data scientists engaged in data modeling, operations staff who monitor real-time performance, and data analysts using visualized data. OCS enables this diverse group of users to access the data they need to perform their tasks. It is important that data is accurate so that the insights it yields are a reliable source of truth for the entire enterprise. OCS extends the data infrastructure to your operational data. Extending the collection and accessibility of operational data allows new analysis and decision-making processes to benefit the company. Who are the users of this data and how do they use it to help in decision-making processes for their business? Data scientists use OCS to gain business insight Data scientists can easily integrate operational data from multiple sources for a variety of applications, such as process optimization and maintenance. Better data modeling enables smart decision-making based on clear answers about what is most relevant to a company???s goals. OCS uses the entire data infrastructure to gather the right type of data for modeling tools that answer business questions such as maintenance and demand forecasting. OCS enables this process by: Allowing the operations department and data scientists to share data and collaborate more effectively Providing an environment in which data analysis artifacts are saved, enabling the data scientist to modify their models and workflow more efficiently Ensuring that high-quality data is available for analysis How does OCS enable data scientists? Data is easier to consume Curating and preparing data are the most time-consuming tasks when data scientists create their models. Bad data and data gaps decrease the integrity of results. In contrast, data that is contextualized, structured, filtered for relevancy, and presented in a format that is compatible for modeling tools and applications increases the efficiency of data scientists and the accuracy of their results. More data is available to users OCS removes the challenges of complicated and overbuilt data solutions, such as data lakes and relational databases, and provides a direct option for extending the data infrastructure. Because of the flexibility of the OCS REST API, OCS data can be consumed by many software applications that data scientists use to perform their analysis. Data is prepared for efficient consumption Data Views organize and preconfigure OCS data to be compatible with specific tools or applications. Data Views include user-added data context for easy identification and classification. Operational data can be organized in tabular form so it can easily be consumed by external tools via the REST API. Data views preconfigure data sets for algorithms and modeling tools. Data modeling is flexible Data scientists need to experiment with and update their models. The REST API gives data scientists freedom to work with many different contemporary data modeling tools and applications. The REST API also provides flexibility as data science technology evolves. Data is contextualized Data science models are only as good as the data used in those models. Identifying the data that is relevant is as important as the model used. OCS uses metadata rules to provide the context that makes it easy to search for data. OCS metadata rules parse and store data that match specific patterns. Additionally, OCS parses for user-provided context to identify patterns. When it finds a pattern, it attaches metadata. APIs integrate operational data with applications OCS supports easy integration with custom applications, extending the enterprise data infrastructure to in-house and partner applications. OCS offers ease of integration with a modern, secure REST API that is compatible with R and Python applications. The REST API allows the application developer to interact with operational data on OCS. Operations departments use OCS to monitor remote locations OCS provides the ability to integrate data infrastructure from edge to cloud seamlessly. Designed to serve as a \"system of systems,\" OCS supports data usage across the global enterprise. In the past, data was often left stranded at remote locations due to the lack of reliable network connectivity. For instance, farms need data to answer questions such as how much grain is in a silo or what is the predicted corn harvest this season. Mining companies require data from mining trucks to know when maintenance is necessary. This untapped data can provide valuable insights for an enterprise and its decision making. Accessing and integrating these ???dark??? data locations is possible with edge systems and OCS. With pervasive data collectors, PI Adapters, Edge Data Store, and custom OMF applications, operational assets that were previously inaccessible are now viable data sources. Seamless integration of data infrastructure offers the following benefits: Confidence that data across the entire spectrum is authoritative Data is compatible and native to the infrastructure across the spectrum. Operational data can be accessed and used anywhere; it is no longer isolated in one facility or system. New sources of operational data are available by storing the data in the cloud. Existing edge and PI Server data is integrated into OCS."
                                                  },
    "Content_Portal/Quickstarts/getting-started-rom.html":  {
                                                                "href":  "Content_Portal/Quickstarts/getting-started-rom.html",
                                                                "title":  "Getting started with remote operations monitoring",
                                                                "keywords":  "Getting started with remote operations monitoring OSIsoft Cloud Services (OCS) makes it possible to monitor remote assets in real time. The immediate access to data about the status of assets gives you the ability to anticipate problems and proactively perform preventative maintenance. For example, a fleet manager of a mining truck dealer sells trucks to companies worldwide. His company provides monitoring and maintenance services to their customers. With remote monitoring, he reviews the status of the trucks each day, identifies trucks with problems, uses the data collected on different measurements to identify possible causes, reviews the history of these measurements over time, and shares the information with colleagues in the field who can follow up on the problem. The following procedure describes how to use the OCS Portal to monitor your assets and quickly identify problems. The screen captures are taken from the scenario described in the example above. Procedure Log in to OSIsoft Cloud Services. Click the navigation icon (upper left corner) and click Asset Explorer (under Visualization). The asset explorer displays the available assets. In this example, it provides an overview of the health of the fleet of trucks. Tip: Click on the icons in the toolbar to toggle between the card and table views of the assets. Scan through the assets and identify any assets with a problematic status. Tip: Use the Search box to filter the list of assets displayed. Each asset is identified with one of the following statuses: Icon Status Good Warning Alarm Click on an asset to open the Asset Details pane. The Asset Details pane provides metadata and property data on the asset that you can use to determine the cause of any problems. The Metadata tab displays metadata associated with the asset. Click the Measurements tab. The Asset Details pane displays the following: Data associated with the asset. These values are updated in real time. A trend of the selected measurements. Select one or more of the properties that you think might be the cause for the warning. Review the history of the selected properties in the trend to see if the data suggests you have identified a potential cause. By default, the trend shows the property data for the last 8-hour period. Click the arrow to pick another time-range option or specify a custom time range. To delve further into the details of these properties, click the View full trend icon to see the Trend page. Note the following: The Trend page shows the properties for the same time range shown in the Details pane of the Asset Editor. There are three views of the trend: Trend View Description Each trace is displayed in its own trend. All properties are plotted on the same scale. All properties are plotted on its own scale. Click on the icon to toggle through the views. The Legend table shows the legend for each trace, the last value, minimum, maximum, and average values in the displayed time range. The error may not have occurred in the time range currently in view. Click Step backward or Step forward to move the time range backward or forward. The trace will move in increments of time that are displayed in the trend. If the trend displays the last 12 hours, Step backward shows the previous 12-hour period. If it displays the last 30 days, Step forward shows the next 30-day period. Click on a trace to select it for further analysis. The trace is highlighted, and two cursors automatically mark the minimum and maximum values for the displayed time range. Click the plus sign (+) above the trace to lock the cursor in place. The ???+??? turns into an ???x.??? Click the ???x??? to unlock the cursor. Add other cursors at data points of interest. Note: When two cursors are locked, the Legend table displays summary calculations for the values between the two cursors. Click the link icon in the menu bar to copy the URL of the workspace. This link, shared with colleagues, gives them the same view of the trend that they can then use to troubleshoot problems."
                                                            },
    "Content_Portal/Quickstarts/Getting-Started-Trend.html":  {
                                                                  "href":  "Content_Portal/Quickstarts/Getting-Started-Trend.html",
                                                                  "title":  "Getting started with trend data",
                                                                  "keywords":  "Getting started with trend data Use trace data in a trend to monitor assets, anticipate problems, and proactively perform preventative maintenance. The following procedure describes how to display traces in your trend and glean useful information from your data. Procedure Log in to OSIsoft Cloud Services. Click the navigation icon (upper left corner) and click Trend (under Visualization). In the Add Traces blade, click the + sign to add the trace to the trend. Tip: Specify the stream name or description in the Search box to find the OCS streams you are interested in. After you have finished adding the traces, click the x in the Add Traces blade to hide the blade and maximize the available area to display your trend. Click the icon to choose one of the three views: Trend View Description Each trace is displayed in its own trend. All measurements are plotted on the same scale. All measurements are plotted on its own scale. The following screen capture shows the stacked view. Click the time picker and select the time range you want to view. If the desired time range doesn\u0027t appear in this list, click the Custom Range tab and specify your time range. Click Step backward or Step forward to move the time range of the data displayed in the trend. The trace will move in time increments displayed in the time range picker. If the trend displays the last 8 hours, Step backward shows the previous 8-hour period. If it displays the last 30 days, Step forward shows the next 30-day period. Click the triangle to select another time range or specify a custom range. The Legend table displays the Trace view. It shows the legend for each trace, the last value, minimum, maximum, and average values in the displayed time range. Click on a trace to select it for further analysis. The selected trace is highlighted, and two cursors automatically mark the minimum and maximum values for the displayed time range. These cursors, called easy cursors, remain as long as the trace is highlighted. Click the plus sign (+) above the trace to lock the cursors in place. The + turns into an x . To unlock the cursor, click the x . Note: When two cursors are locked, the Legend table displays summary calculations for the values between the two cursors, known as the Cursor view. Click the link icon in the menu bar to copy the URL of the workspace. This link, when shared with colleagues, gives them the same view of the trend that they can then use to troubleshoot problems."
                                                              },
    "Content_Portal/Quickstarts/Quickstarts-Overview.html":  {
                                                                 "href":  "Content_Portal/Quickstarts/Quickstarts-Overview.html",
                                                                 "title":  "",
                                                                 "keywords":  "This is a dummy page for the Quickstarts Overview page."
                                                             },
    "Content_Portal/Quickstarts/Trend-UI.html":  {
                                                     "href":  "Content_Portal/Quickstarts/Trend-UI.html",
                                                     "title":  "Trend User Interface",
                                                     "keywords":  "Trend User Interface The screen capture and table below identify the important elements of the Trend user interface and how to use these elements to interact with the application. For more information on how to use the Trend page to analyze traces, see Getting Started with Trend Data . Number Description 1 Tenant ??? Click the triangle and select the tenant from the list. 2 Namespace ??? Click the triangle and select the namespace from the list. 3 Trend pane ??? Displays the selected traces. Line traces are displayed for numeric data and heat maps are displayed for string or enumerated data. 4 Add Traces pane ??? Click the plus symbol (+) to add the trace to the trend pane. 5 Trend mode ??? Click to toggle between the stacked, single-scale, and multi-scale view modes. 6 Legend table ??? Displays information about the traces in the Trend pane. Toggle between the Trend and Cursor views. 7 Trend view ??? Click the Trend icon to display statistics about each trace in the Legend table. The screen capture shows the trend view. 8 Cursor view ??? Click the Cursor icon to display cursor statistics in the Legend table. The cursor must be locked???click the plus symbol (+) above the cursor???in order to display the statistics. With two or more locked cursors, summary statistics are displayed for contiguous cursors. 9 Cursor ??? Place cursors to get minimum, maximum, average, and delta values between two points in time. 10 Time range picker ??? Specify the time range by selecting a time range, specifying a custom range, or using the step forward and step backward arrows. 11 Reset ??? Clears the workspace. 12 Link ??? Copies the workspace URL. Use this to share your workspace with others. 13 Notifications ??? Click to display error messages."
                                                 },
    "index.html":  {
                       "href":  "index.html",
                       "title":  "OCS Content Portal",
                       "keywords":  "OCS Content Portal Overview Quickstarts How-To Guides API Reference Concepts"
                   },
    "README.html":  {
                        "href":  "README.html",
                        "title":  "OSIsoft Cloud Services",
                        "keywords":  "OSIsoft Cloud Services OSIsoft Cloud Services (OCS) is a cloud data platform for storing, retrieving, and analyzing sequentially indexed data. This repository contains the documentation for OSIsoft Cloud Services. You can access a readable version of this documentation here. License ?? 2019 - 2021 OSIsoft, LLC. All rights reserved. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 http:  www.apache.org licenses LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
                    }
}

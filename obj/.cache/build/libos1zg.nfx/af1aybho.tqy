<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>API calls for reading data </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="API calls for reading data ">
    <meta name="generator" content="docfx 2.39.2.0">
    
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../styles/docfx.css">
    <link rel="stylesheet" href="../../styles/main.css">
    <meta property="docfx:navrel" content="../../toc.html">
    <meta property="docfx:tocrel" content="../toc.html">
    
    <meta property="docfx:rel" content="../../">
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="../../index.html" width="46">
                <img id="logo" src="../../Documentation/images/atlas_icon.png" height="46" width="46" alt="OSIsoft Cloud Serices"> 
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div class="container body-content">
        
        <div id="search-results">
          <div class="search-list"></div>
          <div class="sr-items">
            <p><i class="glyphicon glyphicon-refresh index-loading"></i></p>
          </div>
          <ul id="pagination"></ul>
        </div>
      </div>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="sdsReadingDataApi">
<h1 id="api-calls-for-reading-data" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="4" sourceendlinenumber="4">API calls for reading data</h1>

<h4 id="example-type-stream-and-data" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="6" sourceendlinenumber="6">Example Type, Stream, and Data</h4>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="8" sourceendlinenumber="8">Many of the API methods described below contain example requests and responses in JSON to highlight usage and specific behaviors. The following type, stream, and data are used in the examples.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="10" sourceendlinenumber="11"><strong>Example Type</strong><br><code>SimpleType</code> is an SdsType with a single index. This type is defined below in .NET, Python, and Javascript:</p>
<h6 id="net" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="13" sourceendlinenumber="13">.NET</h6>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="14" sourceendlinenumber="30"><code class="lang-csharp">public enum State
{
   Ok,
   Warning,
   Alarm
}

public class SimpleType
{
   [SdsMember(IsKey = true, Order = 0) ]
   public DateTime Time { get; set; }
   public State State { get; set; }
   [SdsMember(Uom = &quot;meter&quot;)]
   public Double Measurement { get; set; }
}
</code></pre><h6 id="python" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="31" sourceendlinenumber="31">Python</h6>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="32" sourceendlinenumber="56"><code class="lang-python">class State(Enum):
  Ok = 0
  Warning = 1
  Alarm = 2

class SimpleType(object):
  Time = property(getTime, setTime)
  def getTime(self):
    return self.__time
  def setTime(self, time):
    self.__time = time

  State = property(getState, setState)
  def getState(self):
    return self.__state
  def setState(self, state):
    self.__state = state

  Measurement = property(getValue, setValue)
  def getValue(self):
    return self.__measurement
  def setValue(self, measurement):
    self.__measurement = measurement
</code></pre><h6 id="javascript" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="57" sourceendlinenumber="57">JavaScript</h6>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="58" sourceendlinenumber="71"><code class="lang-javascript">var State =
{
  Ok: 0,
  Warning: 1,
  Alarm: 2,
}

var SimpleType = function () {
  this.Time = null;
  this.State = null;
  this.Value = null;
}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="73" sourceendlinenumber="74"><strong>Example Stream</strong><br><code>Simple</code> is an SdsStream of type <code>SimpleType</code>.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="76" sourceendlinenumber="77"><strong>Example Data</strong><br><code>Simple</code> has stored values as follows:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="79" sourceendlinenumber="83"><code>  11/23/2017 12:00:00 PM: Ok  0
  11/23/2017  1:00:00 PM: Ok 10
  11/23/2017  2:00:00 PM: Ok 20
  11/23/2017  3:00:00 PM: Ok 30
  11/23/2017  4:00:00 PM: Ok 40
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="85" sourceendlinenumber="85">All times are represented at offset 0, GMT.</p>
<hr>
<h2 id="get-first-value" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="89" sourceendlinenumber="89"><code>Get First Value</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="91" sourceendlinenumber="91">Returns the first value in the stream. If no values exist in the stream, null is returned.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="93" sourceendlinenumber="93"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="95" sourceendlinenumber="95"><code>    GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/First
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="97" sourceendlinenumber="99"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="101" sourceendlinenumber="102"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="104" sourceendlinenumber="105"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="107" sourceendlinenumber="108"><strong>Response</strong><br>The response includes a status code and a response body containing a serialized event.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="110" sourceendlinenumber="110"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="111" sourceendlinenumber="113"><code class="lang-csharp">   Task&lt;T&gt; GetFirstValueAsync&lt;T&gt;(string streamId, string streamViewId = null);
</code></pre><hr>
<h2 id="get-last-value" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="116" sourceendlinenumber="116"><code>Get Last Value</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="118" sourceendlinenumber="118">Returns the last value in the stream. If no values exist in the stream, null is returned.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="120" sourceendlinenumber="120"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="122" sourceendlinenumber="122"><code>    GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/Last
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="124" sourceendlinenumber="124"><strong>Parameters</strong></p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="126" sourceendlinenumber="127"><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="129" sourceendlinenumber="130"><code>string namespaceId</code><br>The namespace identifier </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="132" sourceendlinenumber="133"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="135" sourceendlinenumber="136"><strong>Response</strong><br>The response includes a status code and a response body containing a serialized event.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="138" sourceendlinenumber="138"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="139" sourceendlinenumber="141"><code class="lang-csharp">   Task&lt;T&gt; GetLastValueAsync&lt;T&gt;(string streamId, string streamViewId = null);
</code></pre><hr>
<h2 id="find-distinct-value" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="144" sourceendlinenumber="144"><code>Find Distinct Value</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="146" sourceendlinenumber="146">Returns a stored event based on the specified <code>index</code> and <code>searchMode</code>. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="148" sourceendlinenumber="148"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="150" sourceendlinenumber="151"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data
     ?index={index}&amp;searchMode={searchMode}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="153" sourceendlinenumber="155"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="157" sourceendlinenumber="158"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="160" sourceendlinenumber="161"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="163" sourceendlinenumber="164"><code>string index</code><br>The index</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="166" sourceendlinenumber="167"><code>string searchMode</code><br>The <a class="xref" href="Reading_Data.html#sdssearchmode" data-raw-source="[SdsSearchMode](xref:sdsReadingData#sdssearchmode)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="167" sourceendlinenumber="167">SdsSearchMode</a>, the default is <code>exact</code></p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="169" sourceendlinenumber="170"><strong>Response</strong>
The response includes a status code and a response body containing a serialized collection with one event. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="172" sourceendlinenumber="172">Depending on the request <code>index</code> and <code>searchMode</code>, it is possible to have an empty collection returned.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="174" sourceendlinenumber="174"><strong>Example</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="176" sourceendlinenumber="177"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?index=2017-11-23T13:00:00Z&amp;searchMode=Next
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="179" sourceendlinenumber="180">The request has an index that matches the index of an existing event, but since a <code>SdsSearchMode</code> of <code>next</code> was specified, the response contains the next event in the stream after the 
specified index:</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="182" sourceendlinenumber="182"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="183" sourceendlinenumber="195"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="197" sourceendlinenumber="197"><strong>Example</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="199" sourceendlinenumber="200"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
    ?index=2017-11-23T13:30:00Z&amp;searchMode=Next
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="202" sourceendlinenumber="202">The request specifies an index that does not match an index of an existing event. The next event in the stream is retrieved.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="204" sourceendlinenumber="204"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="205" sourceendlinenumber="217"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="218" sourceendlinenumber="218"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="219" sourceendlinenumber="226"><code class="lang-csharp">   Task&lt;T&gt; FindDistinctValueAsync&lt;T&gt;(string streamId, string index, 
      SdsSearchMode searchMode = SdsSearchMode.Exact, string streamViewId = null);
   Task&lt;T&gt; FindDistinctValueAsync&lt;T, T1&gt;(string streamId, Tuple&lt;T1&gt; index, 
      SdsSearchMode searchMode = SdsSearchMode.Exact, string streamViewId = null);
   Task&lt;T&gt; FindDistinctValueAsync&lt;T, T1, T2&gt;(string streamId, Tuple&lt;T1, T2&gt; index, 
      SdsSearchMode searchMode = SdsSearchMode.Exact, string streamViewId = null);
</code></pre><hr>
<h2 id="get-values" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="229" sourceendlinenumber="229"><code>Get Values</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="231" sourceendlinenumber="231">Returns a collection of <em>stored</em> values at indexes based on request parameters. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="233" sourceendlinenumber="233">SDS supports three ways of specifying which stored events to return:  </p>
<ul sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="234" sourceendlinenumber="236">
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="234" sourceendlinenumber="234"><a href="#getvaluesfiltered" data-raw-source="[Filtered](#getvaluesfiltered)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="234" sourceendlinenumber="234">Filtered</a>: A filtered request accepts a <a class="xref" href="Filter_Expressions.html" data-raw-source="[filter expression](xref:sdsFilterExpressions)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="234" sourceendlinenumber="234">filter expression</a>.</li>
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="235" sourceendlinenumber="235"><a href="#getvaluesrange" data-raw-source="[Range](#getvaluesrange)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="235" sourceendlinenumber="235">Range</a>: A range request accepts a start index and a count.</li>
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="236" sourceendlinenumber="236"><a href="#getvalueswindow" data-raw-source="[Window](#getvalueswindow)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="236" sourceendlinenumber="236">Window</a>: A window request accepts a start index and end index. This request has an optional continuation token for large collections of events.</li>
</ul>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="238" sourceendlinenumber="238"><a name="getvaluesfiltered"></a></p>
<h3 id="filtered" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="239" sourceendlinenumber="239"><code>Filtered</code></h3>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="241" sourceendlinenumber="241">Returns a collection of stored values as determined by a <code>filter</code>. The <code>filter</code> limits results by applying an expression against event fields. Filter expressions are explained in detail in the <a class="xref" href="Filter_Expressions.html" data-raw-source="[Filter expressions](xref:sdsFilterExpressions)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="241" sourceendlinenumber="241">Filter expressions</a> section.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="243" sourceendlinenumber="243"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="245" sourceendlinenumber="246"><code>    GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data 
       ?filter={filter}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="248" sourceendlinenumber="250"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="252" sourceendlinenumber="253"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="255" sourceendlinenumber="256"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="258" sourceendlinenumber="259"><code>string filter</code><br>The filter expression (see <a class="xref" href="Filter_Expressions.html" data-raw-source="[Filter expressions](xref:sdsFilterExpressions)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="259" sourceendlinenumber="259">Filter expressions</a>)</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="261" sourceendlinenumber="262"><strong>Response</strong>
The response includes a status code and a response body containing a serialized collection of events.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="264" sourceendlinenumber="264"><strong>Example</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="266" sourceendlinenumber="267"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?filter=Measurement gt 10
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="269" sourceendlinenumber="269">The events in the stream with <code>Measurement</code> greater than 10 are returned.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="271" sourceendlinenumber="271"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="272" sourceendlinenumber="290"><code class="lang-json">HTTP/1.1 200
Accept: application/json

[
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;Measurement&quot;: 30
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;Measurement&quot;: 40
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="292" sourceendlinenumber="292">Note that <code>State</code> is not included in the JSON as its value is the default value.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="294" sourceendlinenumber="294"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="295" sourceendlinenumber="298"><code class="lang-csharp">   Task&lt;IEnumerable&lt;T&gt;&gt; GetFilteredValuesAsync&lt;T&gt;(string streamId, string filter, 
      string streamViewId = null);
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="300" sourceendlinenumber="300"><a name="getvaluesrange"></a></p>
<h3 id="range" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="301" sourceendlinenumber="301"><code>Range</code></h3>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="303" sourceendlinenumber="303">Returns a collection of stored values as determined by a <code>startIndex</code> and <code>count</code>. Additional optional parameters specify the direction of the range, how to handle events near or at the start index, whether to skip a certain number of events at the start of the range, and how to filter the data.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="305" sourceendlinenumber="305"><strong>Request</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="307" sourceendlinenumber="309"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data
        ?startIndex={startIndex}&amp;count={count}[&amp;skip={skip}&amp;reversed={reversed} 
        &amp;boundaryType={boundaryType}&amp;filter={filter}]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="311" sourceendlinenumber="313"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="315" sourceendlinenumber="316"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="318" sourceendlinenumber="319"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="321" sourceendlinenumber="322"><code>string startIndex</code><br>Index identifying the beginning of the series of events to return</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="324" sourceendlinenumber="325"><code>int count</code><br>The number of events to return</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="327" sourceendlinenumber="328"><code>int skip</code><br>Optional value specifying the number of events to skip at the beginning of the result</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="330" sourceendlinenumber="333"><code>bool reversed</code><br>Optional specification of the direction of the request. By default, range requests move forward 
from startIndex, collecting events after startIndex from the stream. A reversed request will 
collect events before startIndex from the stream.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="335" sourceendlinenumber="336"><code>SdsBoundaryType boundaryType</code><br>Optional SdsBoundaryType specifies the handling of events at or near startIndex</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="338" sourceendlinenumber="339"><code>string filter</code><br>Optional filter expression</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="341" sourceendlinenumber="342"><strong>Response</strong>
The response includes a status code and a response body containing a serialized collection of events.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="344" sourceendlinenumber="344"><strong>Example</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="346" sourceendlinenumber="347"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T13:00:00Z&amp;count=100
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="349" sourceendlinenumber="349">This request will return a response with up to 100 events starting at 13:00 and extending forward toward the end of the stream: </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="351" sourceendlinenumber="351"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="352" sourceendlinenumber="374"><code class="lang-json">HTTP/1.1 200
Accept: application/json

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;Measurement&quot;: 30
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;Measurement&quot;: 40
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="376" sourceendlinenumber="376">Note that <code>State</code> is not included in the JSON as its value is the default value.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="378" sourceendlinenumber="380"><strong>Example</strong><br>To reverse the direction of the request, set reversed to true. The following request will 
return up to 100 events starting at 13:00 and extending back toward the start of the stream:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="382" sourceendlinenumber="383"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T13:00:00Z&amp;count=100&amp;reversed=true
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="385" sourceendlinenumber="385"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="386" sourceendlinenumber="398"><code class="lang-json">HTTP/1.1 200
Accept: application/json
[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="400" sourceendlinenumber="400">Note that <code>State</code> is not included in the JSON as its value is the default value. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="402" sourceendlinenumber="402">Further, <code>Measurement</code> is not included in the second, 12:00:00, event as zero is the default value for numbers.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="404" sourceendlinenumber="408">The following request specifies a boundary type of Outside for a reversed-direction range request. 
The response will contain up to 100 events. The boundary type Outside indicates that up to one 
event outside the boundary will be included in the response. For a reverse direction range request, 
this means one event forward of the specified start index. In a default direction range request, 
it would mean one event before the specified start index.</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="410" sourceendlinenumber="412"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T13:00:00Z&amp;count=100&amp;reversed=true 
      &amp;boundaryType=2
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="414" sourceendlinenumber="414"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="415" sourceendlinenumber="437"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose 

[
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 0
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="439" sourceendlinenumber="440">The event outside of the index is the next event or the event at 14:00 because the 
request operates in reverse.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="442" sourceendlinenumber="442">Adding a filter to the request means only events that meet the filter criteria are returned:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="444" sourceendlinenumber="446"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T13:00:00Z&amp;count=100&amp;reversed=true 
      &amp;boundaryType=2&amp;filter=Measurement gt 10
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="448" sourceendlinenumber="448"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="449" sourceendlinenumber="461"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose 

[
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="463" sourceendlinenumber="463"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="464" sourceendlinenumber="503"><code class="lang-csharp">   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      int count, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      int count, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1, T2&gt;(string streamId, Tuple&lt;T1, T2&gt; startIndex, 
      int count, string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      int count, bool reversed, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      int count, bool reversed, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, int count, bool reversed, string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      int count, SdsBoundaryType boundaryType, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      int count, SdsBoundaryType boundaryType, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, int count, SdsBoundaryType boundaryType, string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      int skip, int count, bool reversed, SdsBoundaryType boundaryType, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      int skip, int count, bool reversed, SdsBoundaryType boundaryType, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeValuesAsync&lt;T, T1, T2&gt;(string streamId, Tuple&lt;T1, T2&gt; startIndex, 
      int skip, int count, bool reversed, SdsBoundaryType boundaryType, 
      string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeFilteredValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      int skip, int count, bool reversed, SdsBoundaryType boundaryType, string filter, 
      string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeFilteredValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      int skip, int count, bool reversed, SdsBoundaryType boundaryType, string filter, 
      string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetRangeFilteredValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, int skip, int count, bool reversed, SdsBoundaryType boundaryType, 
      string filter, string streamViewId = null);
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="505" sourceendlinenumber="505"><a name="getvalueswindow"></a></p>
<h3 id="window" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="506" sourceendlinenumber="506"><code>Window</code></h3>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="508" sourceendlinenumber="508">Returns a collection of stored events based on the specified <code>startIndex</code> and <code>endIndex</code>. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="510" sourceendlinenumber="512">For handling events at and near the boundaries of the window, a single SdsBoundaryType that applies 
to both the start and end indexes can be passed with the request, or separate boundary types may 
be passed for the start and end individually. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="514" sourceendlinenumber="514">Paging is supported for window requests with a large number of events. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="516" sourceendlinenumber="517">To retrieve the next page of values, include the <code>continuationToken</code> from the results of the previous request. 
For the first request, specify a null or empty string for the <code>continuationToken</code>.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="519" sourceendlinenumber="519"><strong>Requests</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="521" sourceendlinenumber="538"><code> GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data? 
      ?startIndex={startIndex}&amp;endIndex={endIndex}

 GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data? 
      ?startIndex={startIndex}&amp;endIndex={endIndex}&amp;boundaryType={boundaryType}

  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data? 
      ?startIndex={startIndex}&amp;startBoundaryType={startBoundaryType} 
      &amp;endIndex={endIndex}&amp;endBoundaryType={endBoundaryType}

  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data? 
      ?startIndex={startIndex}&amp;endIndex={endIndex}
      &amp;count={count}&amp;continuationToken={continuationToken}

  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data? 
      ?startIndex={startIndex}&amp;startBoundaryType={startBoundaryType} 
      &amp;endIndex={endIndex}&amp;endBoundaryType={endBoundaryType}&amp;filter={filter}&amp;count={count} 
      &amp;continuationToken={continuationToken}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="540" sourceendlinenumber="542"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="544" sourceendlinenumber="545"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="547" sourceendlinenumber="548"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="550" sourceendlinenumber="551"><code>string startIndex</code><br>Index bounding the beginning of the series of events to return</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="553" sourceendlinenumber="554"><code>string endIndex</code><br>Index bounding the end of the series of events to return</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="556" sourceendlinenumber="557"><code>int count</code><br>Optional maximum number of events to return. If <code>count</code> is specified, a <code>continuationToken</code> must also be specified.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="559" sourceendlinenumber="560"><code>SdsBoundaryType boundaryType</code><br>Optional <a class="xref" href="Reading_Data.html#sdsboundaryType" data-raw-source="[SdsBoundaryType](xref:sdsReadingData#sdsboundaryType)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="560" sourceendlinenumber="560">SdsBoundaryType</a> specifies handling of events at or near the start and end indexes</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="562" sourceendlinenumber="563"><code>SdsBoundaryType startBoundaryType</code><br>Optional <a class="xref" href="Reading_Data.html#sdsboundaryType" data-raw-source="[SdsBoundaryType](xref:sdsReadingData#sdsboundaryType)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="563" sourceendlinenumber="563">SdsBoundaryType</a> specifies the first value in the result in relation to the start index. If <code>startBoundaryType</code> is specified, <code>endBoundaryType</code> must be specified.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="565" sourceendlinenumber="566"><code>SdsBoundaryType endBoundaryType</code><br>Optional <a class="xref" href="Reading_Data.html#sdsboundaryType" data-raw-source="[SdsBoundaryType](xref:sdsReadingData#sdsboundaryType)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="566" sourceendlinenumber="566">SdsBoundaryType</a> specifies the last value in the result in relation to the end index. If <code>startBoundaryType</code> is specified, <code>endBoundaryType</code> must be specified.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="568" sourceendlinenumber="569"><code>string filter</code><br>Optional <a class="xref" href="Filter_Expressions.html" data-raw-source="[filter expression](xref:sdsFilterExpressions)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="569" sourceendlinenumber="569">filter expression</a></p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="571" sourceendlinenumber="572"><code>string continuationToken</code><br>Optional token used to retrieve the next page of data. If <code>count</code> is specified, a <code>continuationToken</code> must also be specified.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="574" sourceendlinenumber="575"><strong>Response</strong><br>The response includes a status code and a response body containing a serialized collection of events. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="577" sourceendlinenumber="577">A continuation token can be returned if specified in the request.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="579" sourceendlinenumber="580"><strong>Example</strong><br>The following requests all stored events between 12:30 and 15:30: </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="582" sourceendlinenumber="583"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T12:30:00Z&amp;endIndex=2017-11-23T15:30:00Z
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="585" sourceendlinenumber="585">The response will contain the event stored at the specified index:</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="587" sourceendlinenumber="587"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="588" sourceendlinenumber="606"><code class="lang-json">HTTP/1.1 200
Accept: application/json

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;Measurement&quot;: 30
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="608" sourceendlinenumber="608">Note that <code>State</code> is not included in the JSON as its value is the default value.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="610" sourceendlinenumber="612"><strong>Example</strong><br>When the request is modified to specify a boundary type of Outside, the value 
before 13:30 and the value after 15:30 are included:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="614" sourceendlinenumber="616"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T12:30:00Z&amp;endIndex=2017-11-23T15:30:00Z 
      &amp;boundaryType=2
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="618" sourceendlinenumber="618"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="619" sourceendlinenumber="644"><code class="lang-json">HTTP/1.1 200
Accept: application/json

[
    {
        &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;Measurement&quot;: 30
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;Measurement&quot;: 40
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="646" sourceendlinenumber="646">Note that <code>State</code> is not included in the JSON as its value is the default value. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="648" sourceendlinenumber="649">Further, <code>Measurement</code> is not included in the second, 12:00:00, event as zero is the default 
value for numbers.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="651" sourceendlinenumber="653">If instead a start boundary of Inside, only values inside the start boundary (after 13:30) 
are included in the result. With an end boundary of Outside one value outside the end index 
(after 15:30) is included:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="655" sourceendlinenumber="657"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T12:30:00Z&amp;&amp;startBoundaryType=1 
      &amp;endIndex=2017-11-23T15:30:00Z&amp;endBoundaryType=2
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="659" sourceendlinenumber="659"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="660" sourceendlinenumber="686"><code class="lang-json">HTTP/1.1 200
Accept: application/json

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 30
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 40
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="688" sourceendlinenumber="690">In order to page the results of the request, a continuation token may be specified. 
This requests the first page of the first two stored events between start index and 
end index by indicating count is 2 and continuationToken is an empty string:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="692" sourceendlinenumber="694"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T12:30:00Z&amp;endIndex=2017-11-23T15:30:00Z 
      &amp;count=2&amp;continuationToken=
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="696" sourceendlinenumber="696"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="697" sourceendlinenumber="717"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

{
    &quot;Results&quot;: [
        {
            &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 10
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 20
        }
    ],
    &quot;ContinuationToken&quot;: &quot;2017-11-23T14:00:00.0000000Z&quot;
}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="719" sourceendlinenumber="720">This request uses the continuation token from the previous 
page to request the next page of stored events:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="722" sourceendlinenumber="724"><code>  GET api/v1-preview/Tenants/{tenantId}}/Namespaces/{namespaceId}/Streams/Simple/Data 
      ?startIndex=2017-11-23T12:30:00Z&amp;endIndex=2017-11-23T15:30:00Z 
      &amp;count=2&amp;continuationToken=2017-11-23T14:00:00Z
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="727" sourceendlinenumber="727"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="728" sourceendlinenumber="743"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

{
    &quot;Results&quot;: [
        {
            &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 30
        }
    ],
    &quot;ContinuationToken&quot;: null
}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="745" sourceendlinenumber="745">In this case, the results contain the final event. The returned continuation token is null. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="747" sourceendlinenumber="747"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="748" sourceendlinenumber="832"><code class="lang-csharp">   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      string endIndex, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex,
      T1 endIndex, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      string endIndex, SdsBoundaryType boundaryType, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      T1 endIndex, SdsBoundaryType boundaryType, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, 
      SdsBoundaryType boundaryType, string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T&gt;(string streamId, 
      string startIndex, string endIndex, SdsBoundaryType boundaryType, 
      string filter, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1&gt;(string streamId, 
      T1 startIndex, T1 endIndex, SdsBoundaryType boundaryType, string filter, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, 
      SdsBoundaryType boundaryType, string filter, string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T&gt;(string streamId, 
      string startIndex, SdsBoundaryType startBoundaryType, string endIndex, 
      SdsBoundaryType endBoundaryType, string filter, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1&gt;(string streamId,
      T1 startIndex, SdsBoundaryType startBoundaryType, 
      T1 endIndex, SdsBoundaryType endBoundaryType, 
      string filter, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, SdsBoundaryType startBoundaryType, 
      Tuple&lt;T1, T2&gt; endIndex, SdsBoundaryType endBoundaryType, 
      string filter, string streamViewId = null);

   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowValuesAsync&lt;T&gt;(string streamId, string startIndex,
      string endIndex, SdsBoundaryType boundaryType, int count, 
      string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      T1 endIndex, SdsBoundaryType boundaryType, int count, 
      string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, 
      SdsBoundaryType boundaryType, int count, string continuationToken, 
      string streamViewId = null);

   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T&gt;(string streamId, 
      string startIndex, string endIndex, SdsBoundaryType boundaryType, 
      string filter, int count, string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1&gt;(string streamId, 
      T1 startIndex, T1 endIndex, SdsBoundaryType boundaryType, string filter, 
      int count, string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, 
      SdsBoundaryType boundaryType, string filter, int count, 
      string continuationToken, string streamViewId = null);

   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowValuesAsync&lt;T&gt;(string streamId, 
      string startIndex, SdsBoundaryType startBoundaryType, 
      string endIndex, SdsBoundaryType endBoundaryType, 
      int count, string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1&gt;(string streamId, 
      T1 startIndex, SdsBoundaryType startBoundaryType, 
      T1 endIndex, SdsBoundaryType endBoundaryType, 
      int count, string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, SdsBoundaryType startBoundaryType, 
      Tuple&lt;T1, T2&gt; endIndex, SdsBoundaryType endBoundaryType, 
      int count, string continuationToken, string streamViewId = null);

   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T&gt;(string streamId, 
      string startIndex, SdsBoundaryType startBoundaryType, 
      string endIndex, SdsBoundaryType endBoundaryType, 
      string filter, int count, string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1&gt;(string streamId, 
      T1 startIndex, SdsBoundaryType startBoundaryType, 
      T1 endIndex, SdsBoundaryType endBoundaryType, 
      string filter, int count, string continuationToken, string streamViewId = null);
   Task&lt;SdsResultPage&lt;T&gt;&gt; GetWindowFilteredValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, SdsBoundaryType startBoundaryType, 
      Tuple&lt;T1, T2&gt; endIndex, SdsBoundaryType endBoundaryType, 
      string filter, int count, string continuationToken, string streamViewId = null);
</code></pre><hr>
<h2 id="get-interpolated-values" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="836" sourceendlinenumber="836"><code>Get Interpolated Values</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="838" sourceendlinenumber="839">Returns a collection of values based on request parameters. The stream’s read characteristics determine how events 
are calculated for indexes at which no stored event exists. Interpolation is not supported for streams with compound indexes.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="841" sourceendlinenumber="841">SDS supports two ways of specifying which interpolated events to return:  </p>
<ul sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="842" sourceendlinenumber="843">
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="842" sourceendlinenumber="842"><a href="#getvaluesindexcollection" data-raw-source="[Index Collection](#getvaluesindexcollection)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="842" sourceendlinenumber="842">Index Collection</a>: One or more indexes can be passed to the request in order to retrieve events at specific indexes. </li>
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="843" sourceendlinenumber="843"><a href="#getvaluesinterpolatedinterval" data-raw-source="[Interval](#getvaluesinterpolatedinterval)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="843" sourceendlinenumber="843">Interval</a>: An interval can be specified with a start index, end index, and count. This will return the specified count of events evenly spaced from start index to end index.</li>
</ul>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="845" sourceendlinenumber="845"><a name="getvaluesindexcollection"></a></p>
<h3 id="index-collection" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="846" sourceendlinenumber="846"><code>Index Collection</code></h3>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="848" sourceendlinenumber="848">Returns events at the specified indexes. If no stored event exists at a specified index, the stream’s read characteristics determine how the returned event is calculated.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="850" sourceendlinenumber="850"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="852" sourceendlinenumber="853"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/
    Interpolated?index={index}[&amp;index={index}...]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="855" sourceendlinenumber="857"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="859" sourceendlinenumber="860"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="862" sourceendlinenumber="863"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="865" sourceendlinenumber="866"><code>string index</code><br>One or more indexes</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="868" sourceendlinenumber="869"><strong>Response</strong><br>The response includes a status code and a response body containing a serialized collection of events.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="871" sourceendlinenumber="871">Depending on the specified indexes and read characteristics of the stream, it is possible to have less events returned than specified indexes. An empty collection can also be returned.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="873" sourceendlinenumber="875"><strong>Example</strong><br>Consider a stream of type <code>Simple</code> with the default <code>InterpolationMode</code> of <code>Continuous</code> and 
<code>ExtrapolationMode</code> of <code>All</code>. In the following request, the specified index matches an existing stored event:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="877" sourceendlinenumber="878"><code>GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/
  Interpolated?index=2017-11-23T13:00:00Z
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="880" sourceendlinenumber="880">The response will contain the event stored at the specified index.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="882" sourceendlinenumber="882"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="883" sourceendlinenumber="895"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="897" sourceendlinenumber="897">The following request specifies an index for which no stored event exists:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="899" sourceendlinenumber="900"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data/
    Interpolated?index=2017-11-23T13:30:00Z
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="902" sourceendlinenumber="903">Because the index is a valid type for interpolation and the stream has a <code>InterpolationMode</code> of <code>Continuous</code>, 
this request receives a response with an event interpolated at the specified index:</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="905" sourceendlinenumber="905"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="906" sourceendlinenumber="918"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:30:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 15
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="920" sourceendlinenumber="922">Consider a stream of type <code>Simple</code> with an <code>InterpolationMode</code> of <code>Discrete</code> and 
<code>ExtrapolationMode</code> of <code>All</code>. In the following request, the specified indexes only 
match two existing stored events:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="924" sourceendlinenumber="925"><code>  GET api/v1-preview/Tenants/{tenantId}}/Namespaces/{namespaceId}/Streams/Simple/Data 
      Interpolated?index=2017-11-23T12:30:00Z&amp;index=2017-11-23T13:00:00Z&amp;index=2017-11-23T14:00:00Z
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="927" sourceendlinenumber="927">For this request, the response contains events for two of the three specified indexes.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="929" sourceendlinenumber="929"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="930" sourceendlinenumber="947"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="949" sourceendlinenumber="949"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="950" sourceendlinenumber="964"><code class="lang-csharp">   Task&lt;T&gt; GetValueAsync&lt;T&gt;(string streamId, string index, 
      string streamViewId = null);
   Task&lt;T&gt; GetValueAsync&lt;T, T1&gt;(string streamId, Tuple&lt;T1&gt; index, 
      string streamViewId = null);
   Task&lt;T&gt; GetValueAsync&lt;T, T1, T2&gt;(string streamId, Tuple&lt;T1, T2&gt; index, 
      string streamViewId = null);

   Task&lt;IEnumerable&lt;T&gt;&gt; GetValuesAsync&lt;T&gt;(string streamId, IEnumerable&lt;string&gt; index, 
      string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetValuesAsync&lt;T, T1&gt;(string streamId, IEnumerable&lt;T1&gt; index,
      string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetValuesAsync&lt;T, T1, T2&gt;(string streamId, 
      IEnumerable&lt;Tuple&lt; T1, T2&gt;&gt; index, string streamViewId = null);
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="966" sourceendlinenumber="966"><a name="getvaluesinterpolatedinterval"></a></p>
<h3 id="interval" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="967" sourceendlinenumber="967"><code>Interval</code></h3>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="969" sourceendlinenumber="969">Returns events at evenly spaced intervals based on the specified start index, end index, and count. If no stored event exists at an index interval, the stream’s read characteristics determine how the returned event is calculated.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="971" sourceendlinenumber="971"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="973" sourceendlinenumber="974"><code>    GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/
      Interpolated?startIndex={startIndex}&amp;endIndex={endIndex}&amp;count={count}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="976" sourceendlinenumber="978"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="980" sourceendlinenumber="981"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="983" sourceendlinenumber="984"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="986" sourceendlinenumber="987"><code>string startIndex</code><br>The index defining the beginning of the window</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="989" sourceendlinenumber="990"><code>string endIndex</code><br>The index defining the end of the window  </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="992" sourceendlinenumber="993"><code>int count</code><br>The number of events to return. Read characteristics of the stream determine how the events are constructed.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="995" sourceendlinenumber="996"><strong>Response</strong><br>The response includes a status code and a response body containing a serialized collection of events. Depending on the read characteristics and input parameters, it is possible for a collection to be returned with less events than specified in the count.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="998" sourceendlinenumber="998">For a stream, named Simple, of type <code>Simple</code> for the following request:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1000" sourceendlinenumber="1001"><code>  GET api/v1-preview/Tenants/{tenantId}}/Namespaces/{namespaceId}/Streams/Simple/Data/
    Interpolated?startIndex=2017-11-23T13:00:00Z&amp;endIndex=2017-11-23T15:00:00Z&amp;count=3
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1003" sourceendlinenumber="1003">the start and end fall exactly on event indexes, and the number of events from start to end match the count of three (3).</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1005" sourceendlinenumber="1005"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1006" sourceendlinenumber="1028"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 30
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1030" sourceendlinenumber="1030"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1031" sourceendlinenumber="1038"><code class="lang-csharp">   Task&lt;IEnumerable&lt;T&gt;&gt; GetValuesAsync&lt;T&gt;(string streamId, string startIndex, 
      string endIndex, int count, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetValuesAsync&lt;T, T1&gt;(string streamId, T1 startIndex, 
      T1 endIndex, int count, string streamViewId = null);
   Task&lt;IEnumerable&lt;T&gt;&gt; GetValuesAsync&lt;T, T1, T2&gt;(string streamId, Tuple&lt;T1, T2&gt; startIndex, 
      Tuple&lt;T1, T2&gt; endIndex, int count, string streamViewId = null);
</code></pre><hr>
<h2 id="get-summaries" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1042" sourceendlinenumber="1042"><code>Get Summaries</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1044" sourceendlinenumber="1044">Returns summary intervals between a specified start and end index. </p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1046" sourceendlinenumber="1047">Index types that cannot be interpolated do not support summary requests. Strings are an example of indexes that cannot be interpolated. Summaries are not supported for streams with compound indexes. Interpolating between two indexes 
that consist of multiple properties is not defined and results in non-determinant behavior.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1049" sourceendlinenumber="1049">Summary values supported by <code>SdsSummaryType</code> enum:</p>
<table sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1051" sourceendlinenumber="1064">
<thead>
<tr>
<th>Summary</th>
<th>Enumeration value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Count</td>
<td>1</td>
</tr>
<tr>
<td>Minimum</td>
<td>2</td>
</tr>
<tr>
<td>Maximum</td>
<td>4</td>
</tr>
<tr>
<td>Range</td>
<td>8</td>
</tr>
<tr>
<td>Mean</td>
<td>16</td>
</tr>
<tr>
<td>StandardDeviation</td>
<td>64</td>
</tr>
<tr>
<td>Total</td>
<td>128</td>
</tr>
<tr>
<td>Skewness</td>
<td>256</td>
</tr>
<tr>
<td>Kurtosis</td>
<td>512</td>
</tr>
<tr>
<td>WeightedMean</td>
<td>1024</td>
</tr>
<tr>
<td>WeightedStandardDeviation</td>
<td>2048</td>
</tr>
<tr>
<td>WeightedPopulationStandardDeviatio</td>
<td>4096</td>
</tr>
</tbody>
</table>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1066" sourceendlinenumber="1066"><strong>Request</strong>  </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1068" sourceendlinenumber="1069"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/{streamId}/Data/
    Summaries?startIndex={startIndex}&amp;endIndex={endIndex}&amp;count={count}&amp;filter={filter}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1071" sourceendlinenumber="1073"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1075" sourceendlinenumber="1076"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1078" sourceendlinenumber="1079"><code>string streamId</code><br>The stream identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1081" sourceendlinenumber="1082"><code>string startIndex</code><br>The start index for the intervals</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1084" sourceendlinenumber="1085"><code>string endIndex</code><br>The end index for the intervals</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1087" sourceendlinenumber="1088"><code>int count</code><br>The number of intervals requested</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1090" sourceendlinenumber="1091"><code>string filter</code><br>Optional filter expression</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1093" sourceendlinenumber="1094"><code>string streamViewId</code><br>Optional stream view identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1096" sourceendlinenumber="1097"><strong>Response</strong><br>The response includes a status code and a response body containing a serialized collection of SdsIntervals.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1099" sourceendlinenumber="1099">Each SdsInterval has a start, end, and collection of summary values.</p>
<table sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1101" sourceendlinenumber="1105">
<thead>
<tr>
<th>Property</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>Start</td>
<td>The start of the interval</td>
</tr>
<tr>
<td>End</td>
<td>The end of the interval</td>
</tr>
<tr>
<td>Summaries</td>
<td>The summary values for the interval, keyed by summary type. The nested dictionary contains property name keys and summary calculation result values.</td>
</tr>
</tbody>
</table>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1107" sourceendlinenumber="1108"><strong>Example</strong><br>The following requests calculates two summary intervals between the <code>startIndex</code> and <code>endIndex</code>: </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1110" sourceendlinenumber="1111"><code>  GET api/v1-preview/Tenants/{tenantId}/Namespaces/{namespaceId}/Streams/Simple/Data 
    Summaries?startIndex=2017-11-23T12:00:00Z&amp;endIndex=2017-11-23T16:00:00Z&amp;count=2
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1113" sourceendlinenumber="1113"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1114" sourceendlinenumber="1227"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Start&quot;: {
            &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 0
        },
        &quot;End&quot;: {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 20
        },
        &quot;Summaries&quot;: {
            &quot;Count&quot;: {
                &quot;Measurement&quot;: 2
            },
            &quot;Minimum&quot;: {
                &quot;Measurement&quot;: 0
            },
            &quot;Maximum&quot;: {
                &quot;Measurement&quot;: 20
            },
            &quot;Range&quot;: {
                &quot;Measurement&quot;: 20
            },
            &quot;Total&quot;: {
                &quot;Measurement&quot;: 20
            },
            &quot;Mean&quot;: {
                &quot;Measurement&quot;: 10
            },
            &quot;StandardDeviation&quot;: {
                &quot;Measurement&quot;: 7.0710678118654755
            },
            &quot;PopulationStandardDeviation&quot;: {
                &quot;Measurement&quot;: 5
            },
            &quot;WeightedMean&quot;: {
                &quot;Measurement&quot;: 10
            },
            &quot;WeightedStandardDeviation&quot;: {
                &quot;Measurement&quot;: 7.0710678118654755
            },
            &quot;WeightedPopulationStandardDeviation&quot;: {
                &quot;Measurement&quot;: 5
            },
            &quot;Skewness&quot;: {
                &quot;Measurement&quot;: 0
            },
            &quot;Kurtosis&quot;: {
                &quot;Measurement&quot;: -2
            }
        }
    },
    {
        &quot;Start&quot;: {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 20
        },
        &quot;End&quot;: {
            &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 40
        },
        &quot;Summaries&quot;: {
            &quot;Count&quot;: {
                &quot;Measurement&quot;: 2
            },
            &quot;Minimum&quot;: {
                &quot;Measurement&quot;: 20
            },
            &quot;Maximum&quot;: {
                &quot;Measurement&quot;: 40
            },
            &quot;Range&quot;: {
                &quot;Measurement&quot;: 20
            },
            &quot;Total&quot;: {
                &quot;Measurement&quot;: 60
            },
            &quot;Mean&quot;: {
                &quot;Measurement&quot;: 30
            },
            &quot;StandardDeviation&quot;: {
                &quot;Measurement&quot;: 7.0710678118654755
            },
            &quot;PopulationStandardDeviation&quot;: {
                &quot;Measurement&quot;: 5
            },
            &quot;WeightedMean&quot;: {
                &quot;Measurement&quot;: 30
            },
            &quot;WeightedStandardDeviation&quot;: {
                &quot;Measurement&quot;: 7.0710678118654755
            },
            &quot;WeightedPopulationStandardDeviation&quot;: {
                &quot;Measurement&quot;: 5
            },
            &quot;Skewness&quot;: {
                &quot;Measurement&quot;: 0
            },
            &quot;Kurtosis&quot;: {
                &quot;Measurement&quot;: -2
            }
        }
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1229" sourceendlinenumber="1229"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1230" sourceendlinenumber="1252"><code class="lang-csharp">   Task&lt;IEnumerable&lt;SdsInterval&lt;T&gt;&gt;&gt; GetIntervalsAsync&lt;T&gt;(string streamId, string 
      startIndex, string endIndex, int count, string streamViewId = null);

   Task&lt;IEnumerable&lt;SdsInterval&lt;T&gt;&gt;&gt; GetIntervalsAsync&lt;T, T1&gt;(string streamId, T1 
      startIndex, T1 endIndex, int count, string streamViewId = null);

   Task&lt;IEnumerable&lt;SdsInterval&lt;T&gt;&gt;&gt; GetIntervalsAsync&lt;T, T1, T2&gt;(string streamId, 
      Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, int count, 
      string streamViewId = null);

   Task&lt;IEnumerable&lt;SdsInterval&lt;T&gt;&gt;&gt; GetFilteredIntervalsAsync&lt;T&gt;(string streamId, 
      string startIndex, string endIndex, int count, string filter, 
      string streamViewId = null);

   Task&lt;IEnumerable&lt;SdsInterval&lt;T&gt;&gt;&gt; GetFilteredIntervalsAsync&lt;T, T1&gt;(string streamId, 
      T1 startIndex, T1 endIndex, int count, string filter, 
      string streamViewId = null);

   Task&lt;IEnumerable&lt;SdsInterval&lt;T&gt;&gt;&gt; GetFilteredIntervalsAsync&lt;T, T1, T2&gt;(string 
      streamId, Tuple&lt;T1, T2&gt; startIndex, Tuple&lt;T1, T2&gt; endIndex, int count, 
      string filter, string streamViewId = null);
</code></pre><hr>
<h2 id="join-values" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1255" sourceendlinenumber="1255"><code>Join Values</code></h2>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1257" sourceendlinenumber="1257">Returns data from multiple streams, which are joined based on the request specifications. The streams must be of the same SdsType.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1259" sourceendlinenumber="1259">SDS supports the following types of joins:</p>
<table sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1261" sourceendlinenumber="1267">
<thead>
<tr>
<th>SdsJoinMode</th>
<th>Enumeration value</th>
<th>Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Inner</td>
<td>0</td>
<td>Results include the stored events with common indexes across specified streams.</td>
</tr>
<tr>
<td>Outer</td>
<td>1</td>
<td>Results include the stored events for all indexes across all streams.</td>
</tr>
<tr>
<td>Interpolated</td>
<td>2</td>
<td>Results include events for each index across all streams for the request index boundaries. Some events may be interpolated.</td>
</tr>
<tr>
<td>MergeLeft</td>
<td>3</td>
<td>Results include events for each index across all streams selecting events at the indexes based on left to right order of the streams.</td>
</tr>
<tr>
<td>MergeRight</td>
<td>4</td>
<td>Results include events for each index across all streams selecting events at the indexes based on right to left order of the streams.</td>
</tr>
</tbody>
</table>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1270" sourceendlinenumber="1270">SDS supports two types of join requests:</p>
<ul sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1271" sourceendlinenumber="1272">
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1271" sourceendlinenumber="1271"><a href="#getjoin" data-raw-source="[GET](#getjoin)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1271" sourceendlinenumber="1271">GET</a>: The stream, joinMode, start index, and end index are specified in the request URI path.</li>
<li sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1272" sourceendlinenumber="1272"><a href="#postjoin" data-raw-source="[POST](#postjoin)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1272" sourceendlinenumber="1272">POST</a>: Only the SdsJoinMode is specified in the URI. The streams and read specification for each stream are specified in the body of the request.</li>
</ul>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1274" sourceendlinenumber="1274"><a name="getjoin"></a></p>
<h3 id="get-request" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1275" sourceendlinenumber="1275"><code>GET Request</code></h3>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1277" sourceendlinenumber="1279"><code>GET api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?streams={streams}&amp;joinMode={joinMode}
        &amp;startIndex={startIndex}&amp;endIndex={endIndex}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1281" sourceendlinenumber="1283"><strong>Parameters</strong><br><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1285" sourceendlinenumber="1286"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1288" sourceendlinenumber="1289"><code>string streams</code><br>Commas separated list of stream identifiers</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1291" sourceendlinenumber="1292"><code>SdsJoinMode joinMode</code><br>Type of join, i.e. inner, outer, etc.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1294" sourceendlinenumber="1295"><code>string startIndex</code><br>Index identifying the beginning of the series of events to return</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1297" sourceendlinenumber="1298"><code>string endIndex</code><br>Index identifying the end of the series of events to return</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1300" sourceendlinenumber="1301"><strong>Response</strong><br>The response includes a status code and a response body containing multiple serialized events. See examples for specifics.</p>
<h4 id="examples" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1303" sourceendlinenumber="1303">Examples</h4>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1305" sourceendlinenumber="1305">To join multiple streams, for example Simple1 and Simple2, assume that Simple1 presents the following data:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1307" sourceendlinenumber="1334"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 30
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 40
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1336" sourceendlinenumber="1336">And assume that Simple2 presents the following data:</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1338" sourceendlinenumber="1365"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 50
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 60
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 70
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 80
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1367" sourceendlinenumber="1367">The following are responses for various Joins request options:</p>
<h5 id="inner-join-example" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1369" sourceendlinenumber="1369">Inner Join Example</h5>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1371" sourceendlinenumber="1373"><code>  GET api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?streams=Simple1,Simple2&amp;joinMode=inner
        &amp;startIndex=0001-01-01T00:00:00.0000000&amp;endIndex=9999-12-31T23:59:59.9999999
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1375" sourceendlinenumber="1376"><strong>Response</strong><br>Measurements from both streams with common indexes.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1378" sourceendlinenumber="1378"><strong>Response body</strong> </p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1380" sourceendlinenumber="1399"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 30
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 60
        }
    ]
]
</code></pre><h5 id="outer-join-example" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1401" sourceendlinenumber="1401">Outer Join Example</h5>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1403" sourceendlinenumber="1405"><code>  GET api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?streams=Simple1,Simple2&amp;joinMode=outer
        &amp;startIndex=0001-01-01T00:00:00.0000000&amp;endIndex=9999-12-31T23:59:59.9999999
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1407" sourceendlinenumber="1408"><strong>Response</strong><br>All Measurements from both Streams, with default values at indexes where a Stream does not have a value.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1410" sourceendlinenumber="1410"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1411" sourceendlinenumber="1478"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 10
        },
        null
    ],
    [
        null,
        {
            &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 50
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 20
        },
        null
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 30
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 60
        }
    ],
    [
        null,
        {
            &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 70
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 40
        },
        null
    ],
    [
        null,
        {
            &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 80
        }
    ]
]
</code></pre><h5 id="interpolated-join-example" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1480" sourceendlinenumber="1480">Interpolated Join Example</h5>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1482" sourceendlinenumber="1484"><code>  GET api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?streams=Simple1,Simple2&amp;joinMode=interpolated
        &amp;startIndex=0001-01-01T00:00:00.0000000&amp;endIndex=9999-12-31T23:59:59.9999999
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1486" sourceendlinenumber="1487"><strong>Response</strong><br>All Measurements from both Streams with missing values interpolated. If the missing values are between valid Measurements within a Stream, they are interpolated. If the missing values are outside of the boundary values, they are extrapolated.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1489" sourceendlinenumber="1489"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1491" sourceendlinenumber="1582"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 10
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 50
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 15
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 50
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 20
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 55
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 30
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 60
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 35
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 70
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 40
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 75
        }
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 40
        },
        {
            &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 80
        }
    ]
]
</code></pre><h5 id="mergeleft-join-example" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1584" sourceendlinenumber="1584">MergeLeft Join Example</h5>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1586" sourceendlinenumber="1588"><code>  GET api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?streams=Simple1,Simple2&amp;joinMode=mergeleft
        &amp;startIndex=0001-01-01T00:00:00.0000000&amp;endIndex=9999-12-31T23:59:59.9999999
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1590" sourceendlinenumber="1591"><strong>Response</strong><br>This is similar to <a href="#outerjoin-request" data-raw-source="[OuterJoin](#outerjoin-request)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1591" sourceendlinenumber="1591">OuterJoin</a>, but value at each index is the first available value at that index when iterating the given list of streams from left to right.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1593" sourceendlinenumber="1593"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1594" sourceendlinenumber="1636"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 50
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 30
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 70
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 40
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 80
    }
]
</code></pre><h5 id="mergeright-join-example" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1638" sourceendlinenumber="1638">MergeRight Join Example</h5>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1640" sourceendlinenumber="1642"><code>  GET api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?streams=Simple1,Simple2&amp;joinMode=mergeright
        &amp;startIndex=0001-01-01T00:00:00.0000000&amp;endIndex=9999-12-31T23:59:59.9999999
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1644" sourceendlinenumber="1645"><strong>Response</strong><br>This is similar to <a href="#outerjoin-request" data-raw-source="[OuterJoin](#outerjoin-request)" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1645" sourceendlinenumber="1645">OuterJoin</a>, but value at each index is the first available value at that index when iterating the given list of streams from right to left.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1647" sourceendlinenumber="1647"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1648" sourceendlinenumber="1690"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    {
        &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 10
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T12:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 50
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 20
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 60
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 70
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T16:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 40
    },
    {
        &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
        &quot;State&quot;: 0,
        &quot;Measurement&quot;: 80
    }
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1693" sourceendlinenumber="1693"><a name="getjoin"></a></p>
<h3 id="post-requests" sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1694" sourceendlinenumber="1694">POST Requests</h3>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1696" sourceendlinenumber="1697"><code>    POST api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?joinMode={joinMode}
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1699" sourceendlinenumber="1699"><strong>Parameters</strong></p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1701" sourceendlinenumber="1702"><code>string tenantId</code><br>The tenant identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1704" sourceendlinenumber="1705"><code>string namespaceId</code><br>The namespace identifier</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1707" sourceendlinenumber="1708"><code>SdsJoinMode joinMode</code><br>Type of join, i.e. inner, outer, etc.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1710" sourceendlinenumber="1711"><strong>Reqeust Body</strong><br>Read options specific to each stream.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1713" sourceendlinenumber="1714"><strong>Response</strong><br> The response includes a status code and a response body containing multiple serialized events.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1716" sourceendlinenumber="1716">Consider the following outer join request,</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1718" sourceendlinenumber="1719"><code>    POST api/Tenants/{tenantId}/Namespaces/{namespaceId}/Bulk/Streams/Data/Joins
        ?joinMode=outer
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1721" sourceendlinenumber="1721">where in the request body, different start indexes and end indexes are specified per stream,</p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1723" sourceendlinenumber="1748"><code class="lang-json">[  
   {  
        &quot;StreamId&quot;: &quot;Simple1&quot;,
        &quot;Options&quot;: {
            &quot;StartIndex&quot;: &quot;2017-11-23T11:00:00Z&quot;,
            &quot;EndIndex&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;StartBoundaryType&quot;: &quot;Exact&quot;,
            &quot;EndBoundaryType&quot;: &quot;Exact&quot;,
            &quot;Count&quot;: 100,
            &quot;Filter&quot;: &quot;&quot;
        }
    },
    {
        &quot;StreamId&quot;: &quot;Simple2&quot;,
        &quot;Options&quot;: {
            &quot;StartIndex&quot;: &quot;2017-11-23T15:00:00Z&quot;,
            &quot;EndIndex&quot;: &quot;2017-11-23T17:00:00Z&quot;,
            &quot;StartBoundaryType&quot;: &quot;Exact&quot;,
            &quot;EndBoundaryType&quot;: &quot;Exact&quot;,
            &quot;Count&quot;: 100,
            &quot;Filter&quot;: &quot;&quot;
        }
    }
] 
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1750" sourceendlinenumber="1750">Only events within the stream&#39;s specified index boundaries are considered for the outer join operation</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1752" sourceendlinenumber="1752"><strong>Response body</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1753" sourceendlinenumber="1800"><code class="lang-json">HTTP/1.1 200
Accept: application/json
Accept-Verbosity: verbose

[
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T11:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 10
        },
        null
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T13:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 20
        },
        null
    ],
    [
        {
            &quot;Time&quot;: &quot;2017-11-23T14:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 30
        },
        null
    ],
    [
        null,
        {
            &quot;Time&quot;: &quot;2017-11-23T15:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 70
        }
    ],
    [
        null,
        {
            &quot;Time&quot;: &quot;2017-11-23T17:00:00Z&quot;,
            &quot;State&quot;: 0,
            &quot;Measurement&quot;: 80
        }
    ]
]
</code></pre><p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1802" sourceendlinenumber="1802">Notice that not all the values from Streams were included since they are restricted by individual queries for each Stream.</p>
<p sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1804" sourceendlinenumber="1804"><strong>.NET Library</strong></p>
<pre sourcefile="Documentation/SequentialDataStore/Reading_Data_API.md" sourcestartlinenumber="1805" sourceendlinenumber="1853"><code class="lang-csharp">   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, 
      SdsJoinType joinMode, string startIndex, string endIndex);

   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, 
      SdsJoinType joinMode, string startIndex, string endIndex, int count);

   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, 
      SdsJoinType joinMode, string startIndex, string endIndex, SdsBoundaryType boundaryType, 
      string filter);

   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, 
      SdsJoinType joinMode, string startIndex, string endIndex, SdsBoundaryType boundaryType, 
      string filter, int count);

   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, 
      SdsJoinType joinMode, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, 
      SdsBoundaryType endBoundaryType, string filter);

   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, 
      SdsJoinType joinMode, string startIndex, SdsBoundaryType startBoundaryType, string endIndex, 
      SdsBoundaryType endBoundaryType, string filter, int count);

   Task&lt;IEnumerable&lt;IList&lt;T&gt;&gt;&gt; GetJoinValuesAsync&lt;T&gt;(SdsJoinType joinMode, IList&lt;SdsStreamQuery&gt; 
      sdsStreamsQueryOptions);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(SdsMergeType joinMode, IList&lt;SdsStreamQuery&gt; 
      sdsStreamsQueryOptions);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, SdsMergeType joinMode, 
      string startIndex, string endIndex);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, SdsMergeType joinMode, 
      string startIndex, string endIndex, int count);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, SdsMergeType joinMode, 
      string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, SdsMergeType joinMode, 
      string startIndex, string endIndex, SdsBoundaryType boundaryType, string filter, int count);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, SdsMergeType joinMode, 
      string startIndex, SdsBoundaryType startBoundaryType, string endIndex, 
      SdsBoundaryType endBoundaryType, string filter);

   Task&lt;IList&lt;T&gt;&gt; GetMergeValuesAsync&lt;T&gt;(IEnumerable&lt;string&gt; streams, SdsMergeType joinMode, 
      string startIndex, SdsBoundaryType startBoundaryType, string endIndex, 
      SdsBoundaryType endBoundaryType, string filter, int count);
</code></pre><hr>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/osisoft/OCS-Docs/blob/master/Documentation/SequentialDataStore/Reading_Data_API.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
            <span id='copyright-text'>© 2019 - OSIsoft, LLC.<span>
        </span></span></div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../styles/main.js"></script>
  </body>
</html>

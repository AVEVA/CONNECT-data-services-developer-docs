insert-values:
  type: markdown
  value: |
    Inserts data into the specified stream. Returns an error if data is already present at the index of any event.
    
    **Notes**: This request will return an error if an event already exists for any index in the request.
    If any individual index encounters a problem, the entire operation is rolled back and no insertions are made.
    The streamId and index that caused the issue are included in the error response.  
update-values:
  type: markdown
  value: |
    Writes one or more events to or over existing events the specified stream. 
    
    **Notes**: This request performs an insert or a replace depending on whether an event already exists at the event indexes.
    If any item fails to write, the entire operation is rolled back and no events are written to the stream.
    The index that caused the issue is included in the error response.
list-values:
  type: markdown
  value: |
    Returns a collection of stored values at indexes based on request parameters.
      
    SDS supports four ways of specifying which stored events to return:
    - [Find Distinct Value](xref:sdsReadingDataApi#find-distinct-value): Returns a stored event based on the specified index and searchMode. 
        
        **Parameters**: Accepts ``index`` and ``searchMode``.
    - [Filtered](xref:sdsReadingDataApi#getvaluesfiltered): Returns a collection of stored values as determined by a filter.The filter limits results by applying an expression against event fields. 
        
        **Parameters**: Accepts a ``filter`` expression. 
    - [Range](xref:sdsReadingDataApi#getvaluesrange): Returns a collection of stored values as determined by a ``startIndex`` and ``count``. 
        Additional optional parameters specify the direction of the range, how to handle events near or at the start index, whether to skip a certain number of events at the start of the range, and how to filter the data.
        
        **Parameters**: Accepts ``startIndex`` and ``count``.
    - [Window](xref:sdsReadingDataApi#getvalueswindow): Returns a collection of stored events based on the specified ``startIndex`` and ``endIndex``. 
        
        **Parameters**: Accepts ``startIndex`` and ``endIndex``. This request has an optional continuation token for large collections of events.
patch-values:
  type: markdown
  value: |
    Modifies the specified stream event(s). 
    Patching affects only the data item parameters that are included in the call.
   
    **Notes**: Patching is used to patch the events of the selected fields for one or more events in the stream.
    Only the fields indicated in ``selectExpression`` are modified.
    The events to be modified are indicated by the index value of each entry in the collection. 
    If there is a problem patching any individual event, the entire operation is rolled back and the error will indicate the ``streamId`` and ``index`` of the problem.
remove-values:
  type: markdown
  value: |
    There are two options for specifying which events to remove from a stream: index collection and windows
    
    [Index Collection](xref:sdsWritingDataApi#index-collection): Removes the event at each index from the specified stream. 
    Different overloads are available to make it easier to indicate the index where you want to remove a data event. 
    One or more indexes can be specified in the request.
    
    [Window](xref:sdsWritingDataApi#window): Removes events at and between the start index and end index.
    A window can be specified with a start index and end index.
    
    **Notes**: If any individual event fails to be removed, the entire operation is rolled back and no events are removed.
    The ``streamId`` and ``index`` that caused the issue are included in the error response.
    If you attempt to remove events at indexes that have no events, an error is returned.
    If this occurs, use the [Window](xref:sdsWritingDataApi#window) request format to remove any events from a specified window of indexes, which will not return an error if no data is found.
interpolated-values:
  type: markdown
  value: |
    Returns a collection of values based on request parameters.
    The stream's read characteristics determine how events are calculated for indexes at which no stored event exists.
    Interpolation is not supported for streams with compound indexes.
    
    SDS supports two ways of specifying which stored events to return: index collection and interval.
    
    [Index collection](xref:sdsReadingDataApi#index-collection): Returns events at the specified indexes.
    If no stored event exists at a specified index, the stream's read characteristics determine how the returned event is calculated.
    
    **Parameters**: Accepts ``index``.
    
    [Interval](xref:sdsReadingDataApi#getvaluesinterpolatedinterval): Returns events at evenly spaced intervals based on the specified ``startIndex``, ``endIndex``, and ``count``. 
    If no stored event exists at an index interval, the stream's read characteristics determine how the returned event is calculated. 
    
    **Parameters**: Accepts ``startIndex``, ``endIndex`` and ``count``.
join-values:
  type: markdown
  value: |
    Returns data from multiple streams, joined based on the request specifications. Streams must be of the same type.
    GET and POST join requests are supported.
            
    [GET method](xref:sdsReadingDataApi#getjoin): ``stream``, ``joinMode``, ``startIndex``, and ``endIndex`` are specified in the request URI.
    
    [POST method](xref:sdsReadingDataApi#post-request): only ``joinMode`` is specified in the URI. Streams and read specifications for each stream are specified in the request body.
stream-data-transform:
  type: markdown
  value: |
    Controller for methods hosted at ``{streamId}/Transform/``.

    The Transform route is for SdsStreamView project and unit conversion of stream data.
    - [Reading with SdsStreamViews](https://ocs-docs.osisoft.com/Content_Portal/Documentation/SequentialDataStore/Reading_Data.html#reading-with-sdsstreamviews):Changing the shape of the returned data.
    When transforming data with an SdsStreamView, the data read is converted to the target type specified in the SdsStreamView. 
    All stream view transformations are HTTP GET requests. 
    Specify the stream view ID `(streamViewId={streamViewId})` at the end of the transformation endpoint.
    When data is requested with an SdsStreamView, the read characteristics defined by the target type of the SdsStreamView determine what is returned. 
    - [Unit of measure conversions](https://ocs-docs.osisoft.com/Content_Portal/Documentation/SequentialDataStore/Reading_Data.html#unit-conversion-of-data): Converting the unit of measure of the data. 
    SDS supports assigning Units of Measure (UOM) to stream data.
    If stream data has UOM information associated, SDS supports reading data with unit conversions applied.
    On each read data request, unit conversions are specified by a user defined collection of SdsStreamPropertyOverride objects in read requests. 
    All unit conversions of data are HTTP POST requests with a request body containing a collection of SdsStreamPropertyOverride objects. 

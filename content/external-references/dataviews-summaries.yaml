# class summaries
class-collectionaccessrightscontroller:
  type: text/plain
  value: |
    APIs for retrieving access rights on the data views collection.

class-collectionaclcontroller:
  type: text/plain
  value: |
    APIs for working with the Access Control List of the data view collection.

class-dataviewsdatacontroller:
  type: markdown
  value: |
    The Data API allows users to [retrieve data](xref:DataViewsQuickStartGetData) for a specified data view.  This API is one portion of the [data views API](xref:DataViewsAPIOverview).

class-dataviewscontroller:
  type: markdown
  value: |
    The `DataView` API provides mechanisms to create, read, update, and delete data views. This is one portion of the whole [data views API](xref:DataViewsAPIOverview).

    For a description of the `DataView` object type, see the [DataView documentation](xref:DataViewsAPIOverview).

    Other sections of documentation describe how to [secure data views](xref:DataViewsSecuringDataViews) by setting their ownership and permissions, and the corresponding [API](xref:data-views-access-control).

class-dataviewspermissionscontroller:
  type: markdown
  value: |
    This portion of the [overall data views API](xref:DataViewsAPIOverview) focuses on [securing data views](xref:DataViewsSecuringDataViews) by setting their ownership and permissions.

class-previewdataviewsresolvedcontroller:
  type: markdown
  value: |
    This portion of the overall [data views API](xref:DataViewsAPIOverview) specifies the resources that resolve per-user for an input data view. The preview APIs require a data view to be passed in the request body for each request, which provides the user the flexibility to change the data view on the fly without saving/updating it.

class-previewdataviewsdatacontroller:
  type: markdown
  value: |
    The Preview Data API allows users to [retrieve data](xref:DataViewsQuickStartGetData) for a specified data view.  This API is one portion of the [data views API](xref:DataViewsAPIOverview).

class-dataviewsresolvedcontroller:
  type: markdown
  value: |
    This portion of the overall [data views API](xref:DataViewsAPIOverview) is the resources that resolve per-user for each data view. For a description of what this information is, and how to use it, see the [documentation](xref:ResolvedDataView) for resolved data views.

# method summaries: access control
dataview-accessrights-get:
  type: text/plain
  value: |
    Returns the access rights to the requested data view for the calling user or client.

dataview-acl-get:
  type: markdown
  value: |
    Returns the [`AccessControlList`](xref:accessControl#access-control-lists) of the specified data view.

dataview-acl-update:
  type: markdown
  value: |
    Updates the [`AccessControlList`](xref:accessControl#access-control-lists) of the specified data view.

dataview-owner-get:
  type: markdown
  value: |
    Returns the owner [`Trustee`](xref:accessControl#owner) of the specified data view.

dataview-owner-update:
  type: markdown
  value: |
    Updates the owner [`Trustee`](xref:accessControl#owner) of the specified data view.

dataviews-accessrights-get:
  type: text/plain
  value: |
    Returns the access rights to the data views collection for the calling user or client.

dataviews-acl-get:
  type: markdown
  value: |
    Returns the default [`AccessControlList`](xref:accessControl#access-control-lists) for the DataViews collection.

dataviews-acl-update:
  type: markdown
  value: |
    Updates the default [`AccessControlList`](xref:accessControl#access-control-lists) for the DataViews collection.

# method summaries: requesting data
data-interpolated-get:
  type: markdown
  value: |
    Returns interpolated data for the provided index parameters with paging. See [documentation on paging](xref:DataViewsQuickStartGetData#paging) for further information.

data-interpolated-get-preview:
  type: markdown
  value: |
    Returns interpolated data for the provided data view and index parameters with paging. See [documentation on paging](xref:DataViewsQuickStartGetData#paging) for further information.

data-stored-get:
  type: markdown
  value: |
    Returns stored data for the provided index parameters with paging. See [documentation on paging](xref:DataViewsQuickStartGetData#paging) for further information.

data-stored-get-preview:
  type: markdown
  value: |
    Returns stored data for the provided data view and index parameters with paging. See [documentation on paging](xref:DataViewsQuickStartGetData#paging) for further information.

# method summaries: data views
dataview-create:
  type: text/plain
  value: |
    Creates a new data view with a system-generated identifier.

dataview-createorupdate:
  type: text/plain
  value: |
    If a data view with the same identifier already exists, it is updated to the specified value. Otherwise, a new data view is created.

dataview-delete:
  type: text/plain
  value: |
    Deletes the data view with the specified id.

dataview-get:
  type: text/plain
  value: |
    Returns the specified data view.

dataview-getorcreate:
  type: markdown
  value: |
    This method creates the specified data view. If a data view with the same identifier already exists, the existing data view is compared with the specified data view. If they are identical, a redirect (`302 Found`) is returned with the `Location` response header indicating the URL where the data view may be retrieved using a Get function. If the data views do not match, the request fails with `409 Conflict`.

dataviews-get:
  type: text/plain
  value: |
    Returns a list of data views.

# method summaries: resolved routes
allfieldsets-get:
  type: text/plain
  value: |
    Returns the collection of all field sets eligible for use in the data view, including fields which are currently included in the data view.

availablefieldsets-get:
  type: text/plain
  value: |
    Returns the collection of field sets that are available for use in the data view, and which are not already included in the data view.

dataitems-get:
  type: text/plain
  value: |
    Returns the paged collection of data items that are the results of an individual query, and which are eligible for use in the current data view. A data view has a collection of zero or more queries. Each query has an identifier. Those identifiers are used here as part of the request path.
    
fieldmappings-get:
  type: text/plain
  value: |
    Returns the collection of field mappings resolved for the data view. These show the exact data behind every field, for each data item, for each group.

groups-get:
  type: markdown
  value: |
    Returns the collection of `Group`s that resolved for the data view.

ineligibledataitems-get:
  type: text/plain
  value: |
    Returns the paged collection of data items that are the results of an individual query, but which are not eligible for use in the current data view. A common reason for ineligibility is that the item's index property is of a different type than the data view expects. A data view has a collection of zero or more queries. Each query has an identifier. Those identifiers are used here as part of the request path.

statistics-get:
  type: text/plain
  value: |
    Returns the statistics about the size and shape on how the data view resolved. 
